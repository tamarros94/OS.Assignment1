diff --git a/.idea/Assignment1.iml b/.idea/Assignment1.iml
new file mode 100644
index 0000000..f08604b
--- /dev/null
+++ b/.idea/Assignment1.iml
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module classpath="CMake" type="CPP_MODULE" version="4" />
\ No newline at end of file
diff --git a/.idea/codeStyles/Project.xml b/.idea/codeStyles/Project.xml
new file mode 100644
index 0000000..30aa626
--- /dev/null
+++ b/.idea/codeStyles/Project.xml
@@ -0,0 +1,29 @@
+<component name="ProjectCodeStyleConfiguration">
+  <code_scheme name="Project" version="173">
+    <Objective-C-extensions>
+      <file>
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Import" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Macro" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Typedef" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Enum" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Constant" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Global" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Struct" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="FunctionPredecl" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Function" />
+      </file>
+      <class>
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Property" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Synthesize" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="InitMethod" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="StaticMethod" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="InstanceMethod" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="DeallocMethod" />
+      </class>
+      <extensions>
+        <pair source="cpp" header="h" fileNamingConvention="NONE" />
+        <pair source="c" header="h" fileNamingConvention="NONE" />
+      </extensions>
+    </Objective-C-extensions>
+  </code_scheme>
+</component>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
index 0000000..8822db8
--- /dev/null
+++ b/.idea/misc.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CMakeWorkspace" PROJECT_DIR="$PROJECT_DIR$" />
+  <component name="JavaScriptSettings">
+    <option name="languageLevel" value="ES6" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
index 0000000..bf18852
--- /dev/null
+++ b/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/Assignment1.iml" filepath="$PROJECT_DIR$/.idea/Assignment1.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
index 0000000..94a25f7
--- /dev/null
+++ b/.idea/vcs.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
new file mode 100644
index 0000000..7a45436
--- /dev/null
+++ b/.idea/workspace.xml
@@ -0,0 +1,831 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CMakeRunConfigurationManager" shouldGenerate="true" shouldDeleteObsolete="true" buildAllGenerated="true">
+    <generated>
+      <config projectName="Assignment1" targetName="Assignment1" />
+    </generated>
+  </component>
+  <component name="CMakeSettings" AUTO_RELOAD="true">
+    <configurations>
+      <configuration PROFILE_NAME="Debug" CONFIG_NAME="Debug" />
+    </configurations>
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="bd20cb98-d1c9-4b4a-9e88-1c682b3c84a7" name="Default" comment="">
+      <change afterPath="$PROJECT_DIR$/.idea/Assignment1.iml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/codeStyles/Project.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/modules.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/CMakeLists.txt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/.vscode/settings.json" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/detachTest.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/exitWait.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/helloW.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/pathTest.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/pathTest1.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/pathTest2.1.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/pathTest2.2.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/pathTest3.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/pathTest4.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/pathTest5.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/policySysTest.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/prioritySysTest.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/quitXV6.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/schedulingTest1.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/schedulingTest10.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/schedulingTest11.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/schedulingTest12.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/schedulingTest13.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/schedulingTest2.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/schedulingTest3.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/schedulingTest4.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/schedulingTest5.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/schedulingTest6.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/schedulingTest7.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/schedulingTest8.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/schedulingTest9.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/XV6_Tests/usertests.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/include/ProjectTest.h" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/include/Tests.h" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/makefile" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/src/ProjectTest.cpp" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/src/Tests.cpp" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Project_Test/src/temp.cpp" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/Assignment1.cbp" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeCache.txt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/3.10.3/CMakeCCompiler.cmake" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/3.10.3/CMakeCXXCompiler.cmake" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/3.10.3/CMakeDetermineCompilerABI_C.bin" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/3.10.3/CMakeDetermineCompilerABI_CXX.bin" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/3.10.3/CMakeSystem.cmake" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdC/CMakeCCompilerId.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdC/a.out" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdCXX/CMakeCXXCompilerId.cpp" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdCXX/a.out" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/C.includecache" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/CXX.includecache" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/DependInfo.cmake" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/ass1ds.cpp.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/bio.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/bootmain.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/build.make" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/cat.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/cmake_clean.cmake" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/console.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/depend.internal" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/depend.make" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/echo.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/exec.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/file.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/flags.make" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/forktest.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/fs.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/grep.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/ide.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/init.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/ioapic.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/kalloc.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/kbd.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/kill.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/lapic.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/link.txt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/ln.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/log.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/ls.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/main.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/memide.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/mkdir.c.o" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Assignment1.dir/progress.make" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/CMakeDirectoryInformation.cmake" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/CMakeOutput.log" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Makefile.cmake" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Makefile2" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Progress/22" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Progress/25" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/Progress/count.txt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/TargetDirectories.txt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/clion-environment.txt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/clion-log.txt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/cmake.check_cache" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/feature_tests.bin" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/feature_tests.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/feature_tests.cxx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/progress.marks" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/Makefile" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/cmake-build-debug/cmake_install.cmake" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/policy.c" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/sanity.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Makefile" beforeDir="false" afterPath="$PROJECT_DIR$/Makefile" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ass1ds.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/ass1ds.cpp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cat.c" beforeDir="false" afterPath="$PROJECT_DIR$/cat.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/defs.h" beforeDir="false" afterPath="$PROJECT_DIR$/defs.h" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/echo.c" beforeDir="false" afterPath="$PROJECT_DIR$/echo.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/forktest.c" beforeDir="false" afterPath="$PROJECT_DIR$/forktest.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/grep.c" beforeDir="false" afterPath="$PROJECT_DIR$/grep.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/init.c" beforeDir="false" afterPath="$PROJECT_DIR$/init.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/kill.c" beforeDir="false" afterPath="$PROJECT_DIR$/kill.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ln.c" beforeDir="false" afterPath="$PROJECT_DIR$/ln.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ls.c" beforeDir="false" afterPath="$PROJECT_DIR$/ls.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/mkdir.c" beforeDir="false" afterPath="$PROJECT_DIR$/mkdir.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/proc.c" beforeDir="false" afterPath="$PROJECT_DIR$/proc.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/proc.h" beforeDir="false" afterPath="$PROJECT_DIR$/proc.h" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/rm.c" beforeDir="false" afterPath="$PROJECT_DIR$/rm.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/schedulinginterface.h" beforeDir="false" afterPath="$PROJECT_DIR$/schedulinginterface.h" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/sh.c" beforeDir="false" afterPath="$PROJECT_DIR$/sh.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/stressfs.c" beforeDir="false" afterPath="$PROJECT_DIR$/stressfs.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/syscall.c" beforeDir="false" afterPath="$PROJECT_DIR$/syscall.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/syscall.h" beforeDir="false" afterPath="$PROJECT_DIR$/syscall.h" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/sysproc.c" beforeDir="false" afterPath="$PROJECT_DIR$/sysproc.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/trap.c" beforeDir="false" afterPath="$PROJECT_DIR$/trap.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/types.h" beforeDir="false" afterPath="$PROJECT_DIR$/types.h" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/user.h" beforeDir="false" afterPath="$PROJECT_DIR$/user.h" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/usys.S" beforeDir="false" afterPath="$PROJECT_DIR$/usys.S" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/wc.c" beforeDir="false" afterPath="$PROJECT_DIR$/wc.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/zombie.c" beforeDir="false" afterPath="$PROJECT_DIR$/zombie.c" afterDir="false" />
+    </list>
+    <ignored path="$PROJECT_DIR$/cmake-build-debug/" />
+    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
+    <option name="TRACKING_ENABLED" value="true" />
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileEditorManager">
+    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
+      <file leaf-file-name="sysproc.c" pinned="false" current-in-tab="false">
+        <entry file="file://$PROJECT_DIR$/sysproc.c">
+          <provider selected="true" editor-type-id="text-editor">
+            <state relative-caret-position="140">
+              <caret line="129" column="1" selection-start-line="129" selection-start-column="1" selection-end-line="129" selection-end-column="1" />
+              <folding>
+                <element signature="e#0#18#0" expanded="true" />
+              </folding>
+            </state>
+          </provider>
+        </entry>
+      </file>
+      <file leaf-file-name="policy.c" pinned="false" current-in-tab="false">
+        <entry file="file://$PROJECT_DIR$/policy.c">
+          <provider selected="true" editor-type-id="text-editor">
+            <state relative-caret-position="136">
+              <caret line="8" column="1" selection-start-line="8" selection-start-column="1" selection-end-line="8" selection-end-column="1" />
+              <folding>
+                <element signature="e#1#19#0" expanded="true" />
+              </folding>
+            </state>
+          </provider>
+        </entry>
+      </file>
+      <file leaf-file-name="proc.c" pinned="false" current-in-tab="true">
+        <entry file="file://$PROJECT_DIR$/proc.c">
+          <provider selected="true" editor-type-id="text-editor">
+            <state relative-caret-position="259">
+              <caret line="780" column="23" selection-start-line="780" selection-start-column="23" selection-end-line="780" selection-end-column="23" />
+            </state>
+          </provider>
+        </entry>
+      </file>
+      <file leaf-file-name="trap.c" pinned="false" current-in-tab="false">
+        <entry file="file://$PROJECT_DIR$/trap.c">
+          <provider selected="true" editor-type-id="text-editor">
+            <state relative-caret-position="238">
+              <caret line="52" column="17" selection-start-line="52" selection-start-column="17" selection-end-line="52" selection-end-column="17" />
+            </state>
+          </provider>
+        </entry>
+      </file>
+      <file leaf-file-name="proc.h" pinned="false" current-in-tab="false">
+        <entry file="file://$PROJECT_DIR$/proc.h">
+          <provider selected="true" editor-type-id="text-editor">
+            <state relative-caret-position="611">
+              <caret line="41" column="7" selection-start-line="41" selection-start-column="7" selection-end-line="41" selection-end-column="7" />
+            </state>
+          </provider>
+        </entry>
+      </file>
+      <file leaf-file-name="spinlock.c" pinned="false" current-in-tab="false">
+        <entry file="file://$PROJECT_DIR$/spinlock.c">
+          <provider selected="true" editor-type-id="text-editor">
+            <state relative-caret-position="356">
+              <caret line="42" selection-start-line="42" selection-end-line="42" />
+            </state>
+          </provider>
+        </entry>
+      </file>
+      <file leaf-file-name="CMakeLists.txt" pinned="false" current-in-tab="false">
+        <entry file="file://$PROJECT_DIR$/CMakeLists.txt">
+          <provider selected="true" editor-type-id="text-editor">
+            <state relative-caret-position="194">
+              <caret line="18" column="13" selection-start-line="18" selection-start-column="13" selection-end-line="18" selection-end-column="13" />
+            </state>
+          </provider>
+        </entry>
+      </file>
+      <file leaf-file-name="defs.h" pinned="false" current-in-tab="false">
+        <entry file="file://$PROJECT_DIR$/defs.h">
+          <provider selected="true" editor-type-id="text-editor">
+            <state relative-caret-position="255">
+              <caret line="141" column="14" selection-start-line="141" selection-start-column="14" selection-end-line="141" selection-end-column="14" />
+            </state>
+          </provider>
+        </entry>
+      </file>
+      <file leaf-file-name="usys.S" pinned="false" current-in-tab="false">
+        <entry file="file://$PROJECT_DIR$/usys.S">
+          <provider selected="true" editor-type-id="text-editor">
+            <state relative-caret-position="466">
+              <caret line="34" column="18" selection-start-line="34" selection-start-column="18" selection-end-line="34" selection-end-column="18" />
+            </state>
+          </provider>
+        </entry>
+      </file>
+      <file leaf-file-name="syscall.c" pinned="false" current-in-tab="false">
+        <entry file="file://$PROJECT_DIR$/syscall.c">
+          <provider selected="true" editor-type-id="text-editor">
+            <state relative-caret-position="21">
+              <caret line="136" column="32" selection-start-line="136" selection-start-column="32" selection-end-line="136" selection-end-column="32" />
+            </state>
+          </provider>
+        </entry>
+      </file>
+    </leaf>
+  </component>
+  <component name="FindInProjectRecents">
+    <findStrings>
+      <find>panic</find>
+      <find>EPR</find>
+      <find>RUNNABLE</find>
+      <find>wait_start = 0</find>
+      <find>get_runnable_p</find>
+      <find>release</find>
+      <find>get</find>
+      <find>unknown</find>
+      <find>schedu</find>
+      <find>acquire</find>
+      <find>acquire(</find>
+      <find>printf(</find>
+      <find>acquire(lk);</find>
+      <find>acquire(lk)</find>
+      <find>!= &amp;ptable.lock</find>
+      <find>panic(&quot;a</find>
+      <find>init_acc</find>
+      <find>printf</find>
+      <find>wait_start =</find>
+      <find>init_ac</find>
+      <find>panic(</find>
+      <find>scheduler</find>
+      <find>policy</find>
+      <find>get_r</find>
+      <find>curr_policy</find>
+      <find>accumulator = 0</find>
+      <find>ctime</find>
+      <find>wait</find>
+      <find>exit</find>
+      <find>detach</find>
+    </findStrings>
+    <replaceStrings>
+      <replace>wait(0)</replace>
+    </replaceStrings>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="IdeDocumentHistory">
+    <option name="CHANGED_PATHS">
+      <list>
+        <option value="$PROJECT_DIR$/zombie.c" />
+        <option value="$PROJECT_DIR$/mkdir.c" />
+        <option value="$PROJECT_DIR$/init.c" />
+        <option value="$PROJECT_DIR$/Makefile" />
+        <option value="$PROJECT_DIR$/sh.c" />
+        <option value="$PROJECT_DIR$/spinlock.c" />
+        <option value="$PROJECT_DIR$/forktest.c" />
+        <option value="$PROJECT_DIR$/CMakeLists.txt" />
+        <option value="$PROJECT_DIR$/sanity.c" />
+        <option value="$PROJECT_DIR$/policy.c" />
+        <option value="$PROJECT_DIR$/syscall.h" />
+        <option value="$PROJECT_DIR$/defs.h" />
+        <option value="$PROJECT_DIR$/types.h" />
+        <option value="$PROJECT_DIR$/user.h" />
+        <option value="$PROJECT_DIR$/sysproc.c" />
+        <option value="$PROJECT_DIR$/usys.S" />
+        <option value="$PROJECT_DIR$/syscall.c" />
+        <option value="$PROJECT_DIR$/proc.h" />
+        <option value="$PROJECT_DIR$/proc.c" />
+        <option value="$PROJECT_DIR$/trap.c" />
+      </list>
+    </option>
+  </component>
+  <component name="JsBuildToolGruntFileManager" detection-done="true" sorting="DEFINITION_ORDER" />
+  <component name="JsBuildToolPackageJson" detection-done="true" sorting="DEFINITION_ORDER" />
+  <component name="JsGulpfileManager">
+    <detection-done>true</detection-done>
+    <sorting>DEFINITION_ORDER</sorting>
+  </component>
+  <component name="NodePackageJsonFileManager">
+    <packageJsonPaths />
+  </component>
+  <component name="OCFindUsagesOptions" text="true" ivars="false" properties="true" derivedClasses="false" />
+  <component name="ProjectFrameBounds" extendedState="6">
+    <option name="x" value="964" />
+    <option name="width" value="956" />
+    <option name="height" value="1044" />
+  </component>
+  <component name="ProjectView">
+    <navigator proportions="" version="1">
+      <foldersAlwaysOnTop value="true" />
+    </navigator>
+    <panes>
+      <pane id="Scope" />
+      <pane id="ProjectPane">
+        <subPane>
+          <expand>
+            <path>
+              <item name="Assignment1" type="b2602c69:ProjectViewProjectNode" />
+              <item name="Assignment1" type="462c0819:PsiDirectoryNode" />
+            </path>
+          </expand>
+          <select />
+        </subPane>
+      </pane>
+    </panes>
+  </component>
+  <component name="PropertiesComponent">
+    <property name="WebServerToolWindowFactoryState" value="false" />
+    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
+    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
+  </component>
+  <component name="RunDashboard">
+    <option name="ruleStates">
+      <list>
+        <RuleState>
+          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
+        </RuleState>
+        <RuleState>
+          <option name="name" value="StatusDashboardGroupingRule" />
+        </RuleState>
+      </list>
+    </option>
+  </component>
+  <component name="RunManager" selected="GDB Remote Debug.Tamar">
+    <configuration name="Tamar" type="CLion_Remote" factoryName="GDB Remote Debug" remoteCommand="localhost:28686" symbolFile="$PROJECT_DIR$/kernel" sysroot="$PROJECT_DIR$" />
+    <configuration default="true" type="CLion_Remote" factoryName="GDB Remote Debug" remoteCommand="localhost:26000" symbolFile="$PROJECT_DIR$ /kernel" sysroot="$PROJECT_DIR$ " />
+    <configuration name="ass1" type="CLion_Remote" factoryName="GDB Remote Debug" remoteCommand="localhost:28686" symbolFile="$PROJECT_DIR$/kernel" sysroot="$PROJECT_DIR$ " />
+    <configuration name="Assignment1" type="CMakeRunConfiguration" factoryName="Application" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Assignment1" TARGET_NAME="Assignment1" CONFIG_NAME="Debug" RUN_TARGET_PROJECT_NAME="Assignment1" RUN_TARGET_NAME="Assignment1" />
+    <configuration name="Build All" type="CMakeRunConfiguration" factoryName="Application" PASS_PARENT_ENVS_2="true" CONFIG_NAME="Debug" RUN_TARGET_PROJECT_NAME="Assignment1" RUN_TARGET_NAME="Assignment1" EXPLICIT_BUILD_TARGET_NAME="all" />
+    <list>
+      <item itemvalue="Application.Build All" />
+      <item itemvalue="Application.Assignment1" />
+      <item itemvalue="GDB Remote Debug.Tamar" />
+      <item itemvalue="GDB Remote Debug.ass1" />
+    </list>
+  </component>
+  <component name="SvnConfiguration">
+    <configuration />
+  </component>
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="bd20cb98-d1c9-4b4a-9e88-1c682b3c84a7" name="Default" comment="" />
+      <created>1552828148401</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1552828148401</updated>
+      <workItem from="1552828149579" duration="3740000" />
+      <workItem from="1552838608414" duration="2813000" />
+      <workItem from="1553087428429" duration="8197000" />
+      <workItem from="1553095710472" duration="7000" />
+      <workItem from="1553095823673" duration="1840000" />
+      <workItem from="1553424216890" duration="9708000" />
+      <workItem from="1553443738137" duration="8684000" />
+      <workItem from="1553508022720" duration="1329000" />
+      <workItem from="1553516841073" duration="4608000" />
+      <workItem from="1553532383671" duration="3186000" />
+      <workItem from="1553528483094" duration="366000" />
+      <workItem from="1553528851328" duration="31000" />
+      <workItem from="1553528884206" duration="38000" />
+      <workItem from="1553528923727" duration="688000" />
+      <workItem from="1553529893854" duration="173000" />
+      <workItem from="1553530124273" duration="7477000" />
+    </task>
+    <servers />
+  </component>
+  <component name="TimeTrackingManager">
+    <option name="totallyTimeSpent" value="52885000" />
+  </component>
+  <component name="ToolWindowManager">
+    <frame x="0" y="0" width="1920" height="1044" extended-state="6" />
+    <editor active="true" />
+    <layout>
+      <window_info active="true" content_ui="combo" id="Project" order="0" sideWeight="0.49920255" visible="true" weight="0.116145834" />
+      <window_info anchor="bottom" id="TODO" order="6" />
+      <window_info anchor="bottom" id="CMake" order="11" weight="0.32941177" />
+      <window_info anchor="bottom" id="Event Log" order="9" side_tool="true" />
+      <window_info anchor="bottom" id="Find" order="1" weight="0.32941177" />
+      <window_info anchor="bottom" id="Version Control" order="10" />
+      <window_info anchor="bottom" id="Run" order="2" />
+      <window_info id="Structure" order="1" sideWeight="0.50079745" side_tool="true" weight="0.18020834" />
+      <window_info anchor="bottom" id="Terminal" order="8" />
+      <window_info id="Favorites" order="2" side_tool="true" />
+      <window_info anchor="bottom" id="Debug" order="3" visible="true" weight="0.4" />
+      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
+      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
+      <window_info anchor="right" id="Commander" order="0" weight="0.4" />
+      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
+      <window_info anchor="bottom" id="Messages" order="7" weight="0.32941177" />
+      <window_info anchor="bottom" id="Message" order="0" />
+      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
+    </layout>
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="1" />
+  </component>
+  <component name="VcsContentAnnotationSettings">
+    <option name="myLimit" value="2678400000" />
+  </component>
+  <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" type="com.jetbrains.cidr.execution.debugger.OCBreakpointType">
+          <url>file://$PROJECT_DIR$/spinlock.c</url>
+          <line>28</line>
+          <option name="timeStamp" value="3" />
+        </line-breakpoint>
+      </breakpoints>
+      <option name="time" value="19" />
+    </breakpoint-manager>
+  </component>
+  <component name="editorHistoryManager">
+    <entry file="file://$PROJECT_DIR$/sysproc.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="510">
+          <caret line="30" selection-start-line="30" selection-end-line="30" />
+          <folding>
+            <element signature="e#0#18#0" expanded="true" />
+          </folding>
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/sh.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="3570">
+          <caret line="212" column="5" selection-start-line="212" selection-start-column="5" selection-end-line="212" selection-end-column="5" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/sanity.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="17">
+          <caret line="1" column="15" selection-start-line="1" selection-start-column="15" selection-end-line="1" selection-end-column="15" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/proc.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="5610">
+          <caret line="330" column="1" lean-forward="true" selection-start-line="330" selection-start-column="1" selection-end-line="330" selection-end-column="1" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/defs.h">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="1802">
+          <caret line="106" column="26" selection-start-line="106" selection-start-column="26" selection-end-line="106" selection-end-column="26" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/proc.h">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="935">
+          <caret line="55" column="15" selection-start-line="55" selection-start-column="15" selection-end-line="55" selection-end-column="15" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/user.h">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="425">
+          <caret line="25" column="4" selection-start-line="25" selection-start-column="4" selection-end-line="25" selection-end-column="4" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/sysproc.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="510">
+          <caret line="30" selection-start-line="30" selection-end-line="30" />
+          <folding>
+            <element signature="e#0#18#0" expanded="true" />
+          </folding>
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/sh.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="3604">
+          <caret line="212" column="5" selection-start-line="212" selection-start-column="5" selection-end-line="212" selection-end-column="5" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/sanity.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="374">
+          <caret line="22" column="15" lean-forward="true" selection-start-line="22" selection-start-column="15" selection-end-line="22" selection-end-column="15" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/proc.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="5899">
+          <caret line="347" column="13" selection-start-line="347" selection-start-column="13" selection-end-line="347" selection-end-column="13" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/user.h">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="391">
+          <caret line="23" column="15" selection-start-line="23" selection-start-column="15" selection-end-line="23" selection-end-column="15" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/sh.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="3604">
+          <caret line="212" column="5" selection-start-line="212" selection-start-column="5" selection-end-line="212" selection-end-column="5" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/proc.h">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="714">
+          <caret line="42" column="23" selection-start-line="42" selection-start-column="23" selection-end-line="42" selection-end-column="23" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/sysproc.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="612">
+          <caret line="36" column="27" lean-forward="true" selection-start-line="36" selection-start-column="27" selection-end-line="36" selection-end-column="27" />
+          <folding>
+            <element signature="e#0#18#0" expanded="true" />
+          </folding>
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/proc.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="5338">
+          <caret line="314" column="7" lean-forward="true" selection-start-line="314" selection-start-column="7" selection-end-line="314" selection-end-column="7" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/sh.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="3604">
+          <caret line="212" column="5" lean-forward="true" selection-start-line="212" selection-start-column="5" selection-end-line="212" selection-end-column="5" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/proc.h">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="833">
+          <caret line="49" column="20" lean-forward="true" selection-start-line="49" selection-start-column="20" selection-end-line="49" selection-end-column="20" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/kill.asm" />
+    <entry file="file://$PROJECT_DIR$/init.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="476">
+          <caret line="31" column="12" selection-start-line="31" selection-start-column="12" selection-end-line="31" selection-end-column="12" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/mkdir.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="323">
+          <caret line="21" column="10" lean-forward="true" selection-start-line="21" selection-start-column="10" selection-end-line="21" selection-end-column="10" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/zombie.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="238">
+          <caret line="14" lean-forward="true" selection-start-line="14" selection-end-line="14" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/stat.h">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="17">
+          <caret line="1" column="10" selection-start-line="1" selection-start-column="10" selection-end-line="1" selection-end-column="10" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/Makefile">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="459">
+          <caret line="153" column="7" selection-start-line="153" selection-start-column="7" selection-end-line="153" selection-end-column="7" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/Notes">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="200">
+          <caret line="50" selection-start-line="50" selection-end-line="50" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/sh.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="340">
+          <caret line="97" column="41" selection-start-line="97" selection-start-column="37" selection-end-line="97" selection-end-column="41" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/bio.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="200">
+          <caret line="65" column="2" selection-start-line="65" selection-start-column="2" selection-end-line="65" selection-end-column="2" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/vm.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="476">
+          <caret line="151" column="4" selection-start-line="151" selection-start-column="4" selection-end-line="151" selection-end-column="4" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/x86.h">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="169">
+          <caret line="97" selection-start-line="97" selection-end-line="97" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/uart.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="195">
+          <caret line="60" selection-start-line="60" selection-end-line="60" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/console.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="186">
+          <caret line="69" selection-start-line="69" selection-end-line="69" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/lapic.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="220">
+          <caret line="105" selection-start-line="105" selection-end-line="105" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/ass1ds.cpp">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="1734">
+          <caret line="102" selection-start-line="102" selection-end-line="102" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/schedulinginterface.h">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="714">
+          <caret line="42" column="25" selection-start-line="42" selection-start-column="14" selection-end-line="42" selection-end-column="25" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/forktest.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="51">
+          <caret line="3" selection-start-line="3" selection-end-line="5" selection-end-column="17" />
+          <folding>
+            <element signature="e#105#123#0" expanded="true" />
+          </folding>
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/main.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="85">
+          <caret line="5" column="1" lean-forward="true" selection-start-line="5" selection-start-column="1" selection-end-line="5" selection-end-column="1" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/sanity.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="272">
+          <caret line="16" column="7" selection-start-line="16" selection-start-column="7" selection-end-line="16" selection-end-column="7" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/spinlock.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="356">
+          <caret line="42" selection-start-line="42" selection-end-line="42" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/trapasm.S">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="442">
+          <caret line="26" selection-start-line="26" selection-end-line="26" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/policy.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="136">
+          <caret line="8" column="1" selection-start-line="8" selection-start-column="1" selection-end-line="8" selection-end-column="1" />
+          <folding>
+            <element signature="e#1#19#0" expanded="true" />
+          </folding>
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/CMakeLists.txt">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="194">
+          <caret line="18" column="13" selection-start-line="18" selection-start-column="13" selection-end-line="18" selection-end-column="13" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/syscall.h">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="442">
+          <caret line="26" lean-forward="true" selection-start-line="26" selection-end-line="26" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/types.h">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="136">
+          <caret line="8" column="7" selection-start-line="8" selection-start-column="7" selection-end-line="8" selection-end-column="7" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/user.h">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="374">
+          <caret line="28" column="34" lean-forward="true" selection-start-line="28" selection-start-column="34" selection-end-line="28" selection-end-column="34" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/defs.h">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="255">
+          <caret line="141" column="14" selection-start-line="141" selection-start-column="14" selection-end-line="141" selection-end-column="14" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/sysproc.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="140">
+          <caret line="129" column="1" selection-start-line="129" selection-start-column="1" selection-end-line="129" selection-end-column="1" />
+          <folding>
+            <element signature="e#0#18#0" expanded="true" />
+          </folding>
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/usys.S">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="466">
+          <caret line="34" column="18" selection-start-line="34" selection-start-column="18" selection-end-line="34" selection-end-column="18" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/syscall.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="21">
+          <caret line="136" column="32" selection-start-line="136" selection-start-column="32" selection-end-line="136" selection-end-column="32" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/proc.h">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="611">
+          <caret line="41" column="7" selection-start-line="41" selection-start-column="7" selection-end-line="41" selection-end-column="7" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/trap.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="238">
+          <caret line="52" column="17" selection-start-line="52" selection-start-column="17" selection-end-line="52" selection-end-column="17" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/proc.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="259">
+          <caret line="780" column="23" selection-start-line="780" selection-start-column="23" selection-end-line="780" selection-end-column="23" />
+        </state>
+      </provider>
+    </entry>
+  </component>
+</project>
\ No newline at end of file
diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..bd95994
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,114 @@
+cmake_minimum_required(VERSION 3.10)
+project(Assignment1)
+
+set(CMAKE_CXX_STANDARD 11)
+
+include_directories(.)
+
+add_executable(Assignment1
+        cmake-build-debug/Assignment1.cbp
+        cmake-build-debug/cmake_install.cmake
+        cmake-build-debug/CMakeCache.txt
+        cmake-build-debug/Makefile
+        asm.h
+        ass1ds.cpp
+        ass1ds.hpp
+        bio.c
+        bootasm.S
+        bootmain.c
+        buf.h
+        BUGS
+        cat.c
+        console.c
+        cuth
+        date.h
+        defs.h
+        dot-bochsrc
+        echo.c
+        elf.h
+        entry.S
+        entryother.S
+        exec.c
+        fcntl.h
+        file.c
+        file.h
+        forktest.c
+        fs.c
+        fs.h
+        gdbutil
+        grep.c
+        ide.c
+        init.c
+        initcode.S
+        ioapic.c
+        kalloc.c
+        kbd.c
+        kbd.h
+        kernel.ld
+        kill.c
+        lapic.c
+        LICENSE
+        ln.c
+        log.c
+        ls.c
+        main.c
+        Makefile
+        memide.c
+        memlayout.h
+        mkdir.c
+        mkfs.c
+        mmu.h
+        mp.c
+        mp.h
+        Notes
+        param.h
+        picirq.c
+        pipe.c
+        policy.c
+        pr.pl
+        printf.c
+        printpcs
+        proc.c
+        proc.h
+        README
+        rm.c
+        runoff
+        runoff.list
+        runoff.spec
+        runoff1
+        sanity.c
+        schedulinginterface.h
+        sh.c
+        show1
+        sign.pl
+        sleep1.p
+        sleeplock.c
+        sleeplock.h
+        spinlock.c
+        spinlock.h
+        spinp
+        stat.h
+        stressfs.c
+        string.c
+        swtch.S
+        syscall.c
+        syscall.h
+        sysfile.c
+        sysproc.c
+        toc.ftr
+        toc.hdr
+        trap.c
+        trapasm.S
+        traps.h
+        TRICKS
+        types.h
+        uart.c
+        ulib.c
+        umalloc.c
+        user.h
+        usys.S
+        vectors.pl
+        vm.c
+        wc.c
+        x86.h
+        zombie.c)
diff --git a/Makefile b/Makefile
index 920b6a3..697c2e4 100644
--- a/Makefile
+++ b/Makefile
@@ -198,6 +198,8 @@ UPROGS=\
 	_stressfs\
 	_wc\
 	_zombie\
+	_sanity\
+	_policy\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -267,7 +269,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c sanity.c policy.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/Project_Test/.vscode/settings.json b/Project_Test/.vscode/settings.json
new file mode 100644
index 0000000..90136cc
--- /dev/null
+++ b/Project_Test/.vscode/settings.json
@@ -0,0 +1,47 @@
+{
+    "files.associations": {
+        "iostream": "cpp",
+        "cctype": "cpp",
+        "cmath": "cpp",
+        "cstdarg": "cpp",
+        "cstddef": "cpp",
+        "cstdio": "cpp",
+        "cstdlib": "cpp",
+        "cstring": "cpp",
+        "ctime": "cpp",
+        "cwchar": "cpp",
+        "array": "cpp",
+        "atomic": "cpp",
+        "strstream": "cpp",
+        "*.tcc": "cpp",
+        "chrono": "cpp",
+        "clocale": "cpp",
+        "complex": "cpp",
+        "cstdint": "cpp",
+        "cwctype": "cpp",
+        "unordered_map": "cpp",
+        "vector": "cpp",
+        "exception": "cpp",
+        "fstream": "cpp",
+        "functional": "cpp",
+        "initializer_list": "cpp",
+        "iosfwd": "cpp",
+        "istream": "cpp",
+        "limits": "cpp",
+        "memory": "cpp",
+        "new": "cpp",
+        "ostream": "cpp",
+        "ratio": "cpp",
+        "sstream": "cpp",
+        "stdexcept": "cpp",
+        "streambuf": "cpp",
+        "system_error": "cpp",
+        "thread": "cpp",
+        "cinttypes": "cpp",
+        "type_traits": "cpp",
+        "tuple": "cpp",
+        "typeindex": "cpp",
+        "typeinfo": "cpp",
+        "utility": "cpp"
+    }
+}
\ No newline at end of file
diff --git a/Project_Test/XV6_Tests/detachTest.c b/Project_Test/XV6_Tests/detachTest.c
new file mode 100644
index 0000000..3a60eed
--- /dev/null
+++ b/Project_Test/XV6_Tests/detachTest.c
@@ -0,0 +1,109 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+int main(int argc, char *argv[]){
+    int pidChild1;
+    int pidChild2;
+    int pidChild3;
+    int pidChild4;
+    int pidChild5;
+    int pidChild6;
+    int detachResult;
+    int secToWait = 500;
+    
+    if((pidChild1 = fork()) == 0){
+        sleep(secToWait);
+        exit(secToWait);
+    }
+
+    if((pidChild2 = fork()) == 0){
+        sleep(secToWait);
+        exit(secToWait);
+    }
+
+    if((pidChild3 = fork()) == 0){
+        sleep(secToWait);
+        exit(secToWait);
+    }
+
+    if((pidChild4 = fork()) == 0){
+        sleep(secToWait);
+        exit(secToWait);
+    }
+
+    if((pidChild5 = fork()) == 0){
+        sleep(secToWait);
+        exit(secToWait);
+    }
+
+    if((pidChild6 = fork()) == 0){
+        sleep(secToWait);
+        exit(secToWait);
+    }
+    
+    detachResult = detach(77);
+    printf(1,"detach result for not my child is: %d\n",detachResult);
+
+    detachResult = detach(pidChild1);
+    printf(1,"detach result for child 1 is: %d\n",detachResult);
+
+    detachResult = detach(pidChild2);
+    printf(1,"detach result for child 2 is: %d\n",detachResult);
+
+    detachResult = detach(pidChild3);
+    printf(1,"detach result for child 3 is: %d\n",detachResult);
+
+    detachResult = detach(pidChild4);
+    printf(1,"detach result for child 4 is: %d\n",detachResult);
+
+    detachResult = detach(pidChild5);
+    printf(1,"detach result for child 5 is: %d\n",detachResult);
+
+    detachResult = detach(pidChild6);
+    printf(1,"detach result for child 6 is: %d\n",detachResult);
+
+    detachResult = detach(105);
+    printf(1,"detach result for not my child is: %d\n",detachResult);
+
+    detachResult = detach(pidChild1);
+    printf(1,"second detach result for child 1 is: %d\n",detachResult);
+
+    detachResult = detach(pidChild2);
+    printf(1,"second detach result for child 2 is: %d\n",detachResult);
+
+    detachResult = detach(pidChild3);
+    printf(1,"second detach result for child 3 is: %d\n",detachResult);
+
+    detachResult = detach(pidChild4);
+    printf(1,"second detach result for child 4 is: %d\n",detachResult);
+
+    detachResult = detach(pidChild5);
+    printf(1,"second detach result for child 5 is: %d\n",detachResult);
+
+    detachResult = detach(pidChild6);
+    printf(1,"second detach result for child 6 is: %d\n",detachResult);
+
+    detachResult = detach(44);
+    printf(1,"detach result for not my child is: %d\n",detachResult);
+    
+    sleep(secToWait * 2);
+
+    if(wait(null) != -1){
+        printf(1,"Succeded in waiting for a child, possible detach error\n");
+    }
+    else{
+        printf(1,"no child left to wait for\n");
+    }
+
+    exit(0);
+
+}
+
+
diff --git a/Project_Test/XV6_Tests/exitWait.c b/Project_Test/XV6_Tests/exitWait.c
new file mode 100644
index 0000000..2706c11
--- /dev/null
+++ b/Project_Test/XV6_Tests/exitWait.c
@@ -0,0 +1,73 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+int main(int argc, char *argv[]){
+    int childExit1;
+    int childExit2;
+    int childExit3;
+    int childExit4;
+    int childExit5;
+    int childExit6;
+    int secToWait = 100;
+
+    if(fork() == 0){
+        sleep(secToWait);
+        exit(1);
+    }
+    wait(&childExit1);
+    printf(1,"1 child exit status is: %d\n",childExit1);
+
+    if(fork() == 0){
+        sleep(secToWait);
+        exit(2);
+    }
+    wait(&childExit2);
+    printf(1,"2 child exit status is: %d\n",childExit2);
+
+    if(fork() == 0){
+        sleep(secToWait);
+        exit(3);
+    }
+    wait(&childExit3);
+    printf(1,"3 child exit status is: %d\n",childExit3);
+
+    if(fork() == 0){
+        sleep(secToWait);
+        exit(4);
+    }
+    wait(&childExit4);
+    printf(1,"4 child exit status is: %d\n",childExit4);
+
+    if(fork() == 0){
+        sleep(secToWait);
+        exit(5);
+    }
+    wait(&childExit5);
+    printf(1,"5 child exit status is: %d\n",childExit5);
+
+    if(fork() == 0){
+        sleep(secToWait);
+        exit(6);
+    }
+    wait(&childExit6);
+    printf(1,"6 child exit status is: %d\n",childExit6);
+
+    if(fork() == 0){
+        sleep(secToWait);
+        exit(7);
+    }
+    wait(null);
+    printf(1,"7 child exit status is unknown\n");
+
+    exit(0);
+
+}
+
+
diff --git a/Project_Test/XV6_Tests/helloW.c b/Project_Test/XV6_Tests/helloW.c
new file mode 100644
index 0000000..786b96b
--- /dev/null
+++ b/Project_Test/XV6_Tests/helloW.c
@@ -0,0 +1,14 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+int main(int argc, char *argv[]){
+    printf(1,"Hello World XV6\n");
+    exit(0);
+}
diff --git a/Project_Test/XV6_Tests/pathTest.c b/Project_Test/XV6_Tests/pathTest.c
new file mode 100644
index 0000000..7963653
--- /dev/null
+++ b/Project_Test/XV6_Tests/pathTest.c
@@ -0,0 +1,124 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+void execute(char * command, char** args);
+
+int main(int argc, char *argv[]){
+    int fd;
+    int writed;
+
+    printf(1,"opening path\n");
+    fd = open("/path",O_WRONLY);
+
+    if(fd < 0){
+        printf(1,"Error in opening path file\n");
+        exit(0);
+    }
+
+    const char * path = "/:/bin/:/hello/world/path/:/under/world/path";
+    
+    printf(1,"writing to path\n");
+    writed = write(fd,path,strlen(path));
+    
+    if(writed != strlen(path)){
+        printf(1,"error in writing to path, %d were written\n",writed);
+    }
+
+    printf(1,"closing path file\n");
+    close(fd);
+    
+    char * command;
+    char *args[4];
+
+    printf(1,"creating /bin/ path\n");
+    args[0] = "/mkdir";
+    args[1] = "/bin/";
+    args[2] = 0;
+    command = "/mkdir";
+    execute(command,args);
+    
+    printf(1,"creating /hello path\n");
+    args[0] = "/mkdir";
+    args[1] = "/hello";
+    args[2] = 0;
+    command = "/mkdir";
+    execute(command,args);
+
+    printf(1,"creating /hello/world path\n");
+    args[0] = "/mkdir";
+    args[1] = "/hello/world";
+    args[2] = 0;
+    command = "/mkdir";
+    execute(command,args);
+
+    printf(1,"creating /hello/world/path path\n");
+    args[0] = "/mkdir";
+    args[1] = "/hello/world/path";
+    args[2] = 0;
+    command = "/mkdir";
+    execute(command,args);
+
+    printf(1,"creating /under path\n");
+    args[0] = "/mkdir";
+    args[1] = "/under";
+    args[2] = 0;
+    command = "/mkdir";
+    execute(command,args);
+
+    printf(1,"creating /under/world path\n");
+    args[0] = "/mkdir";
+    args[1] = "/under/world";
+    args[2] = 0;
+    command = "/mkdir";
+    execute(command,args);
+
+    printf(1,"creating /under/world/path path\n");
+    args[0] = "/mkdir";
+    args[1] = "/under/world/path";
+    args[2] = 0;
+    command = "/mkdir";
+    execute(command,args);
+
+    printf(1,"creating /notIn path\n");
+    args[0] = "/mkdir";
+    args[1] = "/notIn";
+    args[2] = 0;
+    command = "/mkdir";
+    execute(command,args);
+
+    printf(1,"creating /notIn/path path\n");
+    args[0] = "/mkdir";
+    args[1] = "/notIn/path";
+    args[2] = 0;
+    command = "/mkdir";
+    execute(command,args);
+
+    printf(1,"exiting\n");
+
+    exit(0);
+}
+
+void execute(char * command, char** args){
+    int pid;
+
+    if((pid = fork()) == 0){
+        exec(command, args);
+        printf(1, "exec %s failed\n", command);
+    }
+    else if(pid > 0){
+        //printf(1,"waiting for exec of %s to finish\n",command);
+        wait(null);
+        //printf(1,"%s exec exited\n",command);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+
+}
diff --git a/Project_Test/XV6_Tests/pathTest1.c b/Project_Test/XV6_Tests/pathTest1.c
new file mode 100644
index 0000000..c930d52
--- /dev/null
+++ b/Project_Test/XV6_Tests/pathTest1.c
@@ -0,0 +1,65 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+void execute(char * command, char** args);
+
+int main(int argc, char *argv[]){
+    char * command;
+    char *args[4];
+
+    printf(1,"linking helloWorld in /notIn/path\n");
+    args[0] = "/ln";
+    args[1] = "/helloW";
+    args[2] = "/notIn/path/helloW";
+    args[3] = 0;
+    command = "/ln";
+    execute(command,args);
+
+    printf(1,"removing helloWorld from root\n");
+    args[0] = "/rm";
+    args[1] = "/helloW";
+    args[2] = 0;
+    command = "/rm";
+    execute(command,args);
+
+    exit(0);
+}
+
+void execute(char * command, char** args){
+    int pid;
+
+    if((pid = fork()) == 0){
+        exec(command, args);
+        printf(1, "exec %s failed\n", command);
+    }
+    else if(pid > 0){
+        //printf(1,"waiting for exec of %s to finish\n",command);
+        wait(null);
+        //printf(1,"%s exec exited\n",command);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+
+}
+
+    
+
+
+  
+
+
+
+
+
+
+
+  
+
diff --git a/Project_Test/XV6_Tests/pathTest2.1.c b/Project_Test/XV6_Tests/pathTest2.1.c
new file mode 100644
index 0000000..ae62925
--- /dev/null
+++ b/Project_Test/XV6_Tests/pathTest2.1.c
@@ -0,0 +1,45 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+void execute(char * command, char** args);
+
+int main(int argc, char *argv[]){
+    char * command;
+    char *args[4];
+    
+    printf(1,"linking helloWorld in bin\n");
+    args[0] = "/ln";
+    args[1] = "/notIn/path/helloW";
+    args[2] = "/bin/helloW";
+    args[3] = 0;
+    command = "/ln";
+    execute(command,args);
+
+    exit(0);
+
+}
+
+void execute(char * command, char** args){
+    int pid;
+
+    if((pid = fork()) == 0){
+        exec(command, args);
+        printf(1, "exec %s failed\n", command);
+    }
+    else if(pid > 0){
+        //printf(1,"waiting for exec of %s to finish\n",command);
+        wait(null);
+        //printf(1,"%s exec exited\n",command);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+
+}
diff --git a/Project_Test/XV6_Tests/pathTest2.2.c b/Project_Test/XV6_Tests/pathTest2.2.c
new file mode 100644
index 0000000..86e4578
--- /dev/null
+++ b/Project_Test/XV6_Tests/pathTest2.2.c
@@ -0,0 +1,43 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+void execute(char * command, char** args);
+
+int main(int argc, char *argv[]){
+    char * command;
+    char *args[4];
+
+    printf(1,"removing helloWorld from bin\n");
+    args[0] = "/rm";
+    args[1] = "/bin/helloW";
+    args[2] = 0;
+    command = "/rm";
+    execute(command,args);
+
+    exit(0);
+}
+
+void execute(char * command, char** args){
+    int pid;
+
+    if((pid = fork()) == 0){
+        exec(command, args);
+        printf(1, "exec %s failed\n", command);
+    }
+    else if(pid > 0){
+        //printf(1,"waiting for exec of %s to finish\n",command);
+        wait(null);
+        //printf(1,"%s exec exited\n",command);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+
+}
diff --git a/Project_Test/XV6_Tests/pathTest3.c b/Project_Test/XV6_Tests/pathTest3.c
new file mode 100644
index 0000000..6b27ec2
--- /dev/null
+++ b/Project_Test/XV6_Tests/pathTest3.c
@@ -0,0 +1,45 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+void execute(char * command, char** args);
+
+int main(int argc, char *argv[]){
+    char * command;
+    char *args[4];
+
+    printf(1,"linking helloWorld in /hello/world/path/\n");
+    args[0] = "/ln";
+    args[1] = "/notIn/path/helloW";
+    args[2] = "/hello/world/path/helloW";
+    args[3] = 0;
+    command = "/ln";
+    execute(command,args);
+
+    exit(0);
+
+}
+
+void execute(char * command, char** args){
+    int pid;
+
+    if((pid = fork()) == 0){
+        exec(command, args);
+        printf(1, "exec %s failed\n", command);
+    }
+    else if(pid > 0){
+        //printf(1,"waiting for exec of %s to finish\n",command);
+        wait(null);
+        //printf(1,"%s exec exited\n",command);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+
+}
diff --git a/Project_Test/XV6_Tests/pathTest4.c b/Project_Test/XV6_Tests/pathTest4.c
new file mode 100644
index 0000000..ce8af45
--- /dev/null
+++ b/Project_Test/XV6_Tests/pathTest4.c
@@ -0,0 +1,68 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+void execute(char * command, char** args);
+
+int main(int argc, char *argv[]){
+    char * command;
+    char *args[4];
+
+    printf(1,"copying cat to /notIn/path/cat\n");
+    args[0] = "/ln";
+    args[1] = "/cat";
+    args[2] = "/notIn/path/cat";
+    args[3] = 0;
+    command = "/ln";
+    execute(command,args);
+    
+    printf(1,"copying echo to /notIn/path/echo\n");
+    args[0] = "/ln";
+    args[1] = "/echo";
+    args[2] = "/notIn/path/echo";
+    args[3] = 0;
+    command = "/ln";
+    execute(command,args);
+
+    printf(1,"removing /cat\n");
+    args[0] = "/rm";
+    args[1] = "/cat";
+    args[2] = 0;
+    command = "/rm";
+    execute(command,args);
+
+    printf(1,"removing /echo\n");
+    args[0] = "/rm";
+    args[1] = "/echo";
+    args[2] = 0;
+    command = "/rm";
+    execute(command,args);
+
+    printf(1,"exiting\n");
+
+    exit(0);
+}
+
+void execute(char * command, char** args){
+    int pid;
+
+    if((pid = fork()) == 0){
+        exec(command, args);
+        printf(1, "exec %s failed\n", command);
+    }
+    else if(pid > 0){
+        //printf(1,"waiting for exec of %s to finish\n",command);
+        wait(null);
+        //printf(1,"%s exec exited\n",command);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+
+}
diff --git a/Project_Test/XV6_Tests/pathTest5.c b/Project_Test/XV6_Tests/pathTest5.c
new file mode 100644
index 0000000..1691bc3
--- /dev/null
+++ b/Project_Test/XV6_Tests/pathTest5.c
@@ -0,0 +1,54 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+void execute(char * command, char** args);
+
+int main(int argc, char *argv[]){
+    char * command;
+    char *args[4];
+
+    printf(1,"copying /notIn/path/cat to /bin/cat\n");
+    args[0] = "/ln";
+    args[1] = "/notIn/path/cat";
+    args[2] = "/bin/cat";
+    args[3] = 0;
+    command = "/ln";
+    execute(command,args);
+    
+    printf(1,"copying /notIn/path/echo to /hello/world/path/echo\n");
+    args[0] = "/ln";
+    args[1] = "notIn/path/echo";
+    args[2] = "/hello/world/path/echo";
+    args[3] = 0;
+    command = "/ln";
+    execute(command,args);
+
+    printf(1,"exiting\n");
+
+    exit(0);
+}
+
+void execute(char * command, char** args){
+    int pid;
+
+    if((pid = fork()) == 0){
+        exec(command, args);
+        printf(1, "exec %s failed\n", command);
+    }
+    else if(pid > 0){
+        //printf(1,"waiting for exec of %s to finish\n",command);
+        wait(null);
+        //printf(1,"%s exec exited\n",command);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+
+}
diff --git a/Project_Test/XV6_Tests/policySysTest.c b/Project_Test/XV6_Tests/policySysTest.c
new file mode 100644
index 0000000..d4670dc
--- /dev/null
+++ b/Project_Test/XV6_Tests/policySysTest.c
@@ -0,0 +1,70 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+int main(int argc, char *argv[]){
+    printf(1,"Calling priority system call with correct args\n");
+    priority(4);
+
+    printf(1,"Calling policy system call\n");
+    policy(1);
+
+    printf(1,"Calling priority system call with correct args\n");
+    priority(1);
+
+    printf(1,"Calling policy system call\n");
+    policy(2);
+
+    printf(1,"Calling priority system call with correct args\n");
+    priority(9);
+
+    printf(1,"Calling policy system call\n");
+    policy(3);
+
+    printf(1,"Calling priority system call with correct args\n");
+    priority(10);
+
+    printf(1,"Calling policy system call\n");
+    policy(3);
+    
+    printf(1,"Calling priority system call with correct args\n");
+    priority(0);
+
+    printf(1,"Calling policy system call\n");
+    policy(2);
+
+    printf(1,"Calling priority system call with correct args\n");
+    priority(0);
+
+    printf(1,"Calling policy system call\n");
+    policy(1);
+
+    printf(1,"Calling policy system call\n");
+    policy(1);
+
+    printf(1,"Calling priority system call with correct args\n");
+    priority(5);
+
+    printf(1,"Calling priority system call with wrong args\n");
+    priority(-20);
+
+    printf(1,"Calling policy system call\n");
+    policy(1);
+
+    printf(1,"Calling priority system call with wrong args\n");
+    priority(-1);
+
+    printf(1,"Calling policy system call\n");
+    policy(3);
+    
+    printf(1,"Calling priority system call with wrong args\n");
+    priority(11);
+
+    exit(0);
+}
diff --git a/Project_Test/XV6_Tests/prioritySysTest.c b/Project_Test/XV6_Tests/prioritySysTest.c
new file mode 100644
index 0000000..e5ded45
--- /dev/null
+++ b/Project_Test/XV6_Tests/prioritySysTest.c
@@ -0,0 +1,41 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+int main(int argc, char *argv[]){
+    
+    printf(1,"Calling priority system call with correct args\n");
+    priority(4);
+
+    printf(1,"Calling priority system call with correct args\n");
+    priority(1);
+
+    printf(1,"Calling priority system call with correct args\n");
+    priority(9);
+
+    printf(1,"Calling priority system call with correct args\n");
+    priority(10);
+
+    printf(1,"Calling priority system call with correct args\n");
+    priority(0);
+
+    printf(1,"Calling priority system call with correct args\n");
+    priority(5);
+
+    printf(1,"Calling priority system call with wrong args\n");
+    priority(-20);
+
+    printf(1,"Calling priority system call with wrong args\n");
+    priority(-1);
+
+    printf(1,"Calling priority system call with wrong args\n");
+    priority(11);
+
+    exit(0);
+}
diff --git a/Project_Test/XV6_Tests/quitXV6.c b/Project_Test/XV6_Tests/quitXV6.c
new file mode 100644
index 0000000..018f70f
--- /dev/null
+++ b/Project_Test/XV6_Tests/quitXV6.c
@@ -0,0 +1,14 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+int main(int argc, char *argv[]){
+    printf(1,"Finished Yehonatan Peleg Test, quiting...\n");
+    exit(0);
+}
diff --git a/Project_Test/XV6_Tests/schedulingTest1.c b/Project_Test/XV6_Tests/schedulingTest1.c
new file mode 100644
index 0000000..cdd97cc
--- /dev/null
+++ b/Project_Test/XV6_Tests/schedulingTest1.c
@@ -0,0 +1,161 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+#define DEBUG 0
+
+int executeForever(int timeToSleep,char* debugString);
+void executeTimes(int timeToSleep,int numberOfLoops,char* debugString);
+
+int main(int argc, char *argv[]){  
+    
+    printf(1,"Initiating scheduling test, test should take approximately 30000 time quantums !!!\n");
+    int childPid1;
+    int childPid2;
+    int childPid3;
+    int childPid4;
+    int childPid5;
+    int childPid6;
+    int childPid7;
+    int childPid8;
+    int childPid9;
+    int childPid10;
+    int childPid11;
+    int childPid12;
+    int childPid13;
+    int childPid14;
+    int childPid15;
+
+    childPid1 = executeForever(40,"childPid1");
+    childPid2 = executeForever(1,"childPid2");
+    childPid3 = executeForever(2,"childPid3");
+    childPid4 = executeForever(0,"childPid4");
+    childPid5 = executeForever(1000,"childPid5");
+    childPid6 = executeForever(10000,"childPid6");
+    childPid7 = executeForever(40,"childPid7");
+    childPid8 = executeForever(100,"childPid8");
+    childPid9 = executeForever(4,"childPid9");
+    childPid10 = executeForever(400,"childPid10");
+    childPid11 = executeForever(7,"childPid11");
+    childPid12 = executeForever(20000,"childPid12");
+    childPid13 = executeForever(4567,"childPid13");
+    childPid14 = executeForever(200,"childPid14");
+    childPid15 = executeForever(10,"childPid15");
+
+    executeTimes(400,50,"childPid16");
+    executeTimes(4,50,"childPid17");
+    executeTimes(100,100,"childPid18");
+    executeTimes(500,10,"childPid19");
+    executeTimes(1000,15,"childPid20");
+    executeTimes(2000,2,"childPid21");
+    executeTimes(40,22,"childPid22");
+    executeTimes(400,40,"childPid23");
+    executeTimes(4000,5,"childPid24");
+    executeTimes(10,5,"childPid25");
+    executeTimes(5,1,"childPid26");
+    executeTimes(300,30,"childPid27");
+    executeTimes(2000,5,"childPid28");
+    executeTimes(200,20,"childPid29");
+    executeTimes(100,70,"childPid30");
+    executeTimes(200,90,"childPid31");
+    executeTimes(1000,18,"childPid32");
+    executeTimes(20,400,"childPid33");
+    executeTimes(40,200,"childPid34");
+    executeTimes(90,150,"childPid35");
+    executeTimes(9,80,"childPid36");
+    executeTimes(1,140,"childPid37");
+    executeTimes(300,60,"childPid38");
+    executeTimes(90,50,"childPid39");
+    executeTimes(200,30,"childPid40");
+    executeTimes(40,5,"childPid41");
+    executeTimes(2000,2,"childPid42");
+
+    sleep(25000);
+
+    kill(childPid1);
+    kill(childPid2);
+    kill(childPid3);
+    kill(childPid4);
+    kill(childPid5);
+    kill(childPid6);
+    kill(childPid7);
+    kill(childPid8);
+    kill(childPid9);
+    kill(childPid10);
+    kill(childPid11);
+    kill(childPid12);
+    kill(childPid13);
+    kill(childPid14);
+    kill(childPid15);
+
+    sleep(2000);
+
+    exit(0);
+}
+
+int executeForever(int timeToSleep,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        while(1){
+            if(timeToSleep){
+                sleep(timeToSleep);        
+            }
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+        return pid;
+    }
+    else{
+        printf(1,"fork failed\n");
+        return 0;
+    }
+}
+
+void executeTimes(int timeToSleep,int numberOfLoops,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        sleep(1000);
+        for(int i = 0;i < numberOfLoops;i++){
+            sleep(timeToSleep);
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+}
diff --git a/Project_Test/XV6_Tests/schedulingTest10.c b/Project_Test/XV6_Tests/schedulingTest10.c
new file mode 100644
index 0000000..7fe259e
--- /dev/null
+++ b/Project_Test/XV6_Tests/schedulingTest10.c
@@ -0,0 +1,154 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+#define DEBUG 0
+
+int executeForever(int timeToSleep,char* debugString);
+int executeTimes(int timeToSleep,int numberOfLoops,int isDetach,char* debugString);
+
+int executePriority(int thePriority,long long times,char* debugString);
+
+int main(int argc, char *argv[]){  
+    policy(3);
+
+    printf(1,"Initiating scheduling test, test should take approximately 15000 time quantums !!!\n");
+    int childPid1;
+    int childPid2;
+    int childPid3;
+    int childPid4;
+    int childPid5;
+    int childPid6;
+    int childPid7;
+    int childPid8;
+    int childPid9;
+    int childPid10;
+    int childPid11;
+    int childPid12;
+    int childPid13;
+    int childPid14;
+    int childPid15;
+    
+    childPid1 = executeForever(0,"childPid1");
+    childPid2 = executeForever(0,"childPid2");
+    childPid3 = executeForever(0,"childPid3");
+    childPid4 = executeForever(0,"childPid4");
+    childPid5 = executeForever(1000,"childPid5");
+    childPid6 = executeForever(10000,"childPid6");
+    childPid7 = executeForever(0,"childPid7");
+    childPid8 = executeForever(0,"childPid8");
+    childPid9 = executeForever(0,"childPid9");
+    childPid10 = executeForever(0,"childPid10");
+    childPid11 = executeForever(0,"childPid11");
+    childPid12 = executeForever(20000,"childPid12");
+    childPid13 = executeForever(4567,"childPid13");
+    childPid14 = executeForever(0,"childPid14");
+    childPid15 = executeForever(0,"childPid15");
+
+
+    executeTimes(20,400,0,"childPid16");
+    executeTimes(10,600,0,"childPid17");
+    executeTimes(60,100,0,"childPid18");
+    executeTimes(1000,12,0,"childPid19");
+    executeTimes(200,10,0,"childPid20");
+    
+    wait(null);
+    wait(null);
+    wait(null);
+    wait(null);
+    wait(null);
+
+    kill(childPid1);
+    kill(childPid2);
+    kill(childPid3);
+    kill(childPid4);
+    kill(childPid5);
+    kill(childPid6);
+    kill(childPid7);
+    kill(childPid8);
+    kill(childPid9);
+    kill(childPid10);
+    kill(childPid11);
+    kill(childPid12);
+    kill(childPid13);
+    kill(childPid14);
+    kill(childPid15);
+
+    sleep(2000);
+
+    exit(0);
+}
+
+int executeForever(int timeToSleep,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        priority(0);
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        while(1){
+            if(timeToSleep){   
+                sleep(timeToSleep);   
+            }
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+        return pid;
+    }
+    else{
+        printf(1,"fork failed\n");
+        return 0;
+    }
+}
+
+int executeTimes(int timeToSleep,int numberOfLoops,int isDetach,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        priority(4);
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        sleep(1000);
+        for(int i = 0;i < numberOfLoops;i++){
+            sleep(timeToSleep);
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        if(isDetach){
+            detach(pid);        
+        }
+        return pid;
+    }
+    else{
+        printf(1,"fork failed\n");
+        return 0;
+    }
+}
\ No newline at end of file
diff --git a/Project_Test/XV6_Tests/schedulingTest11.c b/Project_Test/XV6_Tests/schedulingTest11.c
new file mode 100644
index 0000000..919bf2c
--- /dev/null
+++ b/Project_Test/XV6_Tests/schedulingTest11.c
@@ -0,0 +1,154 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+#define DEBUG 0
+
+int executeForever(int timeToSleep,char* debugString);
+int executeTimes(int timeToSleep,int numberOfLoops,int isDetach,char* debugString);
+
+int executePriority(int thePriority,long long times,char* debugString);
+
+int main(int argc, char *argv[]){  
+    policy(2);
+
+    printf(1,"Initiating scheduling test, test should take approximately 15000 time quantums !!!\n");
+    int childPid1;
+    int childPid2;
+    int childPid3;
+    int childPid4;
+    int childPid5;
+    int childPid6;
+    int childPid7;
+    int childPid8;
+    int childPid9;
+    int childPid10;
+    int childPid11;
+    int childPid12;
+    int childPid13;
+    int childPid14;
+    int childPid15;
+    
+    childPid1 = executeForever(0,"childPid1");
+    childPid2 = executeForever(0,"childPid2");
+    childPid3 = executeForever(0,"childPid3");
+    childPid4 = executeForever(0,"childPid4");
+    childPid5 = executeForever(1000,"childPid5");
+    childPid6 = executeForever(10000,"childPid6");
+    childPid7 = executeForever(0,"childPid7");
+    childPid8 = executeForever(0,"childPid8");
+    childPid9 = executeForever(0,"childPid9");
+    childPid10 = executeForever(0,"childPid10");
+    childPid11 = executeForever(0,"childPid11");
+    childPid12 = executeForever(20000,"childPid12");
+    childPid13 = executeForever(4567,"childPid13");
+    childPid14 = executeForever(0,"childPid14");
+    childPid15 = executeForever(0,"childPid15");
+
+    executeTimes(20,400,0,"childPid16");
+    executeTimes(10,600,0,"childPid17");
+    executeTimes(60,100,0,"childPid18");
+    executeTimes(1000,12,0,"childPid19");
+    executeTimes(200,10,0,"childPid20");
+ 
+    wait(null);
+    wait(null);
+    wait(null);
+    wait(null);
+    wait(null);
+
+    kill(childPid1);
+    kill(childPid2);
+    kill(childPid3);
+    kill(childPid4);
+    kill(childPid5);
+    kill(childPid6);
+    kill(childPid7);
+    kill(childPid8);
+    kill(childPid9);
+    kill(childPid10);
+    kill(childPid11);
+    kill(childPid12);
+    kill(childPid13);
+    kill(childPid14);
+    kill(childPid15);
+
+    sleep(2000);
+
+    exit(0);
+}
+
+
+int executeForever(int timeToSleep,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        priority(0);
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        while(1){
+            if(timeToSleep){   
+                sleep(timeToSleep);   
+            }
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+        return pid;
+    }
+    else{
+        printf(1,"fork failed\n");
+        return 0;
+    }
+}
+
+int executeTimes(int timeToSleep,int numberOfLoops,int isDetach,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        priority(4);
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        sleep(1000);
+        for(int i = 0;i < numberOfLoops;i++){
+            sleep(timeToSleep);
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        if(isDetach){
+            detach(pid);        
+        }
+        return pid;
+    }
+    else{
+        printf(1,"fork failed\n");
+        return 0;
+    }
+}
\ No newline at end of file
diff --git a/Project_Test/XV6_Tests/schedulingTest12.c b/Project_Test/XV6_Tests/schedulingTest12.c
new file mode 100644
index 0000000..78d8ef6
--- /dev/null
+++ b/Project_Test/XV6_Tests/schedulingTest12.c
@@ -0,0 +1,158 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+#define DEBUG 0
+
+int executeForever(int timeToSleep,char* debugString);
+int executeTimes(int timeToSleep,int numberOfLoops,int isDetach,char* debugString);
+
+int executePriority(int thePriority,long long times,char* debugString);
+
+int main(int argc, char *argv[]){  
+    policy(3);
+
+    printf(1,"Initiating scheduling test, test should take approximately 15000 time quantums !!!\n");
+    int childPid1;
+    int childPid2;
+    int childPid3;
+    int childPid4;
+    int childPid5;
+    int childPid6;
+    int childPid7;
+    int childPid8;
+    int childPid9;
+    int childPid10;
+    int childPid11;
+    int childPid12;
+    int childPid13;
+    int childPid14;
+    int childPid15;
+    
+    childPid1 = executeForever(0,"childPid1");
+    childPid2 = executeForever(0,"childPid2");
+    childPid3 = executeForever(0,"childPid3");
+    childPid4 = executeForever(0,"childPid4");
+    childPid5 = executeForever(1000,"childPid5");
+    childPid6 = executeForever(10000,"childPid6");
+    childPid7 = executeForever(0,"childPid7");
+    childPid8 = executeForever(0,"childPid8");
+    childPid9 = executeForever(0,"childPid9");
+    childPid10 = executeForever(0,"childPid10");
+    childPid11 = executeForever(0,"childPid11");
+    childPid12 = executeForever(20000,"childPid12");
+    childPid13 = executeForever(4567,"childPid13");
+    childPid14 = executeForever(0,"childPid14");
+    childPid15 = executeForever(0,"childPid15");
+
+    executeTimes(20,400,0,"childPid16");
+    executeTimes(10,600,0,"childPid17");
+    executeTimes(60,100,0,"childPid18");
+    executeTimes(1000,12,0,"childPid19");
+    executeTimes(200,10,0,"childPid20");
+    
+    sleep(2000);
+
+    policy(2);
+
+    wait(null);
+    wait(null);
+    wait(null);
+    wait(null);
+    wait(null);
+
+    kill(childPid1);
+    kill(childPid2);
+    kill(childPid3);
+    kill(childPid4);
+    kill(childPid5);
+    kill(childPid6);
+    kill(childPid7);
+    kill(childPid8);
+    kill(childPid9);
+    kill(childPid10);
+    kill(childPid11);
+    kill(childPid12);
+    kill(childPid13);
+    kill(childPid14);
+    kill(childPid15);
+
+    sleep(2000);
+
+    exit(0);
+}
+
+
+int executeForever(int timeToSleep,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        priority(0);
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        while(1){
+            if(timeToSleep){   
+                sleep(timeToSleep);   
+            }
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+        return pid;
+    }
+    else{
+        printf(1,"fork failed\n");
+        return 0;
+    }
+}
+
+int executeTimes(int timeToSleep,int numberOfLoops,int isDetach,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        priority(4);
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        sleep(1000);
+        for(int i = 0;i < numberOfLoops;i++){
+            sleep(timeToSleep);
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        if(isDetach){
+            detach(pid);        
+        }
+        return pid;
+    }
+    else{
+        printf(1,"fork failed\n");
+        return 0;
+    }
+}
\ No newline at end of file
diff --git a/Project_Test/XV6_Tests/schedulingTest13.c b/Project_Test/XV6_Tests/schedulingTest13.c
new file mode 100644
index 0000000..0e47125
--- /dev/null
+++ b/Project_Test/XV6_Tests/schedulingTest13.c
@@ -0,0 +1,390 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+#define DEBUG 0
+#define NUM_OF_CHILDS 7
+
+int executeForever(int timeToSleep,int isDetach,char* debugString);
+int executeTimes(int timeToSleep,int numberOfLoops,int isDetach,char* debugString);
+void retrieveNextChildPerf();
+int getChildNum(int pid);
+void print_perf(struct perf performance);
+void print_all_perfs();
+
+int executePriority(int thePriority,long long times,char* debugString);
+
+int numOfNotForeverChilds = 5;
+
+int childPids[NUM_OF_CHILDS];
+
+struct perf childPerfs[NUM_OF_CHILDS];
+
+struct perf perf_temp;
+
+int main(int argc, char *argv[]){  
+    policy(1);
+
+    printf(1,"Initiating scheduling test, test should take approximately 10000 time quantums !!!\n");
+    
+    childPids[0] = executeForever(0,0,"childPid0");
+    childPids[1] = executeForever(0,0,"childPid1");
+
+    childPids[2] = executeTimes(10,100,0,"childPid2");
+    childPids[3] = executeTimes(10,300,0,"childPid3");
+    childPids[4] = executeTimes(10,500,0,"childPid4");
+    childPids[5] = executeTimes(10,700,0,"childPid5");
+    childPids[6] = executeTimes(10,900,0,"childPid6");
+    
+     for(int i = 0;i < numOfNotForeverChilds;i++){
+         retrieveNextChildPerf();
+     }
+
+    kill(childPids[0]);
+    kill(childPids[1]);
+    
+   for(int i = 0;i < (NUM_OF_CHILDS - numOfNotForeverChilds);i++){
+         retrieveNextChildPerf();
+     }
+
+    if(childPerfs[1].ctime < childPerfs[0].ctime){
+        printf(1,"error in ctime test 1\n");
+    }
+    else{
+        printf(1,"ctime test 1 ok\n");
+    }
+
+    if(childPerfs[2].ctime < childPerfs[1].ctime){
+        printf(1,"error in ctime test 2\n");
+    }
+    else{
+        printf(1,"ctime test 2 ok\n");
+    }
+
+    if(childPerfs[3].ctime < childPerfs[2].ctime){
+        printf(1,"error in ctime test 3\n");
+    }
+    else{
+        printf(1,"ctime test 3 ok\n");
+    }
+
+    if(childPerfs[4].ctime < childPerfs[3].ctime){
+        printf(1,"error in ctime test 4\n");
+    }
+    else{
+        printf(1,"ctime test 4 ok\n");
+    }
+
+    if(childPerfs[6].ctime < childPerfs[5].ctime){
+        printf(1,"error in ctime test 5\n");
+    }
+    else{
+        printf(1,"ctime test 5 ok\n");
+    }
+
+    // ------------------------------------------------------------------------------------------------------------------------
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+    
+    // ------------------------------------------------------------------------------------------------------------------------
+
+    if(childPerfs[1].stime != childPerfs[0].stime){
+        printf(1,"error in stime test 1\n");
+    }
+    else{
+        printf(1,"stime test 1 ok\n");
+    }
+
+    if(childPerfs[2].stime < childPerfs[1].stime){
+        printf(1,"error in stime test 2\n");
+    }
+    else{
+        printf(1,"stime test 2 ok\n");
+    }
+
+    if(childPerfs[3].stime < childPerfs[2].stime){
+        printf(1,"error in stime test 3\n");
+    }
+    else{
+        printf(1,"stime test 3 ok\n");
+    }
+
+    if(childPerfs[4].stime < childPerfs[3].stime){
+        printf(1,"error in stime test 4\n");
+    }
+    else{
+        printf(1,"stime test 4 ok\n");
+    }
+
+    if(childPerfs[6].stime < childPerfs[5].stime){
+        printf(1,"error in stime test 5\n");
+    }
+    else{
+        printf(1,"stime test 5 ok\n");
+    }
+ 
+    // ------------------------------------------------------------------------------------------------------------------------
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+    
+    // ------------------------------------------------------------------------------------------------------------------------
+
+    if(childPerfs[0].rutime < childPerfs[2].rutime){
+        printf(1,"error in rutime test 1\n");
+    }
+    else{
+        printf(1,"rutime test 1 ok\n");
+    }
+
+    if(childPerfs[0].rutime < childPerfs[3].rutime){
+        printf(1,"error in rutime test 2\n");
+    }
+    else{
+        printf(1,"rutime test 2 ok\n");
+    }
+
+    if(childPerfs[0].rutime < childPerfs[4].rutime){
+        printf(1,"error in rutime test 3\n");
+    }
+    else{
+        printf(1,"rutime test 3 ok\n");
+    }
+
+    if(childPerfs[0].rutime < childPerfs[5].rutime){
+        printf(1,"error in rutime test 4\n");
+    }
+    else{
+        printf(1,"rutime test 4 ok\n");
+    }
+
+    if(childPerfs[0].rutime  < childPerfs[6].rutime){
+        printf(1,"error in rutime test 5\n");
+    }
+    else{
+        printf(1,"rutime test 5 ok\n");
+    }
+
+    // ------------------------------------------------------------------------------------------------------------------------
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+    
+    // ------------------------------------------------------------------------------------------------------------------------
+
+    if((childPerfs[0].rutime + childPerfs[0].retime + childPerfs[0].stime) > (childPerfs[0].ttime - childPerfs[0].ctime + 20)){
+        printf(1,"error in ttime test 1\n");
+    }
+    else{
+        printf(1,"ttime test 1 ok\n");
+    }
+
+    if((childPerfs[1].rutime + childPerfs[1].retime + childPerfs[1].stime) > (childPerfs[1].ttime - childPerfs[1].ctime + 20)){
+        printf(1,"error in ttime test 2\n");
+    }
+    else{
+        printf(1,"ttime test 2 ok\n");
+    }
+
+    if((childPerfs[2].rutime + childPerfs[2].retime + childPerfs[2].stime) > (childPerfs[2].ttime - childPerfs[2].ctime + 20)){
+        printf(1,"error in ttime test 3\n");
+    }
+    else{
+        printf(1,"ttime test 3 ok\n");
+    }
+
+    if((childPerfs[3].rutime + childPerfs[3].retime + childPerfs[3].stime) > (childPerfs[3].ttime - childPerfs[3].ctime + 20)){
+        printf(1,"error in ttime test 4\n");
+    }
+    else{
+        printf(1,"ttime test 4 ok\n");
+    }
+
+    if((childPerfs[4].rutime + childPerfs[4].retime + childPerfs[4].stime) > (childPerfs[4].ttime - childPerfs[4].ctime + 20)){
+        printf(1,"error in ttime test 5\n");
+    }
+    else{
+        printf(1,"ttime test 5 ok\n");
+    }
+    
+    if((childPerfs[5].rutime + childPerfs[5].retime + childPerfs[5].stime) > (childPerfs[5].ttime - childPerfs[5].ctime + 20)){
+        printf(1,"error in ttime test 6\n");
+    }
+    else{
+        printf(1,"ttime test 6 ok\n");
+    }
+
+    if((childPerfs[6].rutime + childPerfs[6].retime + childPerfs[6].stime) > (childPerfs[6].ttime - childPerfs[6].ctime + 20)){
+        printf(1,"error in ttime test 7\n");
+    }
+    else{
+        printf(1,"ttime test 7 ok\n");
+
+    }
+
+    exit(0);
+}
+
+
+int executeForever(int timeToSleep,int isDetach,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        while(1){
+            if(timeToSleep){   
+                sleep(timeToSleep);   
+            }
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        if(isDetach){
+            detach(pid);        
+        }
+        return pid;
+    }
+    else{
+        printf(1,"fork failed\n");
+        return 0;
+    }
+}
+
+int executeTimes(int timeToSleep,int numberOfLoops,int isDetach,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        priority(4);
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        sleep(1000);
+        for(int i = 0;i < numberOfLoops;i++){
+            sleep(timeToSleep);
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        if(isDetach){
+            detach(pid);        
+        }
+        return pid;
+    }
+    else{
+        printf(1,"fork failed\n");
+        return 0;
+    }
+}
+
+void retrieveNextChildPerf(){
+    int pid;
+    int childNum;
+
+    pid = wait_stat(null,&perf_temp);
+    childNum = getChildNum(pid);
+
+    if(childNum != -1){
+        childPerfs[childNum].ctime = perf_temp.ctime;
+        childPerfs[childNum].ttime = perf_temp.ttime;
+        childPerfs[childNum].stime = perf_temp.stime;
+        childPerfs[childNum].retime = perf_temp.retime;
+        childPerfs[childNum].rutime = perf_temp.rutime;
+    }
+    else{
+        printf(1,"couldn't find child num in retrieveNextChildPerf\n");
+    }
+}
+
+int getChildNum(int pid){
+
+    for(int i = 0;i < NUM_OF_CHILDS;i++){
+        if(childPids[i] == pid){
+            return i;
+        }
+    }
+
+    return -1;
+}
+
+void print_perf(struct perf performance){
+    printf(1,"----------------------------------------------------\n");
+    printf(1,"ctime = %d\n",performance.ctime);
+    printf(1,"ttime = %d\n",performance.ttime);
+    printf(1,"stime = %d\n",performance.stime);
+    printf(1,"retime = %d\n",performance.retime);
+    printf(1,"rutime = %d\n",performance.rutime);
+    printf(1,"----------------------------------------------------\n");
+}
+
+void print_all_perfs(){
+    for(int i = 0;i < NUM_OF_CHILDS;i++){
+        print_perf(childPerfs[i]);
+    }
+}
+
+
diff --git a/Project_Test/XV6_Tests/schedulingTest2.c b/Project_Test/XV6_Tests/schedulingTest2.c
new file mode 100644
index 0000000..7618961
--- /dev/null
+++ b/Project_Test/XV6_Tests/schedulingTest2.c
@@ -0,0 +1,163 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+#define DEBUG 0
+
+int executeForever(int timeToSleep,char* debugString);
+void executeTimes(int timeToSleep,int numberOfLoops,char* debugString);
+
+int main(int argc, char *argv[]){  
+    
+    policy(2);
+
+    printf(1,"Initiating scheduling test, test should take approximately 30000 time quantums !!!\n");
+    int childPid1;
+    int childPid2;
+    int childPid3;
+    int childPid4;
+    int childPid5;
+    int childPid6;
+    int childPid7;
+    int childPid8;
+    int childPid9;
+    int childPid10;
+    int childPid11;
+    int childPid12;
+    int childPid13;
+    int childPid14;
+    int childPid15;
+
+    childPid1 = executeForever(40,"childPid1");
+    childPid2 = executeForever(1,"childPid2");
+    childPid3 = executeForever(2,"childPid3");
+    childPid4 = executeForever(0,"childPid4");
+    childPid5 = executeForever(1000,"childPid5");
+    childPid6 = executeForever(10000,"childPid6");
+    childPid7 = executeForever(40,"childPid7");
+    childPid8 = executeForever(100,"childPid8");
+    childPid9 = executeForever(4,"childPid9");
+    childPid10 = executeForever(400,"childPid10");
+    childPid11 = executeForever(7,"childPid11");
+    childPid12 = executeForever(20000,"childPid12");
+    childPid13 = executeForever(4567,"childPid13");
+    childPid14 = executeForever(200,"childPid14");
+    childPid15 = executeForever(10,"childPid15");
+
+    executeTimes(400,50,"childPid16");
+    executeTimes(4,50,"childPid17");
+    executeTimes(100,100,"childPid18");
+    executeTimes(500,10,"childPid19");
+    executeTimes(1000,15,"childPid20");
+    executeTimes(2000,2,"childPid21");
+    executeTimes(40,22,"childPid22");
+    executeTimes(400,40,"childPid23");
+    executeTimes(4000,5,"childPid24");
+    executeTimes(10,5,"childPid25");
+    executeTimes(5,1,"childPid26");
+    executeTimes(300,30,"childPid27");
+    executeTimes(2000,5,"childPid28");
+    executeTimes(200,20,"childPid29");
+    executeTimes(100,70,"childPid30");
+    executeTimes(200,90,"childPid31");
+    executeTimes(1000,18,"childPid32");
+    executeTimes(20,400,"childPid33");
+    executeTimes(40,200,"childPid34");
+    executeTimes(90,150,"childPid35");
+    executeTimes(9,80,"childPid36");
+    executeTimes(1,140,"childPid37");
+    executeTimes(300,60,"childPid38");
+    executeTimes(90,50,"childPid39");
+    executeTimes(200,30,"childPid40");
+    executeTimes(40,5,"childPid41");
+    executeTimes(2000,2,"childPid42");
+
+    sleep(25000);
+
+    kill(childPid1);
+    kill(childPid2);
+    kill(childPid3);
+    kill(childPid4);
+    kill(childPid5);
+    kill(childPid6);
+    kill(childPid7);
+    kill(childPid8);
+    kill(childPid9);
+    kill(childPid10);
+    kill(childPid11);
+    kill(childPid12);
+    kill(childPid13);
+    kill(childPid14);
+    kill(childPid15);
+
+    sleep(2000);
+
+    exit(0);
+}
+
+int executeForever(int timeToSleep,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        while(1){
+            if(timeToSleep){
+                sleep(timeToSleep);        
+            }
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+        return pid;
+    }
+    else{
+        printf(1,"fork failed\n");
+        return 0;
+    }
+}
+
+void executeTimes(int timeToSleep,int numberOfLoops,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        sleep(1000);
+        for(int i = 0;i < numberOfLoops;i++){
+            sleep(timeToSleep);
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+}
diff --git a/Project_Test/XV6_Tests/schedulingTest3.c b/Project_Test/XV6_Tests/schedulingTest3.c
new file mode 100644
index 0000000..8528aff
--- /dev/null
+++ b/Project_Test/XV6_Tests/schedulingTest3.c
@@ -0,0 +1,163 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+#define DEBUG 0
+
+int executeForever(int timeToSleep,char* debugString);
+void executeTimes(int timeToSleep,int numberOfLoops,char* debugString);
+
+int main(int argc, char *argv[]){  
+    
+    policy(3);
+
+    printf(1,"Initiating scheduling test, test should take approximately 30000 time quantums !!!\n");
+    int childPid1;
+    int childPid2;
+    int childPid3;
+    int childPid4;
+    int childPid5;
+    int childPid6;
+    int childPid7;
+    int childPid8;
+    int childPid9;
+    int childPid10;
+    int childPid11;
+    int childPid12;
+    int childPid13;
+    int childPid14;
+    int childPid15;
+
+    childPid1 = executeForever(40,"childPid1");
+    childPid2 = executeForever(1,"childPid2");
+    childPid3 = executeForever(2,"childPid3");
+    childPid4 = executeForever(0,"childPid4");
+    childPid5 = executeForever(1000,"childPid5");
+    childPid6 = executeForever(10000,"childPid6");
+    childPid7 = executeForever(40,"childPid7");
+    childPid8 = executeForever(100,"childPid8");
+    childPid9 = executeForever(4,"childPid9");
+    childPid10 = executeForever(400,"childPid10");
+    childPid11 = executeForever(7,"childPid11");
+    childPid12 = executeForever(20000,"childPid12");
+    childPid13 = executeForever(4567,"childPid13");
+    childPid14 = executeForever(200,"childPid14");
+    childPid15 = executeForever(10,"childPid15");
+
+    executeTimes(400,50,"childPid16");
+    executeTimes(4,50,"childPid17");
+    executeTimes(100,100,"childPid18");
+    executeTimes(500,10,"childPid19");
+    executeTimes(1000,15,"childPid20");
+    executeTimes(2000,2,"childPid21");
+    executeTimes(40,22,"childPid22");
+    executeTimes(400,40,"childPid23");
+    executeTimes(4000,5,"childPid24");
+    executeTimes(10,5,"childPid25");
+    executeTimes(5,1,"childPid26");
+    executeTimes(300,30,"childPid27");
+    executeTimes(2000,5,"childPid28");
+    executeTimes(200,20,"childPid29");
+    executeTimes(100,70,"childPid30");
+    executeTimes(200,90,"childPid31");
+    executeTimes(1000,18,"childPid32");
+    executeTimes(20,400,"childPid33");
+    executeTimes(40,200,"childPid34");
+    executeTimes(90,150,"childPid35");
+    executeTimes(9,80,"childPid36");
+    executeTimes(1,140,"childPid37");
+    executeTimes(300,60,"childPid38");
+    executeTimes(90,50,"childPid39");
+    executeTimes(200,30,"childPid40");
+    executeTimes(40,5,"childPid41");
+    executeTimes(2000,2,"childPid42");
+
+    sleep(25000);
+
+    kill(childPid1);
+    kill(childPid2);
+    kill(childPid3);
+    kill(childPid4);
+    kill(childPid5);
+    kill(childPid6);
+    kill(childPid7);
+    kill(childPid8);
+    kill(childPid9);
+    kill(childPid10);
+    kill(childPid11);
+    kill(childPid12);
+    kill(childPid13);
+    kill(childPid14);
+    kill(childPid15);
+
+    sleep(2000);
+
+    exit(0);
+}
+
+int executeForever(int timeToSleep,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        while(1){
+            if(timeToSleep){
+                sleep(timeToSleep);        
+            }
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+        return pid;
+    }
+    else{
+        printf(1,"fork failed\n");
+        return 0;
+    }
+}
+
+void executeTimes(int timeToSleep,int numberOfLoops,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        sleep(1000);
+        for(int i = 0;i < numberOfLoops;i++){
+            sleep(timeToSleep);
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+}
diff --git a/Project_Test/XV6_Tests/schedulingTest4.c b/Project_Test/XV6_Tests/schedulingTest4.c
new file mode 100644
index 0000000..45aee40
--- /dev/null
+++ b/Project_Test/XV6_Tests/schedulingTest4.c
@@ -0,0 +1,302 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+#define DEBUG 0
+
+long long j;
+
+int executeForever(int timeToSleep,char* debugString);
+void executeTimes(int timeToSleep,int numberOfLoops,char* debugString);
+void executeTimesExhaust(long long numberOfLoops,char* debugString);
+void executeTestMonitor(int timeBetweenLoop,int numberOfLoops,char* debugString);
+
+int main(int argc, char *argv[]){  
+    
+    printf(1,"Initiating scheduling test, test should take approximately 30000 time quantums !!!\n");
+    int childPid1;
+    int childPid2;
+    int childPid3;
+    int childPid4;
+    int childPid5;
+    int childPid6;
+    int childPid7;
+    int childPid8;
+    int childPid9;
+    int childPid10;
+    int childPid11;
+    int childPid12;
+    int childPid13;
+    int childPid14;
+    int childPid15;
+    
+    executeTestMonitor(5000,5,"TestMonitor");
+
+    childPid1 = executeForever(0,"childPid1");
+    childPid2 = executeForever(0,"childPid2");
+    childPid3 = executeForever(0,"childPid3");
+    childPid4 = executeForever(0,"childPid4");
+    childPid5 = executeForever(1000,"childPid5");
+    childPid6 = executeForever(10000,"childPid6");
+    childPid7 = executeForever(0,"childPid7");
+    childPid8 = executeForever(0,"childPid8");
+    childPid9 = executeForever(0,"childPid9");
+    childPid10 = executeForever(0,"childPid10");
+    childPid11 = executeForever(0,"childPid11");
+    childPid12 = executeForever(20000,"childPid12");
+    childPid13 = executeForever(4567,"childPid13");
+    childPid14 = executeForever(0,"childPid14");
+    childPid15 = executeForever(0,"childPid15");
+
+    executeTimes(400,50,"childPid16");
+    executeTimes(4,50,"childPid17");
+    executeTimes(100,100,"childPid18");
+    executeTimes(500,10,"childPid19");
+    executeTimes(1000,15,"childPid20");
+    executeTimes(2000,2,"childPid21");
+    executeTimes(40,22,"childPid22");
+    executeTimes(400,40,"childPid23");
+    executeTimes(4000,5,"childPid24");
+    executeTimes(10,5,"childPid25");
+    executeTimes(5,1,"childPid26");
+    executeTimes(300,30,"childPid27");
+    executeTimes(2000,5,"childPid28");
+    executeTimes(200,20,"childPid29");
+    executeTimes(100,70,"childPid30");
+    executeTimes(200,90,"childPid31");
+    executeTimes(1000,18,"childPid32");
+    executeTimes(20,400,"childPid33");
+    executeTimes(40,200,"childPid34");
+    executeTimes(90,150,"childPid35");
+    executeTimes(9,80,"childPid36");
+    executeTimes(1,140,"childPid37");
+    executeTimes(300,60,"childPid38");
+    executeTimes(90,50,"childPid39");
+    executeTimes(200,30,"childPid40");
+    executeTimes(40,5,"childPid41");
+    executeTimes(2000,2,"childPid42");
+    
+    
+    executeTimesExhaust(999999999999999999,"childPid43");
+    executeTimesExhaust(999999999999999999,"childPid44");
+    executeTimesExhaust(999999999999999999,"childPid45");
+    executeTimesExhaust(999999999999999999,"childPid46");
+    executeTimesExhaust(999999999999999999,"childPid47");
+    executeTimesExhaust(999999999999999999,"childPid48");
+    executeTimesExhaust(999999999999999999,"childPid49");
+    executeTimesExhaust(999999999999999999,"childPid50");
+    executeTimesExhaust(999999999999999999,"childPid51");
+    executeTimesExhaust(999999999999999999,"childPid52");
+    executeTimesExhaust(999999999999999999,"childPid53");
+    executeTimesExhaust(999999999999999999,"childPid54");
+    executeTimesExhaust(999999999999999999,"childPid55");
+    executeTimesExhaust(999999999999999999,"childPid56");
+    executeTimesExhaust(999999999999999999,"childPid57");
+    executeTimesExhaust(999999999999999999,"childPid58");
+    executeTimesExhaust(999999999999999999,"childPid59");
+    executeTimesExhaust(999999999999999999,"childPid60");
+
+    sleep(25000);
+
+    kill(childPid1);
+    kill(childPid2);
+    kill(childPid3);
+    kill(childPid4);
+    kill(childPid5);
+    kill(childPid6);
+    kill(childPid7);
+    kill(childPid8);
+    kill(childPid9);
+    kill(childPid10);
+    kill(childPid11);
+    kill(childPid12);
+    kill(childPid13);
+    kill(childPid14);
+    kill(childPid15);
+
+    sleep(5000);
+
+    exit(0);
+}
+
+int executeForever(int timeToSleep,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        while(1){
+            if(timeToSleep){ 
+                sleep(timeToSleep);    
+            }
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+        return pid;
+    }
+    else{
+        printf(1,"fork failed\n");
+        return 0;
+    }
+}
+
+void executeTimes(int timeToSleep,int numberOfLoops,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        sleep(1000);
+        for(int i = 0;i < numberOfLoops;i++){
+            sleep(timeToSleep);
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+}
+
+void executeTimesExhaust(long long times,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        for(int i = 0;i < times;i++){
+            for(int i = 0;i < times;i++){
+                for(int i = 0;i < times;i++){
+                    for(int i = 0;i < times;i++){
+                        for(int i = 0;i < times;i++){
+                            for(int i = 0;i < times;i++){
+                                for(int i = 0;i < times;i++){
+                                    for(int i = 0;i < times;i++){
+                                        for(int i = 0;i < times;i++){
+                                            for(int i = 0;i < times;i++){
+                                                for(int i = 0;i < times;i++){
+                                                   for(int i = 0;i < times;i++){
+                                                        for(int i = 0;i < times;i++){
+            for(int i = 0;i < times;i++){
+                for(int i = 0;i < times;i++){
+                    for(int i = 0;i < times;i++){
+                        for(int i = 0;i < times;i++){
+                            for(int i = 0;i < times;i++){
+                                for(int i = 0;i < times;i++){
+                                    for(int i = 0;i < times;i++){
+                                        for(int i = 0;i < times;i++){
+                                            for(int i = 0;i < times;i++){
+                                                for(int i = 0;i < times;i++){
+                                                   for(int i = 0;i < times;i++){
+                                                    long long g = 555555555555555555;
+                                                  long long f = 222222222222222222;
+                                                  j = g*f;     
+                            }
+                        }
+                    }
+                }
+            }
+        }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+}
+
+void executeTestMonitor(int timeBetweenLoop,int numberOfLoops,char* debugString){
+    int pid;
+    int changePolicy = 1;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        policy(changePolicy);
+        sleep(1000);
+        for(int i = 0;i < numberOfLoops;i++){
+            sleep(timeBetweenLoop);
+
+            if(changePolicy == 3){
+                changePolicy = 1;
+            }
+            else{
+                changePolicy++;
+            }
+
+            policy(changePolicy);
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+}
diff --git a/Project_Test/XV6_Tests/schedulingTest5.c b/Project_Test/XV6_Tests/schedulingTest5.c
new file mode 100644
index 0000000..78f3593
--- /dev/null
+++ b/Project_Test/XV6_Tests/schedulingTest5.c
@@ -0,0 +1,301 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+#define DEBUG 0
+
+long long j;
+
+int executeForever(int timeToSleep,char* debugString);
+void executeTimes(int timeToSleep,int numberOfLoops,char* debugString);
+void executeTimesExhaust(long long numberOfLoops,char* debugString);
+void executeTestMonitor(int timeBetweenLoop,int numberOfLoops,char* debugString);
+
+int main(int argc, char *argv[]){  
+    
+    printf(1,"Initiating scheduling test, test should take approximately 30000 time quantums !!!\n");
+    int childPid1;
+    int childPid2;
+    int childPid3;
+    int childPid4;
+    int childPid5;
+    int childPid6;
+    int childPid7;
+    int childPid8;
+    int childPid9;
+    int childPid10;
+    int childPid11;
+    int childPid12;
+    int childPid13;
+    int childPid14;
+    int childPid15;
+    
+    executeTestMonitor(1000,25,"TestMonitor");
+
+    childPid1 = executeForever(0,"childPid1");
+    childPid2 = executeForever(0,"childPid2");
+    childPid3 = executeForever(0,"childPid3");
+    childPid4 = executeForever(0,"childPid4");
+    childPid5 = executeForever(1000,"childPid5");
+    childPid6 = executeForever(10000,"childPid6");
+    childPid7 = executeForever(0,"childPid7");
+    childPid8 = executeForever(0,"childPid8");
+    childPid9 = executeForever(0,"childPid9");
+    childPid10 = executeForever(0,"childPid10");
+    childPid11 = executeForever(0,"childPid11");
+    childPid12 = executeForever(20000,"childPid12");
+    childPid13 = executeForever(4567,"childPid13");
+    childPid14 = executeForever(0,"childPid14");
+    childPid15 = executeForever(0,"childPid15");
+
+    executeTimes(400,50,"childPid16");
+    executeTimes(4,50,"childPid17");
+    executeTimes(100,100,"childPid18");
+    executeTimes(500,10,"childPid19");
+    executeTimes(1000,15,"childPid20");
+    executeTimes(2000,2,"childPid21");
+    executeTimes(40,22,"childPid22");
+    executeTimes(400,40,"childPid23");
+    executeTimes(4000,5,"childPid24");
+    executeTimes(10,5,"childPid25");
+    executeTimes(5,1,"childPid26");
+    executeTimes(300,30,"childPid27");
+    executeTimes(2000,5,"childPid28");
+    executeTimes(200,20,"childPid29");
+    executeTimes(100,70,"childPid30");
+    executeTimes(200,90,"childPid31");
+    executeTimes(1000,18,"childPid32");
+    executeTimes(20,400,"childPid33");
+    executeTimes(40,200,"childPid34");
+    executeTimes(90,150,"childPid35");
+    executeTimes(9,80,"childPid36");
+    executeTimes(1,140,"childPid37");
+    executeTimes(300,60,"childPid38");
+    executeTimes(90,50,"childPid39");
+    executeTimes(200,30,"childPid40");
+    executeTimes(40,5,"childPid41");
+    executeTimes(2000,2,"childPid42");
+
+    executeTimesExhaust(999999999999999999,"childPid43");
+    executeTimesExhaust(999999999999999999,"childPid44");
+    executeTimesExhaust(999999999999999999,"childPid45");
+    executeTimesExhaust(999999999999999999,"childPid46");
+    executeTimesExhaust(999999999999999999,"childPid47");
+    executeTimesExhaust(999999999999999999,"childPid48");
+    executeTimesExhaust(999999999999999999,"childPid49");
+    executeTimesExhaust(999999999999999999,"childPid50");
+    executeTimesExhaust(999999999999999999,"childPid51");
+    executeTimesExhaust(999999999999999999,"childPid52");
+    executeTimesExhaust(999999999999999999,"childPid53");
+    executeTimesExhaust(999999999999999999,"childPid54");
+    executeTimesExhaust(999999999999999999,"childPid55");
+    executeTimesExhaust(999999999999999999,"childPid56");
+    executeTimesExhaust(999999999999999999,"childPid57");
+    executeTimesExhaust(999999999999999999,"childPid58");
+    executeTimesExhaust(999999999999999999,"childPid59");
+    executeTimesExhaust(999999999999999999,"childPid60");
+
+    sleep(25000);
+
+    kill(childPid1);
+    kill(childPid2);
+    kill(childPid3);
+    kill(childPid4);
+    kill(childPid5);
+    kill(childPid6);
+    kill(childPid7);
+    kill(childPid8);
+    kill(childPid9);
+    kill(childPid10);
+    kill(childPid11);
+    kill(childPid12);
+    kill(childPid13);
+    kill(childPid14);
+    kill(childPid15);
+
+    sleep(5000);
+
+    exit(0);
+}
+
+int executeForever(int timeToSleep,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        while(1){
+            if(timeToSleep){   
+                sleep(timeToSleep); 
+            }
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+        return pid;
+    }
+    else{
+        printf(1,"fork failed\n");
+        return 0;
+    }
+}
+
+void executeTimes(int timeToSleep,int numberOfLoops,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        sleep(1000);
+        for(int i = 0;i < numberOfLoops;i++){
+            sleep(timeToSleep);
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+}
+
+void executeTimesExhaust(long long times,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        for(int i = 0;i < times;i++){
+            for(int i = 0;i < times;i++){
+                for(int i = 0;i < times;i++){
+                    for(int i = 0;i < times;i++){
+                        for(int i = 0;i < times;i++){
+                            for(int i = 0;i < times;i++){
+                                for(int i = 0;i < times;i++){
+                                    for(int i = 0;i < times;i++){
+                                        for(int i = 0;i < times;i++){
+                                            for(int i = 0;i < times;i++){
+                                                for(int i = 0;i < times;i++){
+                                                   for(int i = 0;i < times;i++){
+                                                        for(int i = 0;i < times;i++){
+            for(int i = 0;i < times;i++){
+                for(int i = 0;i < times;i++){
+                    for(int i = 0;i < times;i++){
+                        for(int i = 0;i < times;i++){
+                            for(int i = 0;i < times;i++){
+                                for(int i = 0;i < times;i++){
+                                    for(int i = 0;i < times;i++){
+                                        for(int i = 0;i < times;i++){
+                                            for(int i = 0;i < times;i++){
+                                                for(int i = 0;i < times;i++){
+                                                   for(int i = 0;i < times;i++){
+                                                        long long g = 555555555555555555;
+                                                  long long f = 222222222222222222;
+                                                  j =  g*f;
+                            }
+                        }
+                    }
+                }
+            }
+        }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+}
+
+void executeTestMonitor(int timeBetweenLoop,int numberOfLoops,char* debugString){
+    int pid;
+    int changePolicy = 1;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        policy(changePolicy);
+        sleep(1000);
+        for(int i = 0;i < numberOfLoops;i++){
+            sleep(timeBetweenLoop);
+
+            if(changePolicy == 3){
+                changePolicy = 1;
+            }
+            else{
+                changePolicy++;
+            }
+
+            policy(changePolicy);
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+}
diff --git a/Project_Test/XV6_Tests/schedulingTest6.c b/Project_Test/XV6_Tests/schedulingTest6.c
new file mode 100644
index 0000000..fbb2bdb
--- /dev/null
+++ b/Project_Test/XV6_Tests/schedulingTest6.c
@@ -0,0 +1,300 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+#define DEBUG 0
+
+long long j;
+int executeForever(int timeToSleep,char* debugString);
+void executeTimes(int timeToSleep,int numberOfLoops,char* debugString);
+void executeTimesExhaust(long long numberOfLoops,char* debugString);
+void executeTestMonitor(int timeBetweenLoop,int numberOfLoops,char* debugString);
+
+int main(int argc, char *argv[]){  
+
+    printf(1,"Initiating scheduling test, test should take approximately 30000 time quantums !!!\n");
+    int childPid1;
+    int childPid2;
+    int childPid3;
+    int childPid4;
+    int childPid5;
+    int childPid6;
+    int childPid7;
+    int childPid8;
+    int childPid9;
+    int childPid10;
+    int childPid11;
+    int childPid12;
+    int childPid13;
+    int childPid14;
+    int childPid15;
+    
+    executeTestMonitor(500,50,"TestMonitor");
+
+    childPid1 = executeForever(0,"childPid1");
+    childPid2 = executeForever(0,"childPid2");
+    childPid3 = executeForever(0,"childPid3");
+    childPid4 = executeForever(0,"childPid4");
+    childPid5 = executeForever(1000,"childPid5");
+    childPid6 = executeForever(10000,"childPid6");
+    childPid7 = executeForever(0,"childPid7");
+    childPid8 = executeForever(0,"childPid8");
+    childPid9 = executeForever(0,"childPid9");
+    childPid10 = executeForever(0,"childPid10");
+    childPid11 = executeForever(0,"childPid11");
+    childPid12 = executeForever(20000,"childPid12");
+    childPid13 = executeForever(4567,"childPid13");
+    childPid14 = executeForever(0,"childPid14");
+    childPid15 = executeForever(0,"childPid15");
+
+    executeTimes(400,50,"childPid16");
+    executeTimes(4,50,"childPid17");
+    executeTimes(100,100,"childPid18");
+    executeTimes(500,10,"childPid19");
+    executeTimes(1000,15,"childPid20");
+    executeTimes(2000,2,"childPid21");
+    executeTimes(40,22,"childPid22");
+    executeTimes(400,40,"childPid23");
+    executeTimes(4000,5,"childPid24");
+    executeTimes(10,5,"childPid25");
+    executeTimes(5,1,"childPid26");
+    executeTimes(300,30,"childPid27");
+    executeTimes(2000,5,"childPid28");
+    executeTimes(200,20,"childPid29");
+    executeTimes(100,70,"childPid30");
+    executeTimes(200,90,"childPid31");
+    executeTimes(1000,18,"childPid32");
+    executeTimes(20,400,"childPid33");
+    executeTimes(40,200,"childPid34");
+    executeTimes(90,150,"childPid35");
+    executeTimes(9,80,"childPid36");
+    executeTimes(1,140,"childPid37");
+    executeTimes(300,60,"childPid38");
+    executeTimes(90,50,"childPid39");
+    executeTimes(200,30,"childPid40");
+    executeTimes(40,5,"childPid41");
+    executeTimes(2000,2,"childPid42");
+
+    executeTimesExhaust(999999999999999999,"childPid43");
+    executeTimesExhaust(999999999999999999,"childPid44");
+    executeTimesExhaust(999999999999999999,"childPid45");
+    executeTimesExhaust(999999999999999999,"childPid46");
+    executeTimesExhaust(999999999999999999,"childPid47");
+    executeTimesExhaust(999999999999999999,"childPid48");
+    executeTimesExhaust(999999999999999999,"childPid49");
+    executeTimesExhaust(999999999999999999,"childPid50");
+    executeTimesExhaust(999999999999999999,"childPid51");
+    executeTimesExhaust(999999999999999999,"childPid52");
+    executeTimesExhaust(999999999999999999,"childPid53");
+    executeTimesExhaust(999999999999999999,"childPid54");
+    executeTimesExhaust(999999999999999999,"childPid55");
+    executeTimesExhaust(999999999999999999,"childPid56");
+    executeTimesExhaust(999999999999999999,"childPid57");
+    executeTimesExhaust(999999999999999999,"childPid58");
+    executeTimesExhaust(999999999999999999,"childPid59");
+    executeTimesExhaust(999999999999999999,"childPid60");
+
+    sleep(25000);
+
+    kill(childPid1);
+    kill(childPid2);
+    kill(childPid3);
+    kill(childPid4);
+    kill(childPid5);
+    kill(childPid6);
+    kill(childPid7);
+    kill(childPid8);
+    kill(childPid9);
+    kill(childPid10);
+    kill(childPid11);
+    kill(childPid12);
+    kill(childPid13);
+    kill(childPid14);
+    kill(childPid15);
+
+    sleep(5000);
+
+    exit(0);
+}
+
+int executeForever(int timeToSleep,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        while(1){
+            if(timeToSleep){   
+                sleep(timeToSleep); 
+            }
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+        return pid;
+    }
+    else{
+        printf(1,"fork failed\n");
+        return 0;
+    }
+}
+
+void executeTimes(int timeToSleep,int numberOfLoops,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        sleep(1000);
+        for(int i = 0;i < numberOfLoops;i++){
+            sleep(timeToSleep);
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+}
+
+void executeTimesExhaust(long long times,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        for(int i = 0;i < times;i++){
+            for(int i = 0;i < times;i++){
+                for(int i = 0;i < times;i++){
+                    for(int i = 0;i < times;i++){
+                        for(int i = 0;i < times;i++){
+                            for(int i = 0;i < times;i++){
+                                for(int i = 0;i < times;i++){
+                                    for(int i = 0;i < times;i++){
+                                        for(int i = 0;i < times;i++){
+                                            for(int i = 0;i < times;i++){
+                                                for(int i = 0;i < times;i++){
+                                                   for(int i = 0;i < times;i++){
+                                                        for(int i = 0;i < times;i++){
+            for(int i = 0;i < times;i++){
+                for(int i = 0;i < times;i++){
+                    for(int i = 0;i < times;i++){
+                        for(int i = 0;i < times;i++){
+                            for(int i = 0;i < times;i++){
+                                for(int i = 0;i < times;i++){
+                                    for(int i = 0;i < times;i++){
+                                        for(int i = 0;i < times;i++){
+                                            for(int i = 0;i < times;i++){
+                                                for(int i = 0;i < times;i++){
+                                                   for(int i = 0;i < times;i++){
+                                                  long long g = 555555555555555555;
+                                                  long long f = 222222222222222222;
+                                                  j =  g*f;
+                            }
+                        }
+                    }
+                }
+            }
+        }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+}
+
+void executeTestMonitor(int timeBetweenLoop,int numberOfLoops,char* debugString){
+    int pid;
+    int changePolicy = 1;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        policy(changePolicy);
+        sleep(1000);
+        for(int i = 0;i < numberOfLoops;i++){
+            sleep(timeBetweenLoop);
+
+            if(changePolicy == 3){
+                changePolicy = 1;
+            }
+            else{
+                changePolicy++;
+            }
+
+            policy(changePolicy);
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        exit(0);
+    }
+    else if(pid > 0){
+        detach(pid);
+    }
+    else{
+        printf(1,"fork failed\n");
+    }
+}
diff --git a/Project_Test/XV6_Tests/schedulingTest7.c b/Project_Test/XV6_Tests/schedulingTest7.c
new file mode 100644
index 0000000..25e95bc
--- /dev/null
+++ b/Project_Test/XV6_Tests/schedulingTest7.c
@@ -0,0 +1,71 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+#define DEBUG 0
+
+char* j;
+
+int executePriority(int thePriority,long long times,char* debugString);
+
+int main(int argc, char *argv[]){  
+    int numberOfEexecutes = 10;
+
+    policy(2);
+
+    for(int i = 0;i < numberOfEexecutes;i++){
+        executePriority(1,999999,"Priority One\n");
+    }
+
+    for(int i = 0;i < numberOfEexecutes;i++){
+        executePriority(9,999999,"Priority Two\n");
+    }
+
+    for(int i = 0;i < numberOfEexecutes * 2;i++){
+        wait(null);
+    }
+
+    printf(1,"\n");
+
+    exit(0);
+}
+
+int executePriority(int thePriority,long long times,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        priority(thePriority);
+        for(long long i = 0;i < times;i++){
+            j = malloc(sizeof(char) * 100);
+            free(j);
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        printf(1,"%d",thePriority);
+
+        exit(0);
+    }
+    else if(pid > 0){
+        return pid;
+    }
+    else{
+        printf(1,"fork failed\n");
+        return 0;
+    }
+}
+
diff --git a/Project_Test/XV6_Tests/schedulingTest8.c b/Project_Test/XV6_Tests/schedulingTest8.c
new file mode 100644
index 0000000..a6d7863
--- /dev/null
+++ b/Project_Test/XV6_Tests/schedulingTest8.c
@@ -0,0 +1,71 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+#define DEBUG 0
+
+char* j;
+
+int executePriority(int thePriority,long long times,char* debugString);
+
+int main(int argc, char *argv[]){  
+    int numberOfEexecutes = 10;
+
+    policy(3);
+
+    for(int i = 0;i < numberOfEexecutes;i++){
+        executePriority(1,999999,"Priority One\n");
+    }
+
+    for(int i = 0;i < numberOfEexecutes;i++){
+        executePriority(9,999999,"Priority Two\n");
+    }
+
+    for(int i = 0;i < numberOfEexecutes * 2;i++){
+        wait(null);
+    }
+
+    printf(1,"\n");
+
+    exit(0);
+}
+
+int executePriority(int thePriority,long long times,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        priority(thePriority);
+        for(int i = 0;i < times;i++){
+            j = malloc(sizeof(char) * 100);
+            free(j);
+        }
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        printf(1,"%d",thePriority);
+
+        exit(0);
+    }
+    else if(pid > 0){
+        return pid;
+    }
+    else{
+        printf(1,"fork failed\n");
+        return 0;
+    }
+}
+
diff --git a/Project_Test/XV6_Tests/schedulingTest9.c b/Project_Test/XV6_Tests/schedulingTest9.c
new file mode 100644
index 0000000..f41eb7c
--- /dev/null
+++ b/Project_Test/XV6_Tests/schedulingTest9.c
@@ -0,0 +1,73 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+#define DEBUG 0
+char* j;
+
+int executePriority(int thePriority,long long times,char* debugString);
+
+int main(int argc, char *argv[]){  
+    int numberOfEexecutes = 10;
+
+    policy(3);
+
+    for(int i = 0;i < numberOfEexecutes;i++){
+        executePriority(0,999999,"Priority One\n");
+    }
+
+    for(int i = 0;i < numberOfEexecutes;i++){
+        executePriority(9,999999,"Priority Two\n");
+    }
+
+    for(int i = 0;i < numberOfEexecutes * 2;i++){
+        wait(null);
+    }
+
+    printf(1,"\n");
+
+    exit(0);
+}
+
+int executePriority(int thePriority,long long times,char* debugString){
+    int pid;
+
+    if((pid = fork()) == 0){
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," starting...\n");
+        }
+
+        priority(thePriority);
+        for(int i = 0;i < times;i++){
+            j = malloc(sizeof(char) * 100);
+            free(j);
+        }
+        
+
+        if(DEBUG){
+            printf(1,debugString);
+            printf(1," ending...\n");
+        }
+
+        printf(1,"%d",thePriority);
+
+        exit(0);
+    }
+    else if(pid > 0){
+        return pid;
+    }
+    else{
+        printf(1,"fork failed\n");
+        return 0;
+    }
+}
+
+
+
diff --git a/Project_Test/XV6_Tests/usertests.c b/Project_Test/XV6_Tests/usertests.c
new file mode 100644
index 0000000..7633a1f
--- /dev/null
+++ b/Project_Test/XV6_Tests/usertests.c
@@ -0,0 +1,1803 @@
+#include "../../param.h"
+#include "../../types.h"
+#include "../../stat.h"
+#include "../../user.h"
+#include "../../fs.h"
+#include "../../fcntl.h"
+#include "../../syscall.h"
+#include "../../traps.h"
+#include "../../memlayout.h"
+
+char buf[8192];
+char name[3];
+char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };
+int stdout = 1;
+
+// does chdir() call iput(p->cwd) in a transaction?
+void
+iputtest(void)
+{
+  printf(stdout, "iput test\n");
+
+  if(mkdir("iputdir") < 0){
+    printf(stdout, "mkdir failed\n");
+    exit(0);
+  }
+  if(chdir("iputdir") < 0){
+    printf(stdout, "chdir iputdir failed\n");
+    exit(0);
+  }
+  if(unlink("../iputdir") < 0){
+    printf(stdout, "unlink ../iputdir failed\n");
+    exit(0);
+  }
+  if(chdir("/") < 0){
+    printf(stdout, "chdir / failed\n");
+    exit(0);
+  }
+  printf(stdout, "iput test ok\n");
+}
+
+// does exit(0) call iput(p->cwd) in a transaction?
+void
+exitiputtest(void)
+{
+  int pid;
+
+  printf(stdout, "exitiput test\n");
+
+  pid = fork();
+  if(pid < 0){
+    printf(stdout, "fork failed\n");
+    exit(0);
+  }
+  if(pid == 0){
+    if(mkdir("iputdir") < 0){
+      printf(stdout, "mkdir failed\n");
+      exit(0);
+    }
+    if(chdir("iputdir") < 0){
+      printf(stdout, "child chdir failed\n");
+      exit(0);
+    }
+    if(unlink("../iputdir") < 0){
+      printf(stdout, "unlink ../iputdir failed\n");
+      exit(0);
+    }
+    exit(0);
+  }
+  wait(null);
+  printf(stdout, "exitiput test ok\n");
+}
+
+// does the error path in open() for attempt to write a
+// directory call iput() in a transaction?
+// needs a hacked kernel that pauses just after the namei()
+// call in sys_open():
+//    if((ip = namei(path)) == 0)
+//      return -1;
+//    {
+//      int i;
+//      for(i = 0; i < 10000; i++)
+//        yield();
+//    }
+void
+openiputtest(void)
+{
+  int pid;
+
+  printf(stdout, "openiput test\n");
+  if(mkdir("oidir") < 0){
+    printf(stdout, "mkdir oidir failed\n");
+    exit(0);
+  }
+  pid = fork();
+  if(pid < 0){
+    printf(stdout, "fork failed\n");
+    exit(0);
+  }
+  if(pid == 0){
+    int fd = open("oidir", O_RDWR);
+    if(fd >= 0){
+      printf(stdout, "open directory for write succeeded\n");
+      exit(0);
+    }
+    exit(0);
+  }
+  sleep(1);
+  if(unlink("oidir") != 0){
+    printf(stdout, "unlink failed\n");
+    exit(0);
+  }
+  wait(null);
+  printf(stdout, "openiput test ok\n");
+}
+
+// simple file system tests
+
+void
+opentest(void)
+{
+  int fd;
+
+  printf(stdout, "open test\n");
+  fd = open("echo", 0);
+  if(fd < 0){
+    printf(stdout, "open echo failed!\n");
+    exit(0);
+  }
+  close(fd);
+  fd = open("doesnotexist", 0);
+  if(fd >= 0){
+    printf(stdout, "open doesnotexist succeeded!\n");
+    exit(0);
+  }
+  printf(stdout, "open test ok\n");
+}
+
+void
+writetest(void)
+{
+  int fd;
+  int i;
+
+  printf(stdout, "small file test\n");
+  fd = open("small", O_CREATE|O_RDWR);
+  if(fd >= 0){
+    printf(stdout, "creat small succeeded; ok\n");
+  } else {
+    printf(stdout, "error: creat small failed!\n");
+    exit(0);
+  }
+  for(i = 0; i < 100; i++){
+    if(write(fd, "aaaaaaaaaa", 10) != 10){
+      printf(stdout, "error: write aa %d new file failed\n", i);
+      exit(0);
+    }
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+      printf(stdout, "error: write bb %d new file failed\n", i);
+      exit(0);
+    }
+  }
+  printf(stdout, "writes ok\n");
+  close(fd);
+  fd = open("small", O_RDONLY);
+  if(fd >= 0){
+    printf(stdout, "open small succeeded ok\n");
+  } else {
+    printf(stdout, "error: open small failed!\n");
+    exit(0);
+  }
+  i = read(fd, buf, 2000);
+  if(i == 2000){
+    printf(stdout, "read succeeded ok\n");
+  } else {
+    printf(stdout, "read failed\n");
+    exit(0);
+  }
+  close(fd);
+
+  if(unlink("small") < 0){
+    printf(stdout, "unlink small failed\n");
+    exit(0);
+  }
+  printf(stdout, "small file test ok\n");
+}
+
+void
+writetest1(void)
+{
+  int i, fd, n;
+
+  printf(stdout, "big files test\n");
+
+  fd = open("big", O_CREATE|O_RDWR);
+  if(fd < 0){
+    printf(stdout, "error: creat big failed!\n");
+    exit(0);
+  }
+
+  for(i = 0; i < MAXFILE; i++){
+    ((int*)buf)[0] = i;
+    if(write(fd, buf, 512) != 512){
+      printf(stdout, "error: write big file failed\n", i);
+      exit(0);
+    }
+  }
+
+  close(fd);
+
+  fd = open("big", O_RDONLY);
+  if(fd < 0){
+    printf(stdout, "error: open big failed!\n");
+    exit(0);
+  }
+
+  n = 0;
+  for(;;){
+    i = read(fd, buf, 512);
+    if(i == 0){
+      if(n == MAXFILE - 1){
+        printf(stdout, "read only %d blocks from big", n);
+        exit(0);
+      }
+      break;
+    } else if(i != 512){
+      printf(stdout, "read failed %d\n", i);
+      exit(0);
+    }
+    if(((int*)buf)[0] != n){
+      printf(stdout, "read content of block %d is %d\n",
+             n, ((int*)buf)[0]);
+      exit(0);
+    }
+    n++;
+  }
+  close(fd);
+  if(unlink("big") < 0){
+    printf(stdout, "unlink big failed\n");
+    exit(0);
+  }
+  printf(stdout, "big files ok\n");
+}
+
+void
+createtest(void)
+{
+  int i, fd;
+
+  printf(stdout, "many creates, followed by unlink test\n");
+
+  name[0] = 'a';
+  name[2] = '\0';
+  for(i = 0; i < 52; i++){
+    name[1] = '0' + i;
+    fd = open(name, O_CREATE|O_RDWR);
+    close(fd);
+  }
+  name[0] = 'a';
+  name[2] = '\0';
+  for(i = 0; i < 52; i++){
+    name[1] = '0' + i;
+    unlink(name);
+  }
+  printf(stdout, "many creates, followed by unlink; ok\n");
+}
+
+void dirtest(void)
+{
+  printf(stdout, "mkdir test\n");
+
+  if(mkdir("dir0") < 0){
+    printf(stdout, "mkdir failed\n");
+    exit(0);
+  }
+
+  if(chdir("dir0") < 0){
+    printf(stdout, "chdir dir0 failed\n");
+    exit(0);
+  }
+
+  if(chdir("..") < 0){
+    printf(stdout, "chdir .. failed\n");
+    exit(0);
+  }
+
+  if(unlink("dir0") < 0){
+    printf(stdout, "unlink dir0 failed\n");
+    exit(0);
+  }
+  printf(stdout, "mkdir test ok\n");
+}
+
+void
+exectest(void)
+{
+  printf(stdout, "exec test\n");
+  if(exec("echo", echoargv) < 0){
+    printf(stdout, "exec echo failed\n");
+    exit(0);
+  }
+}
+
+// simple fork and pipe read/write
+
+void
+pipe1(void)
+{
+  int fds[2], pid;
+  int seq, i, n, cc, total;
+
+  if(pipe(fds) != 0){
+    printf(1, "pipe() failed\n");
+    exit(0);
+  }
+  pid = fork();
+  seq = 0;
+  if(pid == 0){
+    close(fds[0]);
+    for(n = 0; n < 5; n++){
+      for(i = 0; i < 1033; i++)
+        buf[i] = seq++;
+      if(write(fds[1], buf, 1033) != 1033){
+        printf(1, "pipe1 oops 1\n");
+        exit(0);
+      }
+    }
+    exit(0);
+  } else if(pid > 0){
+    close(fds[1]);
+    total = 0;
+    cc = 1;
+    while((n = read(fds[0], buf, cc)) > 0){
+      for(i = 0; i < n; i++){
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+          printf(1, "pipe1 oops 2\n");
+          return;
+        }
+      }
+      total += n;
+      cc = cc * 2;
+      if(cc > sizeof(buf))
+        cc = sizeof(buf);
+    }
+    if(total != 5 * 1033){
+      printf(1, "pipe1 oops 3 total %d\n", total);
+      exit(0);
+    }
+    close(fds[0]);
+    wait(null);
+  } else {
+    printf(1, "fork() failed\n");
+    exit(0);
+  }
+  printf(1, "pipe1 ok\n");
+}
+
+// meant to be run w/ at most two CPUs
+void
+preempt(void)
+{
+  int pid1, pid2, pid3;
+  int pfds[2];
+
+  printf(1, "preempt: ");
+  pid1 = fork();
+  if(pid1 == 0)
+    for(;;)
+      ;
+
+  pid2 = fork();
+  if(pid2 == 0)
+    for(;;)
+      ;
+
+  pipe(pfds);
+  pid3 = fork();
+  if(pid3 == 0){
+    close(pfds[0]);
+    if(write(pfds[1], "x", 1) != 1)
+      printf(1, "preempt write error");
+    close(pfds[1]);
+    for(;;)
+      ;
+  }
+
+  close(pfds[1]);
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+    printf(1, "preempt read error");
+    return;
+  }
+  close(pfds[0]);
+  printf(1, "kill... ");
+  kill(pid1);
+  kill(pid2);
+  kill(pid3);
+  printf(1, "wait... ");
+  wait(null);
+  wait(null);
+  wait(null);
+  printf(1, "preempt ok\n");
+}
+
+// try to find any races between exit and wait
+void
+exitwait(void)
+{
+  int i, pid;
+
+  for(i = 0; i < 100; i++){
+    pid = fork();
+    if(pid < 0){
+      printf(1, "fork failed\n");
+      return;
+    }
+    if(pid){
+      if(wait(null) != pid){
+        printf(1, "wait wrong pid\n");
+        return;
+      }
+    } else {
+      exit(0);
+    }
+  }
+  printf(1, "exitwait ok\n");
+}
+
+void
+mem(void)
+{
+  void *m1, *m2;
+  int pid, ppid;
+
+  printf(1, "mem test\n");
+  ppid = getpid();
+  if((pid = fork()) == 0){
+    m1 = 0;
+    while((m2 = malloc(10001)) != 0){
+      *(char**)m2 = m1;
+      m1 = m2;
+    }
+    while(m1){
+      m2 = *(char**)m1;
+      free(m1);
+      m1 = m2;
+    }
+    m1 = malloc(1024*20);
+    if(m1 == 0){
+      printf(1, "couldn't allocate mem?!!\n");
+      kill(ppid);
+      exit(0);
+    }
+    free(m1);
+    printf(1, "mem ok\n");
+    exit(0);
+  } else {
+    wait(null);
+  }
+}
+
+// More file system tests
+
+// two processes write to the same file descriptor
+// is the offset shared? does inode locking work?
+void
+sharedfd(void)
+{
+  int fd, pid, i, n, nc, np;
+  char buf[10];
+
+  printf(1, "sharedfd test\n");
+
+  unlink("sharedfd");
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+  if(fd < 0){
+    printf(1, "fstests: cannot open sharedfd for writing");
+    return;
+  }
+  pid = fork();
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+  for(i = 0; i < 1000; i++){
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+      printf(1, "fstests: write sharedfd failed\n");
+      break;
+    }
+  }
+  if(pid == 0)
+    exit(0);
+  else
+    wait(null);
+  close(fd);
+  fd = open("sharedfd", 0);
+  if(fd < 0){
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+    return;
+  }
+  nc = np = 0;
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+    for(i = 0; i < sizeof(buf); i++){
+      if(buf[i] == 'c')
+        nc++;
+      if(buf[i] == 'p')
+        np++;
+    }
+  }
+  close(fd);
+  unlink("sharedfd");
+  if(nc == 10000 && np == 10000){
+    printf(1, "sharedfd ok\n");
+  } else {
+    printf(1, "sharedfd oops %d %d\n", nc, np);
+    exit(0);
+  }
+}
+
+// four processes write different files at the same
+// time, to test block allocation.
+void
+fourfiles(void)
+{
+  int fd, pid, i, j, n, total, pi;
+  char *names[] = { "f0", "f1", "f2", "f3" };
+  char *fname;
+
+  printf(1, "fourfiles test\n");
+
+  for(pi = 0; pi < 4; pi++){
+    fname = names[pi];
+    unlink(fname);
+
+    pid = fork();
+    if(pid < 0){
+      printf(1, "fork failed\n");
+      exit(0);
+    }
+
+    if(pid == 0){
+      fd = open(fname, O_CREATE | O_RDWR);
+      if(fd < 0){
+        printf(1, "create failed\n");
+        exit(0);
+      }
+
+      memset(buf, '0'+pi, 512);
+      for(i = 0; i < 12; i++){
+        if((n = write(fd, buf, 500)) != 500){
+          printf(1, "write failed %d\n", n);
+          exit(0);
+        }
+      }
+      exit(0);
+    }
+  }
+
+  for(pi = 0; pi < 4; pi++){
+    wait(null);
+  }
+
+  for(i = 0; i < 2; i++){
+    fname = names[i];
+    fd = open(fname, 0);
+    total = 0;
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+      for(j = 0; j < n; j++){
+        if(buf[j] != '0'+i){
+          printf(1, "wrong char\n");
+          exit(0);
+        }
+      }
+      total += n;
+    }
+    close(fd);
+    if(total != 12*500){
+      printf(1, "wrong length %d\n", total);
+      exit(0);
+    }
+    unlink(fname);
+  }
+
+  printf(1, "fourfiles ok\n");
+}
+
+// four processes create and delete different files in same directory
+void
+createdelete(void)
+{
+  enum { N = 20 };
+  int pid, i, fd, pi;
+  char name[32];
+
+  printf(1, "createdelete test\n");
+
+  for(pi = 0; pi < 4; pi++){
+    pid = fork();
+    if(pid < 0){
+      printf(1, "fork failed\n");
+      exit(0);
+    }
+
+    if(pid == 0){
+      name[0] = 'p' + pi;
+      name[2] = '\0';
+      for(i = 0; i < N; i++){
+        name[1] = '0' + i;
+        fd = open(name, O_CREATE | O_RDWR);
+        if(fd < 0){
+          printf(1, "create failed\n");
+          exit(0);
+        }
+        close(fd);
+        if(i > 0 && (i % 2 ) == 0){
+          name[1] = '0' + (i / 2);
+          if(unlink(name) < 0){
+            printf(1, "unlink failed\n");
+            exit(0);
+          }
+        }
+      }
+      exit(0);
+    }
+  }
+
+  for(pi = 0; pi < 4; pi++){
+    wait(null);
+  }
+
+  name[0] = name[1] = name[2] = 0;
+  for(i = 0; i < N; i++){
+    for(pi = 0; pi < 4; pi++){
+      name[0] = 'p' + pi;
+      name[1] = '0' + i;
+      fd = open(name, 0);
+      if((i == 0 || i >= N/2) && fd < 0){
+        printf(1, "oops createdelete %s didn't exist\n", name);
+        exit(0);
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+        printf(1, "oops createdelete %s did exist\n", name);
+        exit(0);
+      }
+      if(fd >= 0)
+        close(fd);
+    }
+  }
+
+  for(i = 0; i < N; i++){
+    for(pi = 0; pi < 4; pi++){
+      name[0] = 'p' + i;
+      name[1] = '0' + i;
+      unlink(name);
+    }
+  }
+
+  printf(1, "createdelete ok\n");
+}
+
+// can I unlink a file and still read it?
+void
+unlinkread(void)
+{
+  int fd, fd1;
+
+  printf(1, "unlinkread test\n");
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf(1, "create unlinkread failed\n");
+    exit(0);
+  }
+  write(fd, "hello", 5);
+  close(fd);
+
+  fd = open("unlinkread", O_RDWR);
+  if(fd < 0){
+    printf(1, "open unlinkread failed\n");
+    exit(0);
+  }
+  if(unlink("unlinkread") != 0){
+    printf(1, "unlink unlinkread failed\n");
+    exit(0);
+  }
+
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+  write(fd1, "yyy", 3);
+  close(fd1);
+
+  if(read(fd, buf, sizeof(buf)) != 5){
+    printf(1, "unlinkread read failed");
+    exit(0);
+  }
+  if(buf[0] != 'h'){
+    printf(1, "unlinkread wrong data\n");
+    exit(0);
+  }
+  if(write(fd, buf, 10) != 10){
+    printf(1, "unlinkread write failed\n");
+    exit(0);
+  }
+  close(fd);
+  unlink("unlinkread");
+  printf(1, "unlinkread ok\n");
+}
+
+void
+linktest(void)
+{
+  int fd;
+
+  printf(1, "linktest\n");
+
+  unlink("lf1");
+  unlink("lf2");
+
+  fd = open("lf1", O_CREATE|O_RDWR);
+  if(fd < 0){
+    printf(1, "create lf1 failed\n");
+    exit(0);
+  }
+  if(write(fd, "hello", 5) != 5){
+    printf(1, "write lf1 failed\n");
+    exit(0);
+  }
+  close(fd);
+
+  if(link("lf1", "lf2") < 0){
+    printf(1, "link lf1 lf2 failed\n");
+    exit(0);
+  }
+  unlink("lf1");
+
+  if(open("lf1", 0) >= 0){
+    printf(1, "unlinked lf1 but it is still there!\n");
+    exit(0);
+  }
+
+  fd = open("lf2", 0);
+  if(fd < 0){
+    printf(1, "open lf2 failed\n");
+    exit(0);
+  }
+  if(read(fd, buf, sizeof(buf)) != 5){
+    printf(1, "read lf2 failed\n");
+    exit(0);
+  }
+  close(fd);
+
+  if(link("lf2", "lf2") >= 0){
+    printf(1, "link lf2 lf2 succeeded! oops\n");
+    exit(0);
+  }
+
+  unlink("lf2");
+  if(link("lf2", "lf1") >= 0){
+    printf(1, "link non-existant succeeded! oops\n");
+    exit(0);
+  }
+
+  if(link(".", "lf1") >= 0){
+    printf(1, "link . lf1 succeeded! oops\n");
+    exit(0);
+  }
+
+  printf(1, "linktest ok\n");
+}
+
+// test concurrent create/link/unlink of the same file
+void
+concreate(void)
+{
+  char file[3];
+  int i, pid, n, fd;
+  char fa[40];
+  struct {
+    ushort inum;
+    char name[14];
+  } de;
+
+  printf(1, "concreate test\n");
+  file[0] = 'C';
+  file[2] = '\0';
+  for(i = 0; i < 40; i++){
+    file[1] = '0' + i;
+    unlink(file);
+    pid = fork();
+    if(pid && (i % 3) == 1){
+      link("C0", file);
+    } else if(pid == 0 && (i % 5) == 1){
+      link("C0", file);
+    } else {
+      fd = open(file, O_CREATE | O_RDWR);
+      if(fd < 0){
+        printf(1, "concreate create %s failed\n", file);
+        exit(0);
+      }
+      close(fd);
+    }
+    if(pid == 0)
+      exit(0);
+    else
+      wait(null);
+  }
+
+  memset(fa, 0, sizeof(fa));
+  fd = open(".", 0);
+  n = 0;
+  while(read(fd, &de, sizeof(de)) > 0){
+    if(de.inum == 0)
+      continue;
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+      i = de.name[1] - '0';
+      if(i < 0 || i >= sizeof(fa)){
+        printf(1, "concreate weird file %s\n", de.name);
+        exit(0);
+      }
+      if(fa[i]){
+        printf(1, "concreate duplicate file %s\n", de.name);
+        exit(0);
+      }
+      fa[i] = 1;
+      n++;
+    }
+  }
+  close(fd);
+
+  if(n != 40){
+    printf(1, "concreate not enough files in directory listing\n");
+    exit(0);
+  }
+
+  for(i = 0; i < 40; i++){
+    file[1] = '0' + i;
+    pid = fork();
+    if(pid < 0){
+      printf(1, "fork failed\n");
+      exit(0);
+    }
+    if(((i % 3) == 0 && pid == 0) ||
+       ((i % 3) == 1 && pid != 0)){
+      close(open(file, 0));
+      close(open(file, 0));
+      close(open(file, 0));
+      close(open(file, 0));
+    } else {
+      unlink(file);
+      unlink(file);
+      unlink(file);
+      unlink(file);
+    }
+    if(pid == 0)
+      exit(0);
+    else
+      wait(null);
+  }
+
+  printf(1, "concreate ok\n");
+}
+
+// another concurrent link/unlink/create test,
+// to look for deadlocks.
+void
+linkunlink()
+{
+  int pid, i;
+
+  printf(1, "linkunlink test\n");
+
+  unlink("x");
+  pid = fork();
+  if(pid < 0){
+    printf(1, "fork failed\n");
+    exit(0);
+  }
+
+  unsigned int x = (pid ? 1 : 97);
+  for(i = 0; i < 100; i++){
+    x = x * 1103515245 + 12345;
+    if((x % 3) == 0){
+      close(open("x", O_RDWR | O_CREATE));
+    } else if((x % 3) == 1){
+      link("cat", "x");
+    } else {
+      unlink("x");
+    }
+  }
+
+  if(pid)
+    wait(null);
+  else
+    exit(0);
+
+  printf(1, "linkunlink ok\n");
+}
+
+// directory that uses indirect blocks
+void
+bigdir(void)
+{
+  int i, fd;
+  char name[10];
+
+  printf(1, "bigdir test\n");
+  unlink("bd");
+
+  fd = open("bd", O_CREATE);
+  if(fd < 0){
+    printf(1, "bigdir create failed\n");
+    exit(0);
+  }
+  close(fd);
+
+  for(i = 0; i < 500; i++){
+    name[0] = 'x';
+    name[1] = '0' + (i / 64);
+    name[2] = '0' + (i % 64);
+    name[3] = '\0';
+    if(link("bd", name) != 0){
+      printf(1, "bigdir link failed\n");
+      exit(0);
+    }
+  }
+
+  unlink("bd");
+  for(i = 0; i < 500; i++){
+    name[0] = 'x';
+    name[1] = '0' + (i / 64);
+    name[2] = '0' + (i % 64);
+    name[3] = '\0';
+    if(unlink(name) != 0){
+      printf(1, "bigdir unlink failed");
+      exit(0);
+    }
+  }
+
+  printf(1, "bigdir ok\n");
+}
+
+void
+subdir(void)
+{
+  int fd, cc;
+
+  printf(1, "subdir test\n");
+
+  unlink("ff");
+  if(mkdir("dd") != 0){
+    printf(1, "subdir mkdir dd failed\n");
+    exit(0);
+  }
+
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf(1, "create dd/ff failed\n");
+    exit(0);
+  }
+  write(fd, "ff", 2);
+  close(fd);
+
+  if(unlink("dd") >= 0){
+    printf(1, "unlink dd (non-empty dir) succeeded!\n");
+    exit(0);
+  }
+
+  if(mkdir("/dd/dd") != 0){
+    printf(1, "subdir mkdir dd/dd failed\n");
+    exit(0);
+  }
+
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf(1, "create dd/dd/ff failed\n");
+    exit(0);
+  }
+  write(fd, "FF", 2);
+  close(fd);
+
+  fd = open("dd/dd/../ff", 0);
+  if(fd < 0){
+    printf(1, "open dd/dd/../ff failed\n");
+    exit(0);
+  }
+  cc = read(fd, buf, sizeof(buf));
+  if(cc != 2 || buf[0] != 'f'){
+    printf(1, "dd/dd/../ff wrong content\n");
+    exit(0);
+  }
+  close(fd);
+
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
+    exit(0);
+  }
+
+  if(unlink("dd/dd/ff") != 0){
+    printf(1, "unlink dd/dd/ff failed\n");
+    exit(0);
+  }
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
+    exit(0);
+  }
+
+  if(chdir("dd") != 0){
+    printf(1, "chdir dd failed\n");
+    exit(0);
+  }
+  if(chdir("dd/../../dd") != 0){
+    printf(1, "chdir dd/../../dd failed\n");
+    exit(0);
+  }
+  if(chdir("dd/../../../dd") != 0){
+    printf(1, "chdir dd/../../dd failed\n");
+    exit(0);
+  }
+  if(chdir("./..") != 0){
+    printf(1, "chdir ./.. failed\n");
+    exit(0);
+  }
+
+  fd = open("dd/dd/ffff", 0);
+  if(fd < 0){
+    printf(1, "open dd/dd/ffff failed\n");
+    exit(0);
+  }
+  if(read(fd, buf, sizeof(buf)) != 2){
+    printf(1, "read dd/dd/ffff wrong len\n");
+    exit(0);
+  }
+  close(fd);
+
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
+    exit(0);
+  }
+
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    printf(1, "create dd/ff/ff succeeded!\n");
+    exit(0);
+  }
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    printf(1, "create dd/xx/ff succeeded!\n");
+    exit(0);
+  }
+  if(open("dd", O_CREATE) >= 0){
+    printf(1, "create dd succeeded!\n");
+    exit(0);
+  }
+  if(open("dd", O_RDWR) >= 0){
+    printf(1, "open dd rdwr succeeded!\n");
+    exit(0);
+  }
+  if(open("dd", O_WRONLY) >= 0){
+    printf(1, "open dd wronly succeeded!\n");
+    exit(0);
+  }
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
+    exit(0);
+  }
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
+    exit(0);
+  }
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
+    exit(0);
+  }
+  if(mkdir("dd/ff/ff") == 0){
+    printf(1, "mkdir dd/ff/ff succeeded!\n");
+    exit(0);
+  }
+  if(mkdir("dd/xx/ff") == 0){
+    printf(1, "mkdir dd/xx/ff succeeded!\n");
+    exit(0);
+  }
+  if(mkdir("dd/dd/ffff") == 0){
+    printf(1, "mkdir dd/dd/ffff succeeded!\n");
+    exit(0);
+  }
+  if(unlink("dd/xx/ff") == 0){
+    printf(1, "unlink dd/xx/ff succeeded!\n");
+    exit(0);
+  }
+  if(unlink("dd/ff/ff") == 0){
+    printf(1, "unlink dd/ff/ff succeeded!\n");
+    exit(0);
+  }
+  if(chdir("dd/ff") == 0){
+    printf(1, "chdir dd/ff succeeded!\n");
+    exit(0);
+  }
+  if(chdir("dd/xx") == 0){
+    printf(1, "chdir dd/xx succeeded!\n");
+    exit(0);
+  }
+
+  if(unlink("dd/dd/ffff") != 0){
+    printf(1, "unlink dd/dd/ff failed\n");
+    exit(0);
+  }
+  if(unlink("dd/ff") != 0){
+    printf(1, "unlink dd/ff failed\n");
+    exit(0);
+  }
+  if(unlink("dd") == 0){
+    printf(1, "unlink non-empty dd succeeded!\n");
+    exit(0);
+  }
+  if(unlink("dd/dd") < 0){
+    printf(1, "unlink dd/dd failed\n");
+    exit(0);
+  }
+  if(unlink("dd") < 0){
+    printf(1, "unlink dd failed\n");
+    exit(0);
+  }
+
+  printf(1, "subdir ok\n");
+}
+
+// test writes that are larger than the log.
+void
+bigwrite(void)
+{
+  int fd, sz;
+
+  printf(1, "bigwrite test\n");
+
+  unlink("bigwrite");
+  for(sz = 499; sz < 12*512; sz += 471){
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    if(fd < 0){
+      printf(1, "cannot create bigwrite\n");
+      exit(0);
+    }
+    int i;
+    for(i = 0; i < 2; i++){
+      int cc = write(fd, buf, sz);
+      if(cc != sz){
+        printf(1, "write(%d) ret %d\n", sz, cc);
+        exit(0);
+      }
+    }
+    close(fd);
+    unlink("bigwrite");
+  }
+
+  printf(1, "bigwrite ok\n");
+}
+
+void
+bigfile(void)
+{
+  int fd, i, total, cc;
+
+  printf(1, "bigfile test\n");
+
+  unlink("bigfile");
+  fd = open("bigfile", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf(1, "cannot create bigfile");
+    exit(0);
+  }
+  for(i = 0; i < 20; i++){
+    memset(buf, i, 600);
+    if(write(fd, buf, 600) != 600){
+      printf(1, "write bigfile failed\n");
+      exit(0);
+    }
+  }
+  close(fd);
+
+  fd = open("bigfile", 0);
+  if(fd < 0){
+    printf(1, "cannot open bigfile\n");
+    exit(0);
+  }
+  total = 0;
+  for(i = 0; ; i++){
+    cc = read(fd, buf, 300);
+    if(cc < 0){
+      printf(1, "read bigfile failed\n");
+      exit(0);
+    }
+    if(cc == 0)
+      break;
+    if(cc != 300){
+      printf(1, "short read bigfile\n");
+      exit(0);
+    }
+    if(buf[0] != i/2 || buf[299] != i/2){
+      printf(1, "read bigfile wrong data\n");
+      exit(0);
+    }
+    total += cc;
+  }
+  close(fd);
+  if(total != 20*600){
+    printf(1, "read bigfile wrong total\n");
+    exit(0);
+  }
+  unlink("bigfile");
+
+  printf(1, "bigfile test ok\n");
+}
+
+void
+fourteen(void)
+{
+  int fd;
+
+  // DIRSIZ is 14.
+  printf(1, "fourteen test\n");
+
+  if(mkdir("12345678901234") != 0){
+    printf(1, "mkdir 12345678901234 failed\n");
+    exit(0);
+  }
+  if(mkdir("12345678901234/123456789012345") != 0){
+    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
+    exit(0);
+  }
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+  if(fd < 0){
+    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
+    exit(0);
+  }
+  close(fd);
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+  if(fd < 0){
+    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
+    exit(0);
+  }
+  close(fd);
+
+  if(mkdir("12345678901234/12345678901234") == 0){
+    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
+    exit(0);
+  }
+  if(mkdir("123456789012345/12345678901234") == 0){
+    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
+    exit(0);
+  }
+
+  printf(1, "fourteen ok\n");
+}
+
+void
+rmdot(void)
+{
+  printf(1, "rmdot test\n");
+  if(mkdir("dots") != 0){
+    printf(1, "mkdir dots failed\n");
+    exit(0);
+  }
+  if(chdir("dots") != 0){
+    printf(1, "chdir dots failed\n");
+    exit(0);
+  }
+  if(unlink(".") == 0){
+    printf(1, "rm . worked!\n");
+    exit(0);
+  }
+  if(unlink("..") == 0){
+    printf(1, "rm .. worked!\n");
+    exit(0);
+  }
+  if(chdir("/") != 0){
+    printf(1, "chdir / failed\n");
+    exit(0);
+  }
+  if(unlink("dots/.") == 0){
+    printf(1, "unlink dots/. worked!\n");
+    exit(0);
+  }
+  if(unlink("dots/..") == 0){
+    printf(1, "unlink dots/.. worked!\n");
+    exit(0);
+  }
+  if(unlink("dots") != 0){
+    printf(1, "unlink dots failed!\n");
+    exit(0);
+  }
+  printf(1, "rmdot ok\n");
+}
+
+void
+dirfile(void)
+{
+  int fd;
+
+  printf(1, "dir vs file\n");
+
+  fd = open("dirfile", O_CREATE);
+  if(fd < 0){
+    printf(1, "create dirfile failed\n");
+    exit(0);
+  }
+  close(fd);
+  if(chdir("dirfile") == 0){
+    printf(1, "chdir dirfile succeeded!\n");
+    exit(0);
+  }
+  fd = open("dirfile/xx", 0);
+  if(fd >= 0){
+    printf(1, "create dirfile/xx succeeded!\n");
+    exit(0);
+  }
+  fd = open("dirfile/xx", O_CREATE);
+  if(fd >= 0){
+    printf(1, "create dirfile/xx succeeded!\n");
+    exit(0);
+  }
+  if(mkdir("dirfile/xx") == 0){
+    printf(1, "mkdir dirfile/xx succeeded!\n");
+    exit(0);
+  }
+  if(unlink("dirfile/xx") == 0){
+    printf(1, "unlink dirfile/xx succeeded!\n");
+    exit(0);
+  }
+  if(link("README", "dirfile/xx") == 0){
+    printf(1, "link to dirfile/xx succeeded!\n");
+    exit(0);
+  }
+  if(unlink("dirfile") != 0){
+    printf(1, "unlink dirfile failed!\n");
+    exit(0);
+  }
+
+  fd = open(".", O_RDWR);
+  if(fd >= 0){
+    printf(1, "open . for writing succeeded!\n");
+    exit(0);
+  }
+  fd = open(".", 0);
+  if(write(fd, "x", 1) > 0){
+    printf(1, "write . succeeded!\n");
+    exit(0);
+  }
+  close(fd);
+
+  printf(1, "dir vs file OK\n");
+}
+
+// test that iput() is called at the end of _namei()
+void
+iref(void)
+{
+  int i, fd;
+
+  printf(1, "empty file name\n");
+
+  // the 50 is NINODE
+  for(i = 0; i < 50 + 1; i++){
+    if(mkdir("irefd") != 0){
+      printf(1, "mkdir irefd failed\n");
+      exit(0);
+    }
+    if(chdir("irefd") != 0){
+      printf(1, "chdir irefd failed\n");
+      exit(0);
+    }
+
+    mkdir("");
+    link("README", "");
+    fd = open("", O_CREATE);
+    if(fd >= 0)
+      close(fd);
+    fd = open("xx", O_CREATE);
+    if(fd >= 0)
+      close(fd);
+    unlink("xx");
+  }
+
+  chdir("/");
+  printf(1, "empty file name OK\n");
+}
+
+// test that fork fails gracefully
+// the forktest binary also does this, but it runs out of proc entries first.
+// inside the bigger usertests binary, we run out of memory first.
+void
+forktest(void)
+{
+  int n, pid;
+
+  printf(1, "fork test\n");
+
+  for(n=0; n<1000; n++){
+    pid = fork();
+    if(pid < 0)
+      break;
+    if(pid == 0)
+      exit(0);
+  }
+
+  if(n == 1000){
+    printf(1, "fork claimed to work 1000 times!\n");
+    exit(0);
+  }
+
+  for(; n > 0; n--){
+    if(wait(null) < 0){
+      printf(1, "wait stopped early\n");
+      exit(0);
+    }
+  }
+
+  if(wait(null) != -1){
+    printf(1, "wait got too many\n");
+    exit(0);
+  }
+
+  printf(1, "fork test OK\n");
+}
+
+void
+sbrktest(void)
+{
+  int fds[2], pid, pids[10], ppid;
+  char *a, *b, *c, *lastaddr, *oldbrk, *p, scratch;
+  uint amt;
+
+  printf(stdout, "sbrk test\n");
+  oldbrk = sbrk(0);
+
+  // can one sbrk() less than a page?
+  a = sbrk(0);
+  int i;
+  for(i = 0; i < 5000; i++){
+    b = sbrk(1);
+    if(b != a){
+      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
+      exit(0);
+    }
+    *b = 1;
+    a = b + 1;
+  }
+  pid = fork();
+  if(pid < 0){
+    printf(stdout, "sbrk test fork failed\n");
+    exit(0);
+  }
+  c = sbrk(1);
+  c = sbrk(1);
+  if(c != a + 1){
+    printf(stdout, "sbrk test failed post-fork\n");
+    exit(0);
+  }
+  if(pid == 0)
+    exit(0);
+  wait(null);
+
+  // can one grow address space to something big?
+#define BIG (100*1024*1024)
+  a = sbrk(0);
+  amt = (BIG) - (uint)a;
+  p = sbrk(amt);
+  if (p != a) {
+    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
+    exit(0);
+  }
+  lastaddr = (char*) (BIG-1);
+  *lastaddr = 99;
+
+  // can one de-allocate?
+  a = sbrk(0);
+  c = sbrk(-4096);
+  if(c == (char*)0xffffffff){
+    printf(stdout, "sbrk could not deallocate\n");
+    exit(0);
+  }
+  c = sbrk(0);
+  if(c != a - 4096){
+    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
+    exit(0);
+  }
+
+  // can one re-allocate that page?
+  a = sbrk(0);
+  c = sbrk(4096);
+  if(c != a || sbrk(0) != a + 4096){
+    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
+    exit(0);
+  }
+  if(*lastaddr == 99){
+    // should be zero
+    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
+    exit(0);
+  }
+
+  a = sbrk(0);
+  c = sbrk(-(sbrk(0) - oldbrk));
+  if(c != a){
+    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
+    exit(0);
+  }
+
+  // can we read the kernel's memory?
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    ppid = getpid();
+    pid = fork();
+    if(pid < 0){
+      printf(stdout, "fork failed\n");
+      exit(0);
+    }
+    if(pid == 0){
+      printf(stdout, "oops could read %x = %x\n", a, *a);
+      kill(ppid);
+      exit(0);
+    }
+    wait(null);
+  }
+
+  // if we run the system out of memory, does it clean up the last
+  // failed allocation?
+  if(pipe(fds) != 0){
+    printf(1, "pipe() failed\n");
+    exit(0);
+  }
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    if((pids[i] = fork()) == 0){
+      // allocate a lot of memory
+      sbrk(BIG - (uint)sbrk(0));
+      write(fds[1], "x", 1);
+      // sit around until killed
+      for(;;) sleep(1000);
+    }
+    if(pids[i] != -1)
+      read(fds[0], &scratch, 1);
+  }
+  // if those failed allocations freed up the pages they did allocate,
+  // we'll be able to allocate here
+  c = sbrk(4096);
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    if(pids[i] == -1)
+      continue;
+    kill(pids[i]);
+    wait(null);
+  }
+  if(c == (char*)0xffffffff){
+    printf(stdout, "failed sbrk leaked memory\n");
+    exit(0);
+  }
+
+  if(sbrk(0) > oldbrk)
+    sbrk(-(sbrk(0) - oldbrk));
+
+  printf(stdout, "sbrk test OK\n");
+}
+
+void
+validateint(int *p)
+{
+  int res;
+  asm("mov %%esp, %%ebx\n\t"
+      "mov %3, %%esp\n\t"
+      "int %2\n\t"
+      "mov %%ebx, %%esp" :
+      "=a" (res) :
+      "a" (SYS_sleep), "n" (T_SYSCALL), "c" (p) :
+      "ebx");
+}
+
+void
+validatetest(void)
+{
+  int hi, pid;
+  uint p;
+
+  printf(stdout, "validate test\n");
+  hi = 1100*1024;
+
+  for(p = 0; p <= (uint)hi; p += 4096){
+    if((pid = fork()) == 0){
+      // try to crash the kernel by passing in a badly placed integer
+      validateint((int*)p);
+      exit(0);
+    }
+    sleep(0);
+    sleep(0);
+    kill(pid);
+    wait(null);
+
+    // try to crash the kernel by passing in a bad string pointer
+    if(link("nosuchfile", (char*)p) != -1){
+      printf(stdout, "link should not succeed\n");
+      exit(0);
+    }
+  }
+
+  printf(stdout, "validate ok\n");
+}
+
+// does unintialized data start out zero?
+char uninit[10000];
+void
+bsstest(void)
+{
+  int i;
+
+  printf(stdout, "bss test\n");
+  for(i = 0; i < sizeof(uninit); i++){
+    if(uninit[i] != '\0'){
+      printf(stdout, "bss test failed\n");
+      exit(0);
+    }
+  }
+  printf(stdout, "bss test ok\n");
+}
+
+// does exec return an error if the arguments
+// are larger than a page? or does it write
+// below the stack and wreck the instructions/data?
+void
+bigargtest(void)
+{
+  int pid, fd;
+
+  unlink("bigarg-ok");
+  pid = fork();
+  if(pid == 0){
+    static char *args[MAXARG];
+    int i;
+    for(i = 0; i < MAXARG-1; i++)
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    args[MAXARG-1] = 0;
+    printf(stdout, "bigarg test\n");
+    exec("echo", args);
+    printf(stdout, "bigarg test ok\n");
+    fd = open("bigarg-ok", O_CREATE);
+    close(fd);
+    exit(0);
+  } else if(pid < 0){
+    printf(stdout, "bigargtest: fork failed\n");
+    exit(0);
+  }
+  wait(null);
+  fd = open("bigarg-ok", 0);
+  if(fd < 0){
+    printf(stdout, "bigarg test failed!\n");
+    exit(0);
+  }
+  close(fd);
+  unlink("bigarg-ok");
+}
+
+// what happens when the file system runs out of blocks?
+// answer: balloc panics, so this test is not useful.
+void
+fsfull()
+{
+  int nfiles;
+  int fsblocks = 0;
+
+  printf(1, "fsfull test\n");
+
+  for(nfiles = 0; ; nfiles++){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    name[2] = '0' + (nfiles % 1000) / 100;
+    name[3] = '0' + (nfiles % 100) / 10;
+    name[4] = '0' + (nfiles % 10);
+    name[5] = '\0';
+    printf(1, "writing %s\n", name);
+    int fd = open(name, O_CREATE|O_RDWR);
+    if(fd < 0){
+      printf(1, "open %s failed\n", name);
+      break;
+    }
+    int total = 0;
+    while(1){
+      int cc = write(fd, buf, 512);
+      if(cc < 512)
+        break;
+      total += cc;
+      fsblocks++;
+    }
+    printf(1, "wrote %d bytes\n", total);
+    close(fd);
+    if(total == 0)
+      break;
+  }
+
+  while(nfiles >= 0){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    name[2] = '0' + (nfiles % 1000) / 100;
+    name[3] = '0' + (nfiles % 100) / 10;
+    name[4] = '0' + (nfiles % 10);
+    name[5] = '\0';
+    unlink(name);
+    nfiles--;
+  }
+
+  printf(1, "fsfull test finished\n");
+}
+
+void
+uio()
+{
+  #define RTC_ADDR 0x70
+  #define RTC_DATA 0x71
+
+  ushort port = 0;
+  uchar val = 0;
+  int pid;
+
+  printf(1, "uio test\n");
+  pid = fork();
+  if(pid == 0){
+    port = RTC_ADDR;
+    val = 0x09;  /* year */
+    /* http://wiki.osdev.org/Inline_Assembly/Examples */
+    asm volatile("outb %0,%1"::"a"(val), "d" (port));
+    port = RTC_DATA;
+    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
+    printf(1, "uio: uio succeeded; test FAILED\n");
+    exit(0);
+  } else if(pid < 0){
+    printf (1, "fork failed\n");
+    exit(0);
+  }
+  wait(null);
+  printf(1, "uio test done\n");
+}
+
+void argptest()
+{
+  int fd;
+  fd = open("init", O_RDONLY);
+  if (fd < 0) {
+    printf(2, "open failed\n");
+    exit(0);
+  }
+  read(fd, sbrk(0) - 1, -1);
+  close(fd);
+  printf(1, "arg test passed\n");
+}
+
+unsigned long randstate = 1;
+unsigned int
+rand()
+{
+  randstate = randstate * 1664525 + 1013904223;
+  return randstate;
+}
+
+int
+main(int argc, char *argv[])
+{
+  printf(1, "usertests starting\n");
+
+  if(open("usertests.ran", 0) >= 0){
+    printf(1, "already ran user tests -- rebuild fs.img\n");
+    exit(0);
+  }
+  close(open("usertests.ran", O_CREATE));
+
+  argptest();
+  createdelete();
+  linkunlink();
+  concreate();
+  fourfiles();
+  sharedfd();
+
+  bigargtest();
+  bigwrite();
+  bigargtest();
+  bsstest();
+  sbrktest();
+  validatetest();
+
+  opentest();
+  writetest();
+  writetest1();
+  createtest();
+
+  openiputtest();
+  exitiputtest();
+  iputtest();
+
+  mem();
+  pipe1();
+  preempt();
+  exitwait();
+
+  rmdot();
+  fourteen();
+  bigfile();
+  subdir();
+  linktest();
+  unlinkread();
+  dirfile();
+  iref();
+  forktest();
+  bigdir(); // slow
+
+  uio();
+
+  exectest();
+
+  exit(0);
+}
diff --git a/Project_Test/include/ProjectTest.h b/Project_Test/include/ProjectTest.h
new file mode 100755
index 0000000..82cef67
--- /dev/null
+++ b/Project_Test/include/ProjectTest.h
@@ -0,0 +1,38 @@
+#ifndef PROJECT_TEST_H_
+#define PROJECT_TEST_H_
+
+#include <vector>
+#include <string>
+
+using std::vector;
+using std::string;
+
+// Declaring Extern Global Variables
+typedef void (*pointerToTestsFunctions)();
+extern vector<pointerToTestsFunctions> testsFunctions;
+extern int green;
+extern int red;
+extern int tests;
+extern const long MILLIS_TO_WAIT;
+extern pointerToTestsFunctions currentTestFunction;
+extern string currentTestName;
+extern vector<vector<string>> errorLog;
+extern bool testFunctionActive;
+
+// Declaring Functions
+void start();
+void * InitiateFunctionInThread(void * pVoid);
+void ExecuteTests();
+void summery();
+void test(int testId,string got, string expected,vector<string> args = vector<string>{""});
+void test(int testId,float got, float expected,vector<string> args = vector<string>{""});
+void test(int testId,int got, int expected,vector<string> args = vector<string>{""});
+void test(int testId,unsigned int got, unsigned int expected,vector<string> args = vector<string>{""});
+string GetStdoutFromCommand(string cmd);
+string GetStdoutFromCommandAsync(string cmd, string endCommandString,int maxMillisToWait,int & successFlag);
+FILE * popenGillespie(string command, string type, int & pid);
+int pcloseGillespie(FILE * fp, pid_t pid);
+pid_t popenMonitor(pid_t commandPID,int millisToWait);
+int pcloseMonitor(pid_t monitorPID);
+
+#endif
diff --git a/Project_Test/include/Tests.h b/Project_Test/include/Tests.h
new file mode 100755
index 0000000..777737f
--- /dev/null
+++ b/Project_Test/include/Tests.h
@@ -0,0 +1,28 @@
+#ifndef TESTS_H_
+#define TESTS_H_
+
+#include <vector>
+#include <complex>
+#include <string>
+
+using std::string;
+using std::vector;
+using std::complex;
+
+// Declaring Functions
+void InitializingTests();
+void Initialize();
+void Finialize();
+bool procceseTest(string testFile,unsigned int testNumber);
+unsigned int CreateTests();
+void sigintHandler(int num);
+void Operating_System_Test();
+string processTestOutput(string output);
+string processCompareString(string str);
+void createXV6_TestMakefile(string makefilePath,vector<string> userspacePrograms);
+string processAppendMakefileUPROGS(vector<string> append);
+string replaceInString(string str,char toReplace,string replaceWith);
+int countSubStr(string str,string findSubStr);
+void runSpecificTest(int testToExecute);
+
+#endif
diff --git a/Project_Test/makefile b/Project_Test/makefile
new file mode 100755
index 0000000..7c16b8a
--- /dev/null
+++ b/Project_Test/makefile
@@ -0,0 +1,31 @@
+# All Targets
+all: start
+
+# Tool invocations
+# Executable "start" depends on the files ProjectTest.o and Tests.o.
+start: bin/ProjectTest.o bin/Tests.o
+	@echo 'Building target: start'
+	@echo 'Invoking: C++ Linker'
+	g++ -pthread -o bin/start bin/ProjectTest.o bin/Tests.o
+	@echo 'Finished building target: start'
+	@echo 'Executing Project Test'
+	reset
+	bin/start $(ARGS)
+	rm -f bin/*
+
+gdb: bin/ProjectTest.o bin/Tests.o
+	g++ -pthread -o bin/start bin/ProjectTest.o bin/Tests.o
+	gdb bin/start 
+	rm -f bin/* 
+	
+# Depends on the source and header files
+bin/ProjectTest.o: src/ProjectTest.cpp
+	g++ -g -Wall -Weffc++ -std=c++11 -c -Iinclude -o bin/ProjectTest.o src/ProjectTest.cpp
+
+# Depends on the source and header files
+bin/Tests.o: src/Tests.cpp
+	g++ -g -Wall -Weffc++ -std=c++11 -c -Iinclude -o bin/Tests.o src/Tests.cpp
+
+#Clean the build directory
+clean:
+	rm -f bin/*
diff --git a/Project_Test/src/ProjectTest.cpp b/Project_Test/src/ProjectTest.cpp
new file mode 100755
index 0000000..3a48a4d
--- /dev/null
+++ b/Project_Test/src/ProjectTest.cpp
@@ -0,0 +1,505 @@
+// Using Code from Author: Jeremy Morgan
+
+#include <vector>
+#include <string>
+#include <iostream>
+#include <pthread.h>
+#include <chrono>
+#include <thread>
+#include <time.h>
+#include "../include/ProjectTest.h"
+#include "../include/Tests.h"
+#include <unistd.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <signal.h>
+#include <sys/wait.h>
+#include <errno.h>
+#include <sstream>
+#include <chrono>
+#include <fcntl.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+
+using std::vector;
+using std::string;
+using std::cout;
+using std::clock;
+using std::endl;
+using std::to_string;
+
+#define RED   "\e[38;5;196m"
+#define GRN   "\e[38;5;082m"
+#define YEL   "\e[38;5;226m"
+#define MAG   "\e[38;5;201m"
+#define ORG   "\e[38;5;202m"
+#define RESET "\e[0m"
+
+// Defining Global Variables
+int green = 0;
+int red = 0;
+int tests;
+const long MILLIS_TO_WAIT = 6000000;
+int timeForSmallTest = 600000;
+vector<pointerToTestsFunctions> testsFunctions;
+pointerToTestsFunctions currentTestFunction = 0;
+string currentTestName = "NO_TEST_HAS_BEEN_SUCCESSFULLY_EXECUTED_YET";
+vector<vector<string>> errorLog;
+bool testFunctionActive = 0;
+int testToExecute = -1;
+
+int main(int argc,char* argv[])
+{
+    // Retrieving args
+    if(argc == 2){
+        // Retrieving specific test to execute
+        int number;
+        if((number = atoi(argv[1]))){
+            testToExecute = number;
+        }
+    }
+
+    // Starting tests
+    start();
+
+    // Initializing tests to be executed
+    InitializingTests();
+
+    // Initializing before execution of tests
+    Initialize();
+
+    // Executing tests
+    ExecuteTests();
+
+    // Finialize after execution of tests
+    Finialize();
+    
+    // Summarizing tests
+    summery();
+}
+
+// Declaring start of test
+void start()
+{
+    // Declaring start of test
+    cout << MAG << "*******************************************" << endl;
+    cout << "       Start Of Operating System Test                  " << endl;
+    cout << "*******************************************\n" << RESET << endl;
+
+}
+
+// Executing tests
+void ExecuteTests()
+{
+    // Initializing
+    int rc;
+
+    // Executing tests
+    for(unsigned int i = 0;i < testsFunctions.size();i++)
+    {
+      // Executing Thread
+      pthread_t thread;
+      currentTestFunction = testsFunctions.at(i);
+      rc = pthread_create(&thread, NULL, InitiateFunctionInThread,NULL);
+
+      // Asserting Thread Was Successfully Executed
+      if (rc)
+      {
+        cout << "\n\n\n----------------------------\nError:unable to create thread"
+             << "\n----------------------------\n\n\n" << rc << endl;
+
+        continue;
+      }
+
+      // Waiting For Thread To Finish  -->
+
+      //Retrieving Current Time For Timeout
+      std::this_thread::sleep_for(std::chrono::milliseconds(200));
+      auto t_start = std::chrono::high_resolution_clock::now();
+
+      // Waiting For Current Test To Finish Unless Timeout
+      while (testFunctionActive == 1)
+      {
+        // Retrieving Current Time For Timeout
+        auto t_end = std::chrono::high_resolution_clock::now();
+
+        // Calculating Current Test Duration
+        float duration = std::chrono::duration<double, std::milli>(t_end-t_start).count();
+
+        // Asserting Test Duration Did Not Pass Limit
+        if(duration > MILLIS_TO_WAIT)
+        {
+          // Canceling Thread
+          pthread_cancel(thread);
+
+          // Declaring Test Execution Ended With TImeout
+          test(-1,"$$$ TEST EXECUTION TIMED OUT $$$","");
+
+          // Declaring test terminated
+          testFunctionActive = 0;
+        }
+      }
+    }
+      // Waiting For Thread To Finish  <--
+}
+
+void * InitiateFunctionInThread(void * pVoid)
+{
+    // Declaring Test Thread Active
+    testFunctionActive = 1;
+
+    // Executing Test Function
+    try
+    {
+      currentTestFunction();
+    }
+    catch(const std::exception &exc)
+    { 
+      // Adding error to error log
+      vector<string> newError;
+      newError.push_back(currentTestName);
+      newError.push_back(exc.what());
+      errorLog.push_back(newError);
+
+      // Declaring Exception Raised Durning Test Execution
+      test(-1,"","$$$ DECLARE BAD TEST $$$");
+    }
+
+    // Declaring Test Thread No Longer Active
+    testFunctionActive = 0;
+
+    // Exiting Thread
+    pthread_exit(NULL);
+}
+
+void summery()
+{
+    // Declaring end of test
+    cout << MAG << "\n*******************************************" << endl;
+    cout << "       End Of Operating System Test                    " << endl;
+    cout << "*******************************************" << RESET << endl;
+
+    // Summarizing
+    cout << GRN << "Green: " <<  green << RESET <<  "," << RED << " Red: " << red << RESET << endl;
+
+    // Printing exceptions log
+    if(errorLog.size() != 0)
+    {
+        cout << "\nExceptions Log:\n-------------------------------------------" << endl;
+
+
+        for (unsigned int i = 0;i < errorLog.size();i++)
+          cout << "\n" <<  errorLog[i][0] << " exceptions log:\n" << errorLog[i][1];
+    }
+}
+
+// Checking if test operated according to plan
+void test(int testId,string got, string expected,vector<string> args)
+{
+    // Initializing
+    bool testPassed = false;
+
+    // Counting test
+    tests++;
+
+    // Calculating test results
+    if(expected == "$$$ ASSERT_THROWN_EXCEPTIONS $$$")
+    {
+      testPassed = false;
+      got = "$$$ NO EXCEPTION WAS THROWN $$$";
+    }
+    else if(expected == "$$$ ASSERT_NO_THROWN_EXCEPTIONS $$$" || expected == "$$$ DECLARE GOOD TEST $$$" || got == expected)
+      testPassed = true;
+    else if(expected == "$$$ DECLARE BAD TEST $$$")
+    {
+      testPassed = false;
+      got = "$$$ EXCEPTION WAS THROWN $$$";
+    }
+    else if(expected == "$$$ TEST EXECUTION TIMED OUT $$$")
+      testPassed = false;
+    else if(expected == "$$$ SMALL TEST EXECUTION TIMED OUT $$$")
+      testPassed = false;
+    else if(expected == "$$$ TEST EXECUTION ERROR $$$")
+      testPassed = false;
+
+ // Checking if test operated according to plan
+    if (testPassed == true)
+    {
+      // Counting good test
+      green++;
+    }
+    else
+    {
+      // Counting bad test and declaring
+      red++;
+
+      // Declaring bad test
+      if(got == "$$$ EXCEPTION WAS THROWN $$$")
+        cout << RED << currentTestName <<  "(Test ID: " << testId << ")" <<
+             " did not complete successfully !!!\n" << RESET;
+      else if(got == "$$$ TEST EXECUTION TIMED OUT $$$")
+        cout << RED << currentTestName <<  "(Test ID: " << testId << ")" <<
+             " took more than " <<  MILLIS_TO_WAIT/1000 << " seconds, therefore it has been timed out.\n"
+             << RESET;
+      else if(got == "$$$ SMALL TEST EXECUTION TIMED OUT $$$")
+        cout << RED << currentTestName <<  "(Test ID: " << testId << ")" <<
+             " took more than " <<  timeForSmallTest/1000 << " seconds, therefore it has been timed out.\n"
+             << RESET;
+      else if(got == "$$$ TEST EXECUTION ERROR $$$")
+        cout << RED << currentTestName <<  "(Test ID: " << testId << ")" <<
+             " ennded with fatal error, see test output for more information.\n"
+             << RESET;
+      else if(args[0] == "String value with /n")
+        cout << RED << currentTestName <<  "(Test ID: " << testId << ")" <<
+             " --> Failed" << ",\n-------------------------------\ngot\n-------------------------------\n" <<
+             YEL << got << RED <<
+             "\n-------------------------------\nwhile expected\n-------------------------------\n" << GRN
+             << expected << RED
+             "\n-------------------------------\n" << RESET;
+      else
+        cout << RED <<  currentTestName <<  "(Test ID: " << testId << ")" <<  " --> Failed" <<
+             ", got " << YEL << got << RED << " while expected " << GRN << expected << RED << ".\n" << RESET;
+
+      if(args.size() >= 2 && args[1] != ""){
+          cout << ORG << "hint: " << args[1] << "\n" <<  RESET;
+      }
+    }
+}
+
+// Checking if test operated according to plan
+void test(int testId,float got, float expected,vector<string> args)
+{
+    test(testId,to_string(got),to_string(expected),args);
+}
+
+void test(int testId,int got, int expected,vector<string> args)
+{
+    test(testId,to_string(got),to_string(expected),args);
+}
+
+void test(int testId,unsigned int got, unsigned int expected,vector<string> args)
+{
+    test(testId,to_string(got),to_string(expected),args);
+}
+
+// Retrieving Terminal Output :: Author: Jeremy Morgan
+string GetStdoutFromCommand(string cmd)
+{
+  // Initializing
+  string data;
+  FILE * stream;
+  const int max_buffer = 4000;
+  char buffer[max_buffer];
+  cmd.append(" 2>&1");
+  stream = popen(cmd.c_str(), "r");
+  
+  // Retrieving Terminal Output
+  if (stream)
+  {
+      while (!feof(stream))
+      {
+        if (fgets(buffer, max_buffer, stream) != NULL)
+          data.append(buffer);
+      }
+
+      pclose(stream);
+  }
+
+  return data;
+}
+
+// Retrieving Terminal Output Async :: Author: Jeremy Morgan
+string GetStdoutFromCommandAsync(string cmd, string endCommandString,int maxMillisToWait,int & successFlag)
+{
+
+  // Initializing
+  string data;
+  const int max_buffer = 4000;
+  char buffer[max_buffer];
+  FILE * stream;
+  cmd.append(" 2>&1");
+  pid_t commandPID;
+  bool testEnded = false;
+  pid_t monitorPID;
+  successFlag = false;
+  int monitorStatus;
+
+  // Executing command
+  stream = popenGillespie(cmd.c_str(), "r",commandPID);
+
+  // Retrieving monitor for command
+  monitorPID = popenMonitor(commandPID,maxMillisToWait);
+
+  // Retrieving Terminal Output
+  if (stream)
+  {   
+     while (!feof(stream))
+      { 
+        // Reading line of test output
+        if (fgets(buffer, max_buffer, stream) != NULL){
+            data.append(buffer);
+            string bufferString(buffer);
+
+            // Checking for test end condition
+            if(bufferString.find(endCommandString) != string::npos){
+              testEnded = true;
+            }
+        }
+
+        // Ending command if needed
+        if(testEnded){
+          kill(-commandPID, 9);
+          break;
+        }
+      }
+  }
+
+  // Closing stream
+  pcloseGillespie(stream,commandPID);
+
+  // Closing monitor
+  monitorStatus = pcloseMonitor(monitorPID);
+
+  // Declaring test completed or not
+  if(testEnded){
+    successFlag = 1;
+  }
+  else if(monitorStatus == 1){
+    successFlag = 0;
+  }
+  else{
+    successFlag = -1;
+  }
+
+  return data;
+}
+
+#define READ   0
+#define WRITE  1
+
+// Gillespie code for popen with pid extract
+FILE * popenGillespie(string command, string type, int & pid)
+{
+    pid_t child_pid;
+    int fd[2];
+    pipe(fd);
+
+    if((child_pid = fork()) == -1)
+    {
+        perror("fork");
+        exit(1);
+    }
+
+    /* child process */
+    if (child_pid == 0)
+    {
+        if (type == "r")
+        {
+            close(fd[READ]);    //Close the READ end of the pipe since the child's fd is write-only
+            dup2(fd[WRITE], 1); //Redirect stdout to pipe
+        }
+        else
+        {
+            close(fd[WRITE]);    //Close the WRITE end of the pipe since the child's fd is read-only
+            dup2(fd[READ], 0);   //Redirect stdin to pipe
+        }
+
+        setpgid(child_pid, child_pid); //Needed so negative PIDs can kill children of /bin/sh
+        execl("/bin/sh", "/bin/sh", "-c", command.c_str(), NULL);
+        exit(0);
+    }
+    else
+    {
+        if (type == "r")
+        {
+            close(fd[WRITE]); //Close the WRITE end of the pipe since parent's fd is read-only
+        }
+        else
+        {
+            close(fd[READ]); //Close the READ end of the pipe since parent's fd is write-only
+        }
+    }
+
+    pid = child_pid;
+
+    if (type == "r")
+    {
+        return fdopen(fd[READ], "r");
+    }
+
+    return fdopen(fd[WRITE], "w");
+}
+
+// Gillespie code for pclose with pid extract
+int pcloseGillespie(FILE * fp, pid_t pid)
+{
+    int stat;
+
+    fclose(fp);
+    while (waitpid(pid, &stat, 0) == -1)
+    {
+        if (errno != EINTR)
+        {
+            stat = -1;
+            break;
+        }
+    }
+
+    return stat;
+}
+
+// Opening monitor for ending test if time runs out
+pid_t popenMonitor(pid_t commandPID,int millisToWait)
+{
+    pid_t child_pid;
+
+    if((child_pid = fork()) == -1)
+    {
+        perror("fork");
+        exit(1);
+    }
+
+    /* child process */
+    if (child_pid == 0)
+    {   
+        // Catching signal and ignoring it so that wont wake up from sleep
+        signal(SIGINT,SIG_IGN);
+
+        // Waiting for command to finish
+        std::this_thread::sleep_for(std::chrono::milliseconds(millisToWait));
+
+        // Ending command
+        kill(-commandPID, 9);
+
+        // Exiting
+        exit(0);
+    }
+
+    return child_pid;
+}
+
+// Gillespie code for pclose with pid extract
+int pcloseMonitor(pid_t monitorPID)
+{   
+    // Initializing
+    int monitorStatus;
+    int returnStatus;
+
+    // Checking if monitor has exited
+    waitpid(monitorPID,&monitorStatus,WNOHANG);
+    
+    // Ending monitor
+    kill(monitorPID, 9);
+
+    // Checking if monitor exited normally or was forced exit
+    if(WIFEXITED(monitorStatus)){
+      returnStatus =  1;
+    }
+    else{
+      returnStatus =  -1;
+    }
+
+    return returnStatus;
+}
\ No newline at end of file
diff --git a/Project_Test/src/Tests.cpp b/Project_Test/src/Tests.cpp
new file mode 100755
index 0000000..72040aa
--- /dev/null
+++ b/Project_Test/src/Tests.cpp
@@ -0,0 +1,1211 @@
+#include "../include/Tests.h"
+#include "../include/ProjectTest.h"
+#include <iostream>
+#include <typeinfo>
+#include <fstream>
+#include <math.h>
+#include <sstream>
+#include <unistd.h>
+#include <stdio.h>
+#include <string.h>
+#include <signal.h>
+#include <vector>
+
+using std::vector;
+using std::streambuf;
+using std::istringstream;
+using std::to_string;
+using std::cout;
+using std::sprintf;
+using std::complex;
+using std::ifstream;
+using std::stringstream;
+
+#define RED   "\e[38;5;196m"
+#define GRN   "\e[38;5;082m"
+#define YEL   "\e[38;5;226m"
+#define MAG   "\e[38;5;201m"
+#define RESET "\e[0m"
+
+// Defining Global Variables
+vector<string> testsInputs;
+vector<string> testsExpected;
+vector<vector<string>> testsUserPrograms;
+vector<string> testsHints;
+
+std::stringstream ss;
+std::streambuf *old_buf;
+int abortExecution = 0;
+extern int timeForSmallTest;
+extern int testToExecute;
+
+// Initializing before execution of tests
+void Initialize()
+{ 
+  //change the underlying cout buffer and save the old buffer
+  old_buf = std::cout.rdbuf(ss.rdbuf());
+
+  // Catching signal
+  signal(SIGINT,sigintHandler);
+}
+
+// Finialize after execution of tests
+void Finialize()
+{   
+    // Restoring signal behaviour
+    signal(SIGINT,SIG_DFL);
+
+    // Restoring cout buffer
+    std::cout.rdbuf(old_buf);
+
+    // Printing cout output
+    std::string text_output = ss.str();
+    std::cout << text_output;
+}
+
+// Initializing tests to be executed
+void InitializingTests()
+{
+    /* ### Example of use ###
+
+     testsFunctions.push_back();
+
+    */
+
+    // Initializing tests to be executed
+    testsFunctions.push_back(Operating_System_Test);
+
+    // Defining tests
+    string test_0_Input = R"V0G0N(
+usertests
+)V0G0N";
+    string test_0_Expected = "#ALL TESTS PASSED"; 
+    vector<string> test_0_UserPrograms = {"usertests","quitXV6"};
+    string test_0_Hint = "General problem with xv6 due to changes made to it."; 
+
+    string test_1_Input = R"V0G0N(
+forktest
+    )V0G0N";
+    string test_1_Expected = R"V0G0N(
+$ fork test
+fork test OK
+$ $ Finished Yehonatan Peleg Test, quiting...
+)V0G0N";
+    vector<string> test_1_UserPrograms = {"quitXV6"};
+    string test_1_Hint = "General problem with xv6 due to changes made to it.";
+
+    string test_2_Input = R"V0G0N(
+pathTest
+helloW
+pathTest1
+helloW
+pathTest2.1
+helloW
+pathTest2.2
+helloW
+pathTest3
+helloW
+    )V0G0N";
+    string test_2_Expected = "+3Hello World XV6";
+    vector<string> test_2_UserPrograms = {"helloW","pathTest","pathTest1","quitXV6",
+                                          "pathTest2.1","pathTest2.2","pathTest3"};
+    string test_2_Hint = "Problem with the implementation of task1: Path environment variable.";
+
+    string test_3_Input = R"V0G0N(
+exitWait
+    )V0G0N";
+    string test_3_Expected = R"V0G0N(
+$ 1 child exit status is: 1
+2 child exit status is: 2
+3 child exit status is: 3
+4 child exit status is: 4
+5 child exit status is: 5
+6 child exit status is: 6
+7 child exit status is unknown
+$ $ Finished Yehonatan Peleg Test, quiting...
+    )V0G0N";;
+    vector<string> test_3_UserPrograms = {"exitWait","detachTest","quitXV6"};
+    string test_3_Hint = "Problem with the implementation of task2: Exit and wait do not funtion properly.";
+
+    string test_4_Input = R"V0G0N(
+detachTest
+    )V0G0N";
+    string test_4_Expected = R"V0G0N(
+$ detach result for not my child is: -1
+detach result for child 1 is: 0
+detach result for child 2 is: 0
+detach result for child 3 is: 0
+detach result for child 4 is: 0
+detach result for child 5 is: 0
+detach result for child 6 is: 0
+detach result for not my child is: -1
+second detach result for child 1 is: -1
+second detach result for child 2 is: -1
+second detach result for child 3 is: -1
+second detach result for child 4 is: -1
+second detach result for child 5 is: -1
+second detach result for child 6 is: -1
+detach result for not my child is: -1
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+no child left to wait for
+$ $ Finished Yehonatan Peleg Test, quiting...
+    )V0G0N";;
+    vector<string> test_4_UserPrograms = {"exitWait","detachTest","quitXV6"};
+    string test_4_Hint = "Problem with the implementation of task2: Detach do not funtion properly.";
+
+    string test_5_Input = R"V0G0N(
+prioritySysTest
+policySysTest
+    )V0G0N";
+    string test_5_Expected = R"V0G0N(
+$ Calling priority system call with correct args
+Calling priority system call with correct args
+Calling priority system call with correct args
+Calling priority system call with correct args
+Calling priority system call with correct args
+Calling priority system call with correct args
+Calling priority system call with wrong args
+Calling priority system call with wrong args
+Calling priority system call with wrong args
+$ Calling priority system call with correct args
+Calling policy system call
+Calling priority system call with correct args
+Calling policy system call
+Calling priority system call with correct args
+Calling policy system call
+Calling priority system call with correct args
+Calling policy system call
+Calling priority system call with correct args
+Calling policy system call
+Calling priority system call with correct args
+Calling policy system call
+Calling policy system call
+Calling priority system call with correct args
+Calling priority system call with wrong args
+Calling policy system call
+Calling priority system call with wrong args
+Calling policy system call
+Calling priority system call with wrong args
+$ $ Finished Yehonatan Peleg Test, quiting...
+    )V0G0N";;
+    vector<string> test_5_UserPrograms = {"prioritySysTest","policySysTest","quitXV6"};
+    string test_5_Hint = "Problem with the implementation of task3: Priority or policy sys calls maybe crushes.";
+
+    string test_6_Input = R"V0G0N(
+schedulingTest1
+    )V0G0N";
+    string test_6_Expected = R"V0G0N(
+$ Initiating scheduling test, test should take approximately 30000 time quantums !!!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+$ $ Finished Yehonatan Peleg Test, quiting...
+    )V0G0N";;
+    vector<string> test_6_UserPrograms = {"schedulingTest1","quitXV6"};
+    string test_6_Hint = "Problem with the implementation of task3: Round Robin do not function properly. "
+                         " Maybe you forgot to insert a process to the queue after been killed.";
+
+    string test_7_Input = R"V0G0N(
+schedulingTest2
+    )V0G0N";
+    string test_7_Expected = R"V0G0N(
+$ Initiating scheduling test, test should take approximately 30000 time quantums !!!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+$ $ Finished Yehonatan Peleg Test, quiting...
+    )V0G0N";;
+    vector<string> test_7_UserPrograms = {"schedulingTest2","quitXV6"};
+    string test_7_Hint = "Problem with the implementation of task3: Priority Scheduling do not function properly. "
+                         " Maybe you forgot to insert a process to the queue after been killed.";
+
+    string test_8_Input = R"V0G0N(
+schedulingTest3
+    )V0G0N";
+    string test_8_Expected = R"V0G0N(
+$ Initiating scheduling test, test should take approximately 30000 time quantums !!!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+$ $ Finished Yehonatan Peleg Test, quiting...
+    )V0G0N";;
+    vector<string> test_8_UserPrograms = {"schedulingTest3","quitXV6"};
+    string test_8_Hint = "Problem with the implementation of task3: Extendedn Priority Scheduling do not function properly. "
+                         " Maybe you forgot to insert a process to the queue after been killed.";
+
+    string test_9_Input = R"V0G0N(
+schedulingTest4
+    )V0G0N";
+    string test_9_Expected = R"V0G0N(
+$ Initiating scheduling test, test should take approximately 30000 time quantums !!!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+$ $ Finished Yehonatan Peleg Test, quiting...
+    )V0G0N";;
+    vector<string> test_9_UserPrograms = {"schedulingTest4","quitXV6"};
+    string test_9_Hint = "Problem with the implementation of task3: Switching between scheduling policies do not function properly.";
+
+    string test_10_Input = R"V0G0N(
+schedulingTest5
+    )V0G0N";
+    string test_10_Expected = R"V0G0N(
+$ Initiating scheduling test, test should take approximately 30000 time quantums !!!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+$ $ Finished Yehonatan Peleg Test, quiting...
+    )V0G0N";;
+    vector<string> test_10_UserPrograms = {"schedulingTest5","quitXV6"};
+    string test_10_Hint = "Problem with the implementation of task3: Switching between scheduling policies do not function properly.";
+
+    string test_11_Input = R"V0G0N(
+schedulingTest6
+    )V0G0N";
+    string test_11_Expected = R"V0G0N(
+$ Initiating scheduling test, test should take approximately 30000 time quantums !!!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+$ $ Finished Yehonatan Peleg Test, quiting...
+    )V0G0N";;
+    vector<string> test_11_UserPrograms = {"schedulingTest6","quitXV6"};
+    string test_11_Hint = "Problem with the implementation of task3: Switching between scheduling policies do not function properly.";
+
+    string test_12_Input = R"V0G0N(
+schedulingTest7
+    )V0G0N";
+    string test_12_Expected = R"V0G0N(
+$ 11111111119999999999
+$ $ Finished Yehonatan Peleg Test, quiting...
+    )V0G0N";;
+    vector<string> test_12_UserPrograms = {"schedulingTest7","quitXV6"};
+    string test_12_Hint = "Problem with the implementation of task3: Priorites In Priority Scheduling do not function properly.";
+
+    string test_13_Input = R"V0G0N(
+schedulingTest8
+    )V0G0N";
+    string test_13_Expected = R"V0G0N(
+$ 11111111119999999999
+$ $ Finished Yehonatan Peleg Test, quiting...
+    )V0G0N";;
+    vector<string> test_13_UserPrograms = {"schedulingTest8","quitXV6"};
+    string test_13_Hint = "Problem with the implementation of task3: Priorites In Extended Priority Scheduling do not function properly.";
+
+    string test_14_Input = R"V0G0N(
+schedulingTest9
+    )V0G0N";
+    string test_14_Expected = R"V0G0N(
+$ 00000000009999999999
+$ $ Finished Yehonatan Peleg Test, quiting...
+    )V0G0N";;
+    vector<string> test_14_UserPrograms = {"schedulingTest9","quitXV6"};
+    string test_14_Hint = "Problem with the implementation of task3: Priorites In Extended Priority Scheduling do not function properly.";
+
+    string test_15_Input = R"V0G0N(
+schedulingTest10
+    )V0G0N";
+    string test_15_Expected = R"V0G0N(
+$ Initiating scheduling test, test should take approximately 15000 time quantums !!!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+$ $ Finished Yehonatan Peleg Test, quiting...
+    )V0G0N";;
+    vector<string> test_15_UserPrograms = {"schedulingTest10","quitXV6"};
+    string test_15_Hint = "Problem with the implementation of task3: Starvation In Extended Priority Scheduling.";
+
+    string test_16_Input = R"V0G0N(
+schedulingTest11
+    )V0G0N";
+    string test_16_Expected = R"V0G0N(
+$ Initiating scheduling test, test should take approximately 15000 time quantums !!!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+$ $ Finished Yehonatan Peleg Test, quiting...
+    )V0G0N";;
+    vector<string> test_16_UserPrograms = {"schedulingTest11","quitXV6"};
+    string test_16_Hint = "Problem with the implementation of task3: Starvation In Priority Scheduling."
+                          " Maybe you let setting priority 0 when priority 2 is selected.";
+
+    string test_17_Input = R"V0G0N(
+schedulingTest12
+    )V0G0N";
+    string test_17_Expected = R"V0G0N(
+$ Initiating scheduling test, test should take approximately 15000 time quantums !!!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+zombie!
+$ $ Finished Yehonatan Peleg Test, quiting...
+    )V0G0N";;
+    vector<string> test_17_UserPrograms = {"schedulingTest12","quitXV6"};
+    string test_17_Hint = "Problem with the implementation of task3: Starvation In Priority Scheduling."
+                          " Maybe you forgot to set priority to 1 of all priority 0 processes when switching from policy 3 to 2.";
+
+    string test_18_Input = R"V0G0N(
+schedulingTest13
+    )V0G0N";
+    string test_18_Expected = R"V0G0N(
+$ Initiating scheduling test, test should take approximately 10000 time quantums !!!
+ctime test 1 ok
+ctime test 2 ok
+ctime test 3 ok
+ctime test 4 ok
+ctime test 5 ok
+stime test 1 ok
+stime test 2 ok
+stime test 3 ok
+stime test 4 ok
+stime test 5 ok
+rutime test 1 ok
+rutime test 2 ok
+rutime test 3 ok
+rutime test 4 ok
+rutime test 5 ok
+ttime test 1 ok
+ttime test 2 ok
+ttime test 3 ok
+ttime test 4 ok
+ttime test 5 ok
+ttime test 6 ok
+ttime test 7 ok
+$ $ Finished Yehonatan Peleg Test, quiting...
+    )V0G0N";
+    vector<string> test_18_UserPrograms = {"schedulingTest13","quitXV6"};
+    string test_18_Hint = "Problem with the implementation of task3: Problem with the implementation of the performance data capture.";
+
+    string test_19_Input = R"V0G0N(
+pathTest
+pathTest4
+echo Hello_World_XV6 | cat
+pathTest5
+echo Hello_World_XV6 | cat
+    )V0G0N";
+    string test_19_Expected = "+1Hello_World_XV6";
+    vector<string> test_19_UserPrograms = {"pathTest","pathTest4","pathTest5","quitXV6"};
+    string test_19_Hint = "Problem with the implementation of task1: Path environment variable with pipes.";
+
+    string test_20_Input = R"V0G0N(
+policy 1
+echo "policy 1"
+policy 3
+echo "policy 3"
+policy 2
+echo "policy 2"
+    )V0G0N";
+    string test_20_Expected = R"V0G0N(
+$ $ "policy 1"
+$ $ "policy 3"
+$ $ "policy 2"
+$ $ Finished Yehonatan Peleg Test, quiting...
+    )V0G0N";
+    vector<string> test_20_UserPrograms = {"quitXV6"};
+    string test_20_Hint = "Problem with the implementation of task3: User program policy dosen't work.";
+
+    // Adding Tests inputs and expected
+    testsInputs.push_back(test_0_Input);
+    testsExpected.push_back(test_0_Expected);
+    testsUserPrograms.push_back(test_0_UserPrograms);
+    testsHints.push_back(test_0_Hint);
+
+    testsInputs.push_back(test_1_Input);
+    testsExpected.push_back(test_1_Expected);
+    testsUserPrograms.push_back(test_1_UserPrograms);
+    testsHints.push_back(test_1_Hint);
+
+    testsInputs.push_back(test_2_Input);
+    testsExpected.push_back(test_2_Expected);
+    testsUserPrograms.push_back(test_2_UserPrograms);
+    testsHints.push_back(test_2_Hint);
+
+    testsInputs.push_back(test_3_Input);
+    testsExpected.push_back(test_3_Expected);
+    testsUserPrograms.push_back(test_3_UserPrograms);
+    testsHints.push_back(test_3_Hint);
+
+    testsInputs.push_back(test_4_Input);
+    testsExpected.push_back(test_4_Expected);
+    testsUserPrograms.push_back(test_4_UserPrograms);
+    testsHints.push_back(test_4_Hint);
+
+    testsInputs.push_back(test_5_Input);
+    testsExpected.push_back(test_5_Expected);
+    testsUserPrograms.push_back(test_5_UserPrograms);
+    testsHints.push_back(test_5_Hint);
+
+    testsInputs.push_back(test_6_Input);
+    testsExpected.push_back(test_6_Expected);
+    testsUserPrograms.push_back(test_6_UserPrograms);
+    testsHints.push_back(test_6_Hint);
+
+    testsInputs.push_back(test_7_Input);
+    testsExpected.push_back(test_7_Expected);
+    testsUserPrograms.push_back(test_7_UserPrograms);
+    testsHints.push_back(test_7_Hint);
+
+    testsInputs.push_back(test_8_Input);
+    testsExpected.push_back(test_8_Expected);
+    testsUserPrograms.push_back(test_8_UserPrograms);
+    testsHints.push_back(test_8_Hint);
+
+    testsInputs.push_back(test_9_Input);
+    testsExpected.push_back(test_9_Expected);
+    testsUserPrograms.push_back(test_9_UserPrograms);
+    testsHints.push_back(test_9_Hint);
+
+    testsInputs.push_back(test_10_Input);
+    testsExpected.push_back(test_10_Expected);
+    testsUserPrograms.push_back(test_10_UserPrograms);
+    testsHints.push_back(test_10_Hint);
+
+    testsInputs.push_back(test_11_Input);
+    testsExpected.push_back(test_11_Expected);
+    testsUserPrograms.push_back(test_11_UserPrograms);
+    testsHints.push_back(test_11_Hint);
+
+    testsInputs.push_back(test_12_Input);
+    testsExpected.push_back(test_12_Expected);
+    testsUserPrograms.push_back(test_12_UserPrograms);
+    testsHints.push_back(test_12_Hint);
+
+    testsInputs.push_back(test_13_Input);
+    testsExpected.push_back(test_13_Expected);
+    testsUserPrograms.push_back(test_13_UserPrograms);
+    testsHints.push_back(test_13_Hint);
+
+    testsInputs.push_back(test_14_Input);
+    testsExpected.push_back(test_14_Expected);
+    testsUserPrograms.push_back(test_14_UserPrograms);
+    testsHints.push_back(test_14_Hint);
+
+    testsInputs.push_back(test_15_Input);
+    testsExpected.push_back(test_15_Expected);
+    testsUserPrograms.push_back(test_15_UserPrograms);
+    testsHints.push_back(test_15_Hint);
+
+    testsInputs.push_back(test_16_Input);
+    testsExpected.push_back(test_16_Expected);
+    testsUserPrograms.push_back(test_16_UserPrograms);
+    testsHints.push_back(test_16_Hint);
+
+    testsInputs.push_back(test_17_Input);
+    testsExpected.push_back(test_17_Expected);
+    testsUserPrograms.push_back(test_17_UserPrograms);
+    testsHints.push_back(test_17_Hint);
+
+    testsInputs.push_back(test_18_Input);
+    testsExpected.push_back(test_18_Expected);
+    testsUserPrograms.push_back(test_18_UserPrograms);
+    testsHints.push_back(test_18_Hint);
+
+    testsInputs.push_back(test_19_Input);
+    testsExpected.push_back(test_19_Expected);
+    testsUserPrograms.push_back(test_19_UserPrograms);
+    testsHints.push_back(test_19_Hint);
+
+    testsInputs.push_back(test_20_Input);
+    testsExpected.push_back(test_20_Expected);
+    testsUserPrograms.push_back(test_20_UserPrograms);
+    testsHints.push_back(test_20_Hint);
+}
+
+/* ### Example of use ###
+
+// Executing DEMO_TEST
+void DEMO_TEST()
+{
+  // Initializing
+  currentTestName = DEMO_TEST
+
+  // Testing
+
+  test(0,"got","expected");
+
+  try
+  {
+    test(1,"maybe exception will be thrwon from here,"$$$ ASSERT_THROWN_EXCEPTIONS $$$");
+  }
+  catch (ExceptionType exp)
+  {
+    test("","$$$ DECLARE GOOD TEST $$$");
+  }
+
+}
+*/
+
+// Processing test
+bool procceseTest(string testName,unsigned int testNumber){
+    // Initializing 
+    string testBaseFolder = "Tests/" + testName;
+    string testFolder = "./Project_Test/" + testBaseFolder;
+    string testInputFileName = "/testInput.txt";
+    string testOutputFileName = "/testOutput.txt";
+    string testMakefileErrorFileName = "/makefileError.txt";
+    string testMakefileCommandFileName = "/makefileCommandForDebug.txt";
+    string testsExpectedFileName = "/testExpected.txt";
+    int testCompletedFlag;
+
+    // Creating XV6 Tests Folder
+    createXV6_TestMakefile(testBaseFolder + "/Makefile",testsUserPrograms.at(testNumber));
+
+    // Executing test
+    string makefileCommand = "make --makefile=" + testFolder +  "/Makefile clean qemu ";
+    string test_command = "cd .. && " + makefileCommand + " -s < " + testFolder + testInputFileName;
+    string got_test = GetStdoutFromCommandAsync(test_command,"Finished Yehonatan Peleg Test, quiting...",timeForSmallTest,testCompletedFlag);    
+    
+    // Creating Test Makefile command
+    std::ofstream outCommand(testBaseFolder + testMakefileCommandFileName);
+    outCommand << makefileCommand;
+    outCommand.close();
+
+    // Processing test output
+    got_test = processTestOutput(got_test);
+
+    // Writing test output to file
+    std::ofstream out(testBaseFolder + testOutputFileName);
+    out << got_test;
+    out.close();
+
+    // Retrieving test hint 
+    string test_hint = testsHints.at(testNumber);
+
+    // Asserting test completed
+    if(testCompletedFlag == 1){
+        // Retrieving test expected
+        string expected_test = processCompareString(testsExpected.at(testNumber));
+
+        if(expected_test.at(0) == '#'){
+          if(got_test.find(expected_test.substr(1)) != std::string::npos){
+              test(testNumber,"","$$$ DECLARE GOOD TEST $$$");
+          }
+          else{
+              test(testNumber,got_test,"Output should have contain this: \n" + expected_test,vector<string>{"String value with /n",test_hint});
+          }
+          
+        }
+        else if(expected_test.at(0) == '+'){
+            if(countSubStr(got_test,expected_test.substr(2)) == (expected_test.at(1) - '0')){
+                test(testNumber,"","$$$ DECLARE GOOD TEST $$$");
+            }
+            else{
+               test(testNumber,got_test,"Output should have contain this: \n" + expected_test.substr(2) + "\n" + 
+                    expected_test.at(1) + " times",vector<string>{"String value with /n",test_hint});
+            }
+        }
+        else{
+            test(testNumber,got_test,expected_test,vector<string>{"String value with /n",test_hint});
+        }
+    }
+    else if(testCompletedFlag == 0){
+      // Creating Test Expected
+      std::ofstream outError(testBaseFolder + testMakefileErrorFileName);
+      outError << got_test;
+      outError.close();
+
+      // Declaring Test Execution Ended With Timeout
+      test(testNumber,"$$$ SMALL TEST EXECUTION TIMED OUT $$$","",vector<string>{"",test_hint});
+    }
+    else{
+      // Declaring Test Execution Ended With Error
+      test(testNumber,"$$$ TEST EXECUTION ERROR $$$","");
+    }
+
+    return 0;
+}
+
+// Running specific test
+void runSpecificTest(int testToExecute){
+    // Initializing
+    string test_name = "test_" + std::to_string(testToExecute);
+  
+    // Declaring specific test is running
+    printf("Running ");
+    printf("test_");
+    printf("%d for specific test request\n\n",testToExecute);
+
+    // Runnig specific test
+    procceseTest(test_name,testToExecute);
+}
+
+// Creating Tests
+unsigned int CreateTests()
+{
+  // Creating Tests Folder
+  string createTestFolderCommand = "rm -rf Tests && mkdir Tests";
+  string got_createTestFolder = GetStdoutFromCommand(createTestFolderCommand);
+
+   // Creating Tests
+  for(unsigned int i = 0;i < testsInputs.size();i++)
+  { 
+    // Retrieving current test to create
+    string currentTestInput = testsInputs.at(i);
+    string currentTestExpected = testsExpected.at(i);
+
+    // Defining Test Folder
+    string testFolder = "./Tests/test_" + std::to_string(i);
+    string testFile = testFolder + "/" + "testInput" + ".txt";
+    string testExpectedFile = testFolder + "/" + "testExpected" + ".txt";
+
+    // Creating Current Test Files  
+    string createTestsFilesCommand = "mkdir " + testFolder + " && touch " + testFile;
+    string got_createTestsFilesCommand  = GetStdoutFromCommand(createTestsFilesCommand );
+
+    // Creating Test Input
+    std::ofstream outInput(testFile);
+    outInput << currentTestInput + "\nquitXV6\n";
+    outInput.close();
+
+    // Creating Test Expected
+    std::ofstream outExpected(testExpectedFile);
+    outExpected << processCompareString(currentTestExpected);
+    outExpected.close();
+  }
+
+  return testsInputs.size();
+}
+
+// Signal handler for SIGINT
+void sigintHandler(int num){
+    abortExecution = 1;
+
+    // Catching signal
+    signal(SIGINT,sigintHandler);
+}
+
+// Processing test output
+string processTestOutput(string output){
+  // Serching for start of test code
+  unsigned int inputStartPos = output.find("$",0);
+
+  // Returning test code
+  if(inputStartPos < output.length() && inputStartPos >= 0){
+      return processCompareString(output.substr(inputStartPos,output.length())); 
+  }
+  else{
+      return output;
+  }
+}
+
+// Processing compare string, i.e removing spaces from edges
+string processCompareString(string str){
+    // Initializing
+    int start = -1;
+    int end = -1;
+
+    // Retrieving location of first space from start
+    for(unsigned int i = 0;i < str.length();i++){
+      if(str.at(i) > 32){
+        start = i;
+        break;
+      }
+    }
+
+    // Retrieving location of first space from end
+    for(unsigned int i = str.length() - 1;i >= 0;i--){
+      if(str.at(i) > 32){
+        end = i;
+        break;
+      }
+    }
+
+    // Asserting there are spaces at the edegs and if so removing them
+    if(start == -1 || end == -1){
+      return str;
+    }
+    else{
+      return str.substr(start,end - start + 1);
+    }
+
+}
+
+// Creating XV6 Tests Makefile
+void createXV6_TestMakefile(string makefilePath,vector<string> userspacePrograms){
+    // Initializing
+    string data;
+    FILE * stream = fopen("../Makefile","r");
+    const int max_buffer = 4000;
+    char buffer[max_buffer];
+    string xv6TestsBaseFolder = "XV6_Tests/";
+    string xv6TestsQEMUFolder = "./Project_Test/" + xv6TestsBaseFolder;
+    string userSpaceProgramMakeCode =  
+  "_%: ulib.o usys.o printf.o umalloc.o\n" 
+  "\tgcc -fno-pic -std=gnu99 -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -march=i686 -Werror -fno-omit-frame-pointer " 
+  "\t-fno-stack-protector -fno-pie -no-pie -fno-pic -static " 
+	"\t-fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -march=i686 -Werror -fno-omit-frame-pointer -fno-stack-protector -fno-pie -no-pie  -c -o %.o #.c\n" 
+ "\tld -m    elf_i386 -N -e main -Ttext 0 -o _% %.o ulib.o usys.o printf.o umalloc.o\n" 
+	"\tobjdump -S _% > %.asm\n" 
+	"\t$(OBJDUMP) -t _% | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > %.sym\n";
+
+    // Reading project makefile and adding tests user space programs
+    // while code is for telling the makefile to include these user space programs
+    while (!feof(stream))
+    { 
+      // Reading line of test output
+      if (fgets(buffer, max_buffer, stream) != NULL){
+          if(strstr(buffer,"UPROGS=\\")){
+              data.append("UPROGS=  " + processAppendMakefileUPROGS(userspacePrograms));
+          }
+          else{
+              data.append(buffer);
+          }
+      }
+     
+    }
+
+    // Adding build commands for each user space program
+    for (vector<string>::iterator it = userspacePrograms.begin() ; it != userspacePrograms.end(); ++it){
+      string temp = replaceInString(userSpaceProgramMakeCode,'%',*it) + "\n";
+      data.append(replaceInString(temp,'#',xv6TestsQEMUFolder + *it));
+    }
+    
+    // Creating Tests Makefile
+    std::ofstream outMakefile(makefilePath);
+    outMakefile << data;
+    outMakefile.close();
+}
+
+// Processing user space programs and creating an entry for each one 
+// inorder to take the makefile of the xv6 to include them
+string processAppendMakefileUPROGS(vector<string> append){
+    // Initializinh
+    string result;
+
+    // Creating entries
+    for (vector<string>::iterator it = append.begin() ; it != append.end(); ++it){
+      result.append("_" + *it + "\\\n");
+    }
+
+    return result;
+}
+
+// Replacing all occurences of toReplace char with replaceWith string in str
+string replaceInString(string str,char toReplace,string replaceWith){
+    // Initializing
+    string result;
+
+    // Replacing
+    for (string::iterator it=str.begin(); it!=str.end(); ++it){
+        if(*it == toReplace){
+          result.append(replaceWith);
+        }
+        else{
+          result.append(1,*it);
+        }
+    }
+
+    return result;
+}
+
+// Finding number of occurences of substr in string
+int countSubStr(string str,string findSubStr){
+    // Initializing
+    int occurrences = 0;
+    string::size_type pos = 0;
+
+    // Counting
+    while ((pos = str.find(findSubStr, pos)) != std::string::npos) {
+          ++occurrences;
+          pos += findSubStr.length();
+    }
+   
+   return occurrences;
+}
+
+// Executing Operating_System_Test
+void Operating_System_Test()
+{
+  // Initializing
+  currentTestName = "Operating_System_Test";
+  char arr[50];
+  memset(arr,' ',50);
+  arr[50] = 0;
+  int progress_index = 0;
+  int progress;
+  const char* no_error_progress = "\e[38;5;082m[%s]\e[38;5;226m%i%% %d/%d\r\e[0m";
+  const char* yes_error_progress = "\e[38;5;082m[%s]\e[38;5;196m%i%% %d/%d\r\e[0m";
+
+  // Creating Tests
+  unsigned int numberOfTests = CreateTests();
+  
+  // Running specific test if demanded
+  if(0 <=  testToExecute && ((unsigned int)testToExecute) < numberOfTests){
+      runSpecificTest(testToExecute);
+      return;
+  }
+  else if(testToExecute != -1){
+      printf("Specific test request was out of bounds(%d)\n\n",testToExecute);
+  }
+
+  // Printing initial progress
+  printf(no_error_progress,arr,0,0,numberOfTests);
+  fflush(stdout);
+
+  // Testing
+  for(unsigned int i = 0;i < numberOfTests;i++)
+  { 
+    // Testing
+    if(abortExecution == 0){
+      procceseTest("test_" + std::to_string(i),i);
+    }
+    else{
+      // Declaring test was aborted
+      cout << RED << std::endl << "Operating System Test Was Aborted With " << i << " Tests Executed Out Of " << numberOfTests << " !!!" << RESET << std::endl;
+      red = red + (numberOfTests - i);
+      break;
+    }
+
+    float float_index = (float)(i + 1);
+    progress = (float_index/numberOfTests) * 100;
+
+    // Updating progress 
+    if(progress > progress_index)
+    { 
+      progress_index += 1;
+      memset(arr,'#',(int)((float_index/numberOfTests) * 50));
+    }
+    
+    if(red == 0){
+      printf(no_error_progress,arr,progress,i+1,numberOfTests);
+    }
+    else{
+      printf(yes_error_progress,arr,progress,i+1,numberOfTests);
+    }
+    fflush(stdout);
+  }
+  
+  // Cleaning after progress bar
+  printf("%%\r                                                                          %%\r");
+}
diff --git a/Project_Test/src/temp.cpp b/Project_Test/src/temp.cpp
new file mode 100755
index 0000000..e69de29
diff --git a/ass1ds.cpp b/ass1ds.cpp
index b93fb11..17f54d4 100644
--- a/ass1ds.cpp
+++ b/ass1ds.cpp
@@ -2,9 +2,11 @@
 
 extern "C" {
 	char*                         kalloc();
+	void                          panic(char*) __attribute__((noreturn));
 	void*                         memset(void*, int, uint);
 	void                          initSchedDS();
 	long long                     getAccumulator(Proc *p);
+	long long                     __moddi3(long long number, long long divisor);
 
 	//for pq
 	static boolean                isEmptyPriorityQueue();
@@ -212,7 +214,7 @@ static MapNode* allocNode(Proc *p, long long key) {
 	if(!ans)
 		return null;
 
-	if(!ans->listOfProcs.enqueue(p)){
+	if(!ans->listOfProcs.enqueue(p)) {
 		deallocNode(ans);
 		return null;
 	}
@@ -305,14 +307,16 @@ bool LinkedList::transfer() {
 	if(!priorityQ->isEmpty())
 		return false;
 	
-	MapNode *node = allocNode(0);
-	if(!node)
-		return false;
-	
-	node->listOfProcs.first = first;
-	node->listOfProcs.last = last;
-	first = last = null;
-	priorityQ->root = node;
+	if(!isEmpty()) {
+		MapNode *node = allocNode(0);
+		if(!node)
+			return false;
+		
+		node->listOfProcs.first = first;
+		node->listOfProcs.last = last;
+		first = last = null;
+		priorityQ->root = node;
+	}
 	return true;
 }
 
@@ -459,3 +463,29 @@ bool Map::extractProc(Proc *p) {
 	root = tempMap.root;
 	return ans;
 }
+
+long long __moddi3(long long number, long long divisor) { //returns number%divisor
+	if(divisor == 0)
+		panic((char*)"divide by zero!!!\n");
+
+	bool isNumberNegative = false;
+	if(number < 0) {
+		number = -number;
+		isNumberNegative = true;
+	}
+
+	if(divisor < 0)
+		divisor = -divisor;
+
+	for(;;) {
+		long long divisor2 = divisor;
+		while(number >= divisor2) {
+			number -= divisor2;
+			if(divisor2 + divisor2 > 0) //exponential decay.
+				divisor2 += divisor2;
+		}
+
+		if(number < divisor)
+			return isNumberNegative ? -number : number;
+	}
+}
diff --git a/cat.c b/cat.c
index 5ddc820..ed1987d 100644
--- a/cat.c
+++ b/cat.c
@@ -12,12 +12,12 @@ cat(int fd)
   while((n = read(fd, buf, sizeof(buf))) > 0) {
     if (write(1, buf, n) != n) {
       printf(1, "cat: write error\n");
-      exit();
+      exit(0);
     }
   }
   if(n < 0){
     printf(1, "cat: read error\n");
-    exit();
+    exit(0);
   }
 }
 
@@ -28,16 +28,16 @@ main(int argc, char *argv[])
 
   if(argc <= 1){
     cat(0);
-    exit();
+    exit(0);
   }
 
   for(i = 1; i < argc; i++){
     if((fd = open(argv[i], 0)) < 0){
       printf(1, "cat: cannot open %s\n", argv[i]);
-      exit();
+      exit(0);
     }
     cat(fd);
     close(fd);
   }
-  exit();
+  exit(0);
 }
diff --git a/cmake-build-debug/Assignment1.cbp b/cmake-build-debug/Assignment1.cbp
new file mode 100644
index 0000000..7e378c4
--- /dev/null
+++ b/cmake-build-debug/Assignment1.cbp
@@ -0,0 +1,411 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<CodeBlocks_project_file>
+	<FileVersion major="1" minor="6"/>
+	<Project>
+		<Option title="Assignment1"/>
+		<Option makefile_is_custom="1"/>
+		<Option compiler="gcc"/>
+		<Option virtualFolders="CMake Files\;"/>
+		<Build>
+			<Target title="all">
+				<Option working_dir="/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug"/>
+				<Option type="4"/>
+				<MakeCommands>
+					<Build command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 all"/>
+					<CompileFile command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+				</MakeCommands>
+			</Target>
+			<Target title="rebuild_cache">
+				<Option working_dir="/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug"/>
+				<Option type="4"/>
+				<MakeCommands>
+					<Build command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 rebuild_cache"/>
+					<CompileFile command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+				</MakeCommands>
+			</Target>
+			<Target title="edit_cache">
+				<Option working_dir="/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug"/>
+				<Option type="4"/>
+				<MakeCommands>
+					<Build command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 edit_cache"/>
+					<CompileFile command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+				</MakeCommands>
+			</Target>
+			<Target title="Assignment1">
+				<Option output="/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Assignment1" prefix_auto="0" extension_auto="0"/>
+				<Option working_dir="/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug"/>
+				<Option object_output="./"/>
+				<Option type="1"/>
+				<Option compiler="gcc"/>
+				<Compiler>
+					<Add directory="/users/studs/bsc/2016/rosent/os192/Assignment1/."/>
+					<Add directory="/usr/include/c++/7"/>
+					<Add directory="/usr/include/x86_64-linux-gnu/c++/7"/>
+					<Add directory="/usr/include/c++/7/backward"/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/7/include"/>
+					<Add directory="/usr/local/include"/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed"/>
+					<Add directory="/usr/include/x86_64-linux-gnu"/>
+					<Add directory="/usr/include"/>
+				</Compiler>
+				<MakeCommands>
+					<Build command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 Assignment1"/>
+					<CompileFile command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+				</MakeCommands>
+			</Target>
+			<Target title="Assignment1/fast">
+				<Option output="/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Assignment1" prefix_auto="0" extension_auto="0"/>
+				<Option working_dir="/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug"/>
+				<Option object_output="./"/>
+				<Option type="1"/>
+				<Option compiler="gcc"/>
+				<Compiler>
+					<Add directory="/users/studs/bsc/2016/rosent/os192/Assignment1/."/>
+					<Add directory="/usr/include/c++/7"/>
+					<Add directory="/usr/include/x86_64-linux-gnu/c++/7"/>
+					<Add directory="/usr/include/c++/7/backward"/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/7/include"/>
+					<Add directory="/usr/local/include"/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed"/>
+					<Add directory="/usr/include/x86_64-linux-gnu"/>
+					<Add directory="/usr/include"/>
+				</Compiler>
+				<MakeCommands>
+					<Build command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 Assignment1/fast"/>
+					<CompileFile command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -j4 -f &quot;/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+				</MakeCommands>
+			</Target>
+		</Build>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/BUGS">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/LICENSE">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/Makefile">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/Notes">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/README">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/TRICKS">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/asm.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/ass1ds.cpp">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/ass1ds.hpp">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/bio.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/bootasm.S">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/bootmain.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/buf.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/cat.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Assignment1.cbp">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeCache.txt">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/Makefile">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/cmake_install.cmake">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/console.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/cuth">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/date.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/dot-bochsrc">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/echo.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/elf.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/entry.S">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/entryother.S">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/exec.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/fcntl.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/file.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/file.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/forktest.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/fs.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/fs.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/gdbutil">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/grep.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/ide.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/init.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/initcode.S">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/ioapic.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/kalloc.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/kbd.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/kbd.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/kernel.ld">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/kill.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/lapic.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/ln.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/log.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/ls.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/main.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/memide.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/mkdir.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/mkfs.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/mp.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/mp.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/param.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/picirq.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/pipe.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/policy.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/pr.pl">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/printf.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/printpcs">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/proc.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/rm.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/runoff">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/runoff.list">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/runoff.spec">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/runoff1">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/sanity.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/schedulinginterface.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/sh.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/show1">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/sign.pl">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/sleep1.p">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/spinp">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/stressfs.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/string.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/swtch.S">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/syscall.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/syscall.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/sysfile.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/sysproc.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/toc.ftr">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/toc.hdr">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/trap.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/trapasm.S">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/traps.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/types.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/uart.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/ulib.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/umalloc.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/user.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/usys.S">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/vectors.pl">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/vm.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/wc.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/zombie.c">
+			<Option target="Assignment1"/>
+		</Unit>
+		<Unit filename="/users/studs/bsc/2016/rosent/os192/Assignment1/CMakeLists.txt">
+			<Option virtualFolder="CMake Files\"/>
+		</Unit>
+	</Project>
+</CodeBlocks_project_file>
diff --git a/cmake-build-debug/CMakeCache.txt b/cmake-build-debug/CMakeCache.txt
new file mode 100644
index 0000000..026041a
--- /dev/null
+++ b/cmake-build-debug/CMakeCache.txt
@@ -0,0 +1,355 @@
+# This is the CMakeCache file.
+# For build in directory: /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug
+# It was generated by CMake: /users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake
+# You can edit this file to change values found and used by cmake.
+# If you do not want to change any of the values, simply exit the editor.
+# If you do want to change a value, simply edit, save, and exit the editor.
+# The syntax for the file is as follows:
+# KEY:TYPE=VALUE
+# KEY is the name of a variable in the cache.
+# TYPE is a hint to GUIs for the type of VALUE, DO NOT EDIT TYPE!.
+# VALUE is the current value for the KEY.
+
+########################
+# EXTERNAL cache entries
+########################
+
+//Value Computed by CMake
+Assignment1_BINARY_DIR:STATIC=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug
+
+//Value Computed by CMake
+Assignment1_SOURCE_DIR:STATIC=/users/studs/bsc/2016/rosent/os192/Assignment1
+
+//Path to a program.
+CMAKE_AR:FILEPATH=/usr/bin/ar
+
+//Choose the type of build, options are: None(CMAKE_CXX_FLAGS or
+// CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel.
+CMAKE_BUILD_TYPE:STRING=Debug
+
+//The CodeBlocks executable
+CMAKE_CODEBLOCKS_EXECUTABLE:FILEPATH=CMAKE_CODEBLOCKS_EXECUTABLE-NOTFOUND
+
+//Additional command line arguments when CodeBlocks invokes make.
+// Enter e.g. -j<some_number> to get parallel builds
+CMAKE_CODEBLOCKS_MAKE_ARGUMENTS:STRING=-j4
+
+//Enable/Disable color output during build.
+CMAKE_COLOR_MAKEFILE:BOOL=ON
+
+//CXX compiler
+CMAKE_CXX_COMPILER:FILEPATH=/usr/bin/c++
+
+//A wrapper around 'ar' adding the appropriate '--plugin' option
+// for the GCC compiler
+CMAKE_CXX_COMPILER_AR:FILEPATH=/usr/bin/gcc-ar-7
+
+//A wrapper around 'ranlib' adding the appropriate '--plugin' option
+// for the GCC compiler
+CMAKE_CXX_COMPILER_RANLIB:FILEPATH=/usr/bin/gcc-ranlib-7
+
+//Flags used by the compiler during all build types.
+CMAKE_CXX_FLAGS:STRING=
+
+//Flags used by the compiler during debug builds.
+CMAKE_CXX_FLAGS_DEBUG:STRING=-g
+
+//Flags used by the compiler during release builds for minimum
+// size.
+CMAKE_CXX_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG
+
+//Flags used by the compiler during release builds.
+CMAKE_CXX_FLAGS_RELEASE:STRING=-O3 -DNDEBUG
+
+//Flags used by the compiler during release builds with debug info.
+CMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG
+
+//C compiler
+CMAKE_C_COMPILER:FILEPATH=/usr/bin/cc
+
+//A wrapper around 'ar' adding the appropriate '--plugin' option
+// for the GCC compiler
+CMAKE_C_COMPILER_AR:FILEPATH=/usr/bin/gcc-ar-7
+
+//A wrapper around 'ranlib' adding the appropriate '--plugin' option
+// for the GCC compiler
+CMAKE_C_COMPILER_RANLIB:FILEPATH=/usr/bin/gcc-ranlib-7
+
+//Flags used by the compiler during all build types.
+CMAKE_C_FLAGS:STRING=
+
+//Flags used by the compiler during debug builds.
+CMAKE_C_FLAGS_DEBUG:STRING=-g
+
+//Flags used by the compiler during release builds for minimum
+// size.
+CMAKE_C_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG
+
+//Flags used by the compiler during release builds.
+CMAKE_C_FLAGS_RELEASE:STRING=-O3 -DNDEBUG
+
+//Flags used by the compiler during release builds with debug info.
+CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG
+
+//Flags used by the linker.
+CMAKE_EXE_LINKER_FLAGS:STRING=
+
+//Flags used by the linker during debug builds.
+CMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=
+
+//Flags used by the linker during release minsize builds.
+CMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=
+
+//Flags used by the linker during release builds.
+CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=
+
+//Flags used by the linker during Release with Debug Info builds.
+CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=
+
+//Enable/Disable output of compile commands during generation.
+CMAKE_EXPORT_COMPILE_COMMANDS:BOOL=OFF
+
+//Install path prefix, prepended onto install directories.
+CMAKE_INSTALL_PREFIX:PATH=/usr/local
+
+//Path to a program.
+CMAKE_LINKER:FILEPATH=/usr/bin/ld
+
+//Path to a program.
+CMAKE_MAKE_PROGRAM:FILEPATH=/usr/bin/make
+
+//Flags used by the linker during the creation of modules.
+CMAKE_MODULE_LINKER_FLAGS:STRING=
+
+//Flags used by the linker during debug builds.
+CMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=
+
+//Flags used by the linker during release minsize builds.
+CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=
+
+//Flags used by the linker during release builds.
+CMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=
+
+//Flags used by the linker during Release with Debug Info builds.
+CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=
+
+//Path to a program.
+CMAKE_NM:FILEPATH=/usr/bin/nm
+
+//Path to a program.
+CMAKE_OBJCOPY:FILEPATH=/usr/bin/objcopy
+
+//Path to a program.
+CMAKE_OBJDUMP:FILEPATH=/usr/bin/objdump
+
+//Value Computed by CMake
+CMAKE_PROJECT_NAME:STATIC=Assignment1
+
+//Path to a program.
+CMAKE_RANLIB:FILEPATH=/usr/bin/ranlib
+
+//Flags used by the linker during the creation of dll's.
+CMAKE_SHARED_LINKER_FLAGS:STRING=
+
+//Flags used by the linker during debug builds.
+CMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=
+
+//Flags used by the linker during release minsize builds.
+CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=
+
+//Flags used by the linker during release builds.
+CMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=
+
+//Flags used by the linker during Release with Debug Info builds.
+CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=
+
+//If set, runtime paths are not added when installing shared libraries,
+// but are added when building.
+CMAKE_SKIP_INSTALL_RPATH:BOOL=NO
+
+//If set, runtime paths are not added when using shared libraries.
+CMAKE_SKIP_RPATH:BOOL=NO
+
+//Flags used by the linker during the creation of static libraries.
+CMAKE_STATIC_LINKER_FLAGS:STRING=
+
+//Flags used by the linker during debug builds.
+CMAKE_STATIC_LINKER_FLAGS_DEBUG:STRING=
+
+//Flags used by the linker during release minsize builds.
+CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL:STRING=
+
+//Flags used by the linker during release builds.
+CMAKE_STATIC_LINKER_FLAGS_RELEASE:STRING=
+
+//Flags used by the linker during Release with Debug Info builds.
+CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO:STRING=
+
+//Path to a program.
+CMAKE_STRIP:FILEPATH=/usr/bin/strip
+
+//If this value is on, makefiles will be generated without the
+// .SILENT directive, and all commands will be echoed to the console
+// during the make.  This is useful for debugging only. With Visual
+// Studio IDE projects all commands are done without /nologo.
+CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE
+
+//Path to a program.
+ProcessorCount_cmd_getconf:FILEPATH=/usr/bin/getconf
+
+//Path to a program.
+ProcessorCount_cmd_sysctl:FILEPATH=/sbin/sysctl
+
+
+########################
+# INTERNAL cache entries
+########################
+
+//ADVANCED property for variable: CMAKE_AR
+CMAKE_AR-ADVANCED:INTERNAL=1
+//This is the directory where this CMakeCache.txt was created
+CMAKE_CACHEFILE_DIR:INTERNAL=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug
+//Major version of cmake used to create the current loaded cache
+CMAKE_CACHE_MAJOR_VERSION:INTERNAL=3
+//Minor version of cmake used to create the current loaded cache
+CMAKE_CACHE_MINOR_VERSION:INTERNAL=10
+//Patch version of cmake used to create the current loaded cache
+CMAKE_CACHE_PATCH_VERSION:INTERNAL=3
+//ADVANCED property for variable: CMAKE_COLOR_MAKEFILE
+CMAKE_COLOR_MAKEFILE-ADVANCED:INTERNAL=1
+//Path to CMake executable.
+CMAKE_COMMAND:INTERNAL=/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake
+//Path to cpack program executable.
+CMAKE_CPACK_COMMAND:INTERNAL=/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cpack
+//Path to ctest program executable.
+CMAKE_CTEST_COMMAND:INTERNAL=/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/ctest
+//ADVANCED property for variable: CMAKE_CXX_COMPILER
+CMAKE_CXX_COMPILER-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_CXX_COMPILER_AR
+CMAKE_CXX_COMPILER_AR-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_CXX_COMPILER_RANLIB
+CMAKE_CXX_COMPILER_RANLIB-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_CXX_FLAGS
+CMAKE_CXX_FLAGS-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_CXX_FLAGS_DEBUG
+CMAKE_CXX_FLAGS_DEBUG-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_CXX_FLAGS_MINSIZEREL
+CMAKE_CXX_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELEASE
+CMAKE_CXX_FLAGS_RELEASE-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELWITHDEBINFO
+CMAKE_CXX_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_C_COMPILER
+CMAKE_C_COMPILER-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_C_COMPILER_AR
+CMAKE_C_COMPILER_AR-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_C_COMPILER_RANLIB
+CMAKE_C_COMPILER_RANLIB-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_C_FLAGS
+CMAKE_C_FLAGS-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_C_FLAGS_DEBUG
+CMAKE_C_FLAGS_DEBUG-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_C_FLAGS_MINSIZEREL
+CMAKE_C_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_C_FLAGS_RELEASE
+CMAKE_C_FLAGS_RELEASE-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_C_FLAGS_RELWITHDEBINFO
+CMAKE_C_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
+//Executable file format
+CMAKE_EXECUTABLE_FORMAT:INTERNAL=ELF
+//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS
+CMAKE_EXE_LINKER_FLAGS-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_DEBUG
+CMAKE_EXE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_MINSIZEREL
+CMAKE_EXE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELEASE
+CMAKE_EXE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO
+CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_EXPORT_COMPILE_COMMANDS
+CMAKE_EXPORT_COMPILE_COMMANDS-ADVANCED:INTERNAL=1
+//Name of external makefile project generator.
+CMAKE_EXTRA_GENERATOR:INTERNAL=CodeBlocks
+//CXX compiler system defined macros
+CMAKE_EXTRA_GENERATOR_CXX_SYSTEM_DEFINED_MACROS:INTERNAL=__STDC__;1;__cplusplus;201402L;__STDC_UTF_16__;1;__STDC_UTF_32__;1;__STDC_HOSTED__;1;__GNUC__;7;__GNUC_MINOR__;3;__GNUC_PATCHLEVEL__; ;__VERSION__;"7.3.0";__ATOMIC_RELAXED; ;__ATOMIC_SEQ_CST;5;__ATOMIC_ACQUIRE;2;__ATOMIC_RELEASE;3;__ATOMIC_ACQ_REL;4;__ATOMIC_CONSUME;1;__pic__;2;__PIC__;2;__pie__;2;__PIE__;2;__FINITE_MATH_ONLY__; ;_LP64;1;__LP64__;1;__SIZEOF_INT__;4;__SIZEOF_LONG__;8;__SIZEOF_LONG_LONG__;8;__SIZEOF_SHORT__;2;__SIZEOF_FLOAT__;4;__SIZEOF_DOUBLE__;8;__SIZEOF_LONG_DOUBLE__;16;__SIZEOF_SIZE_T__;8;__CHAR_BIT__;8;__BIGGEST_ALIGNMENT__;16;__ORDER_LITTLE_ENDIAN__;1234;__ORDER_BIG_ENDIAN__;4321;__ORDER_PDP_ENDIAN__;3412;__BYTE_ORDER__;__ORDER_LITTLE_ENDIAN__;__FLOAT_WORD_ORDER__;__ORDER_LITTLE_ENDIAN__;__SIZEOF_POINTER__;8;__GNUG__;7;__SIZE_TYPE__;long unsigned int;__PTRDIFF_TYPE__;long int;__WCHAR_TYPE__;int;__WINT_TYPE__;unsigned int;__INTMAX_TYPE__;long int;__UINTMAX_TYPE__;long unsigned int;__CHAR16_TYPE__;short unsigned int;__CHAR32_TYPE__;unsigned int;__SIG_ATOMIC_TYPE__;int;__INT8_TYPE__;signed char;__INT16_TYPE__;short int;__INT32_TYPE__;int;__INT64_TYPE__;long int;__UINT8_TYPE__;unsigned char;__UINT16_TYPE__;short unsigned int;__UINT32_TYPE__;unsigned int;__UINT64_TYPE__;long unsigned int;__INT_LEAST8_TYPE__;signed char;__INT_LEAST16_TYPE__;short int;__INT_LEAST32_TYPE__;int;__INT_LEAST64_TYPE__;long int;__UINT_LEAST8_TYPE__;unsigned char;__UINT_LEAST16_TYPE__;short unsigned int;__UINT_LEAST32_TYPE__;unsigned int;__UINT_LEAST64_TYPE__;long unsigned int;__INT_FAST8_TYPE__;signed char;__INT_FAST16_TYPE__;long int;__INT_FAST32_TYPE__;long int;__INT_FAST64_TYPE__;long int;__UINT_FAST8_TYPE__;unsigned char;__UINT_FAST16_TYPE__;long unsigned int;__UINT_FAST32_TYPE__;long unsigned int;__UINT_FAST64_TYPE__;long unsigned int;__INTPTR_TYPE__;long int;__UINTPTR_TYPE__;long unsigned int;__has_include(STR);__has_include__(STR);__has_include_next(STR);__has_include_next__(STR);__GXX_WEAK__;1;__DEPRECATED;1;__GXX_RTTI;1;__cpp_rtti;199711;__GXX_EXPERIMENTAL_CXX0X__;1;__cpp_binary_literals;201304;__cpp_hex_float;201603;__cpp_runtime_arrays;198712;__cpp_unicode_characters;200704;__cpp_raw_strings;200710;__cpp_unicode_literals;200710;__cpp_user_defined_literals;200809;__cpp_lambdas;200907;__cpp_range_based_for;200907;__cpp_static_assert;200410;__cpp_decltype;200707;__cpp_attributes;200809;__cpp_rvalue_reference;200610;__cpp_rvalue_references;200610;__cpp_variadic_templates;200704;__cpp_initializer_lists;200806;__cpp_delegating_constructors;200604;__cpp_nsdmi;200809;__cpp_inheriting_constructors;201511;__cpp_ref_qualifiers;200710;__cpp_alias_templates;200704;__cpp_return_type_deduction;201304;__cpp_init_captures;201304;__cpp_generic_lambdas;201304;__cpp_constexpr;201304;__cpp_decltype_auto;201304;__cpp_aggregate_nsdmi;201304;__cpp_variable_templates;201304;__cpp_digit_separators;201309;__cpp_sized_deallocation;201309;__cpp_threadsafe_static_init;200806;__EXCEPTIONS;1;__cpp_exceptions;199711;__GXX_ABI_VERSION;1011;__SCHAR_MAX__;0x7f;__SHRT_MAX__;0x7fff;__INT_MAX__;0x7fffffff;__LONG_MAX__;0x7fffffffffffffffL;__LONG_LONG_MAX__;0x7fffffffffffffffLL;__WCHAR_MAX__;0x7fffffff;__WCHAR_MIN__;(-__WCHAR_MAX__ - 1);__WINT_MAX__;0xffffffffU;__WINT_MIN__;0U;__PTRDIFF_MAX__;0x7fffffffffffffffL;__SIZE_MAX__;0xffffffffffffffffUL;__SCHAR_WIDTH__;8;__SHRT_WIDTH__;16;__INT_WIDTH__;32;__LONG_WIDTH__;64;__LONG_LONG_WIDTH__;64;__WCHAR_WIDTH__;32;__WINT_WIDTH__;32;__PTRDIFF_WIDTH__;64;__SIZE_WIDTH__;64;__GLIBCXX_TYPE_INT_N_0;__int128;__GLIBCXX_BITSIZE_INT_N_0;128;__INTMAX_MAX__;0x7fffffffffffffffL;__INTMAX_C(c);c ## L;__UINTMAX_MAX__;0xffffffffffffffffUL;__UINTMAX_C(c);c ## UL;__INTMAX_WIDTH__;64;__SIG_ATOMIC_MAX__;0x7fffffff;__SIG_ATOMIC_MIN__;(-__SIG_ATOMIC_MAX__ - 1);__SIG_ATOMIC_WIDTH__;32;__INT8_MAX__;0x7f;__INT16_MAX__;0x7fff;__INT32_MAX__;0x7fffffff;__INT64_MAX__;0x7fffffffffffffffL;__UINT8_MAX__;0xff;__UINT16_MAX__;0xffff;__UINT32_MAX__;0xffffffffU;__UINT64_MAX__;0xffffffffffffffffUL;__INT_LEAST8_MAX__;0x7f;__INT8_C(c);c;__INT_LEAST8_WIDTH__;8;__INT_LEAST16_MAX__;0x7fff;__INT16_C(c);c;__INT_LEAST16_WIDTH__;16;__INT_LEAST32_MAX__;0x7fffffff;__INT32_C(c);c;__INT_LEAST32_WIDTH__;32;__INT_LEAST64_MAX__;0x7fffffffffffffffL;__INT64_C(c);c ## L;__INT_LEAST64_WIDTH__;64;__UINT_LEAST8_MAX__;0xff;__UINT8_C(c);c;__UINT_LEAST16_MAX__;0xffff;__UINT16_C(c);c;__UINT_LEAST32_MAX__;0xffffffffU;__UINT32_C(c);c ## U;__UINT_LEAST64_MAX__;0xffffffffffffffffUL;__UINT64_C(c);c ## UL;__INT_FAST8_MAX__;0x7f;__INT_FAST8_WIDTH__;8;__INT_FAST16_MAX__;0x7fffffffffffffffL;__INT_FAST16_WIDTH__;64;__INT_FAST32_MAX__;0x7fffffffffffffffL;__INT_FAST32_WIDTH__;64;__INT_FAST64_MAX__;0x7fffffffffffffffL;__INT_FAST64_WIDTH__;64;__UINT_FAST8_MAX__;0xff;__UINT_FAST16_MAX__;0xffffffffffffffffUL;__UINT_FAST32_MAX__;0xffffffffffffffffUL;__UINT_FAST64_MAX__;0xffffffffffffffffUL;__INTPTR_MAX__;0x7fffffffffffffffL;__INTPTR_WIDTH__;64;__UINTPTR_MAX__;0xffffffffffffffffUL;__GCC_IEC_559;2;__GCC_IEC_559_COMPLEX;2;__FLT_EVAL_METHOD__; ;__FLT_EVAL_METHOD_TS_18661_3__; ;__DEC_EVAL_METHOD__;2;__FLT_RADIX__;2;__FLT_MANT_DIG__;24;__FLT_DIG__;6;__FLT_MIN_EXP__;(-125);__FLT_MIN_10_EXP__;(-37);__FLT_MAX_EXP__;128;__FLT_MAX_10_EXP__;38;__FLT_DECIMAL_DIG__;9;__FLT_MAX__;3.40282346638528859811704183484516925e+38F;__FLT_MIN__;1.17549435082228750796873653722224568e-38F;__FLT_EPSILON__;1.19209289550781250000000000000000000e-7F;__FLT_DENORM_MIN__;1.40129846432481707092372958328991613e-45F;__FLT_HAS_DENORM__;1;__FLT_HAS_INFINITY__;1;__FLT_HAS_QUIET_NAN__;1;__DBL_MANT_DIG__;53;__DBL_DIG__;15;__DBL_MIN_EXP__;(-1021);__DBL_MIN_10_EXP__;(-307);__DBL_MAX_EXP__;1024;__DBL_MAX_10_EXP__;308;__DBL_DECIMAL_DIG__;17;__DBL_MAX__;double(1.79769313486231570814527423731704357e+308L);__DBL_MIN__;double(2.22507385850720138309023271733240406e-308L);__DBL_EPSILON__;double(2.22044604925031308084726333618164062e-16L);__DBL_DENORM_MIN__;double(4.94065645841246544176568792868221372e-324L);__DBL_HAS_DENORM__;1;__DBL_HAS_INFINITY__;1;__DBL_HAS_QUIET_NAN__;1;__LDBL_MANT_DIG__;64;__LDBL_DIG__;18;__LDBL_MIN_EXP__;(-16381);__LDBL_MIN_10_EXP__;(-4931);__LDBL_MAX_EXP__;16384;__LDBL_MAX_10_EXP__;4932;__DECIMAL_DIG__;21;__LDBL_DECIMAL_DIG__;21;__LDBL_MAX__;1.18973149535723176502126385303097021e+4932L;__LDBL_MIN__;3.36210314311209350626267781732175260e-4932L;__LDBL_EPSILON__;1.08420217248550443400745280086994171e-19L;__LDBL_DENORM_MIN__;3.64519953188247460252840593361941982e-4951L;__LDBL_HAS_DENORM__;1;__LDBL_HAS_INFINITY__;1;__LDBL_HAS_QUIET_NAN__;1;__FLT32_MANT_DIG__;24;__FLT32_DIG__;6;__FLT32_MIN_EXP__;(-125);__FLT32_MIN_10_EXP__;(-37);__FLT32_MAX_EXP__;128;__FLT32_MAX_10_EXP__;38;__FLT32_DECIMAL_DIG__;9;__FLT32_MAX__;3.40282346638528859811704183484516925e+38F32;__FLT32_MIN__;1.17549435082228750796873653722224568e-38F32;__FLT32_EPSILON__;1.19209289550781250000000000000000000e-7F32;__FLT32_DENORM_MIN__;1.40129846432481707092372958328991613e-45F32;__FLT32_HAS_DENORM__;1;__FLT32_HAS_INFINITY__;1;__FLT32_HAS_QUIET_NAN__;1;__FLT64_MANT_DIG__;53;__FLT64_DIG__;15;__FLT64_MIN_EXP__;(-1021);__FLT64_MIN_10_EXP__;(-307);__FLT64_MAX_EXP__;1024;__FLT64_MAX_10_EXP__;308;__FLT64_DECIMAL_DIG__;17;__FLT64_MAX__;1.79769313486231570814527423731704357e+308F64;__FLT64_MIN__;2.22507385850720138309023271733240406e-308F64;__FLT64_EPSILON__;2.22044604925031308084726333618164062e-16F64;__FLT64_DENORM_MIN__;4.94065645841246544176568792868221372e-324F64;__FLT64_HAS_DENORM__;1;__FLT64_HAS_INFINITY__;1;__FLT64_HAS_QUIET_NAN__;1;__FLT128_MANT_DIG__;113;__FLT128_DIG__;33;__FLT128_MIN_EXP__;(-16381);__FLT128_MIN_10_EXP__;(-4931);__FLT128_MAX_EXP__;16384;__FLT128_MAX_10_EXP__;4932;__FLT128_DECIMAL_DIG__;36;__FLT128_MAX__;1.18973149535723176508575932662800702e+4932F128;__FLT128_MIN__;3.36210314311209350626267781732175260e-4932F128;__FLT128_EPSILON__;1.92592994438723585305597794258492732e-34F128;__FLT128_DENORM_MIN__;6.47517511943802511092443895822764655e-4966F128;__FLT128_HAS_DENORM__;1;__FLT128_HAS_INFINITY__;1;__FLT128_HAS_QUIET_NAN__;1;__FLT32X_MANT_DIG__;53;__FLT32X_DIG__;15;__FLT32X_MIN_EXP__;(-1021);__FLT32X_MIN_10_EXP__;(-307);__FLT32X_MAX_EXP__;1024;__FLT32X_MAX_10_EXP__;308;__FLT32X_DECIMAL_DIG__;17;__FLT32X_MAX__;1.79769313486231570814527423731704357e+308F32x;__FLT32X_MIN__;2.22507385850720138309023271733240406e-308F32x;__FLT32X_EPSILON__;2.22044604925031308084726333618164062e-16F32x;__FLT32X_DENORM_MIN__;4.94065645841246544176568792868221372e-324F32x;__FLT32X_HAS_DENORM__;1;__FLT32X_HAS_INFINITY__;1;__FLT32X_HAS_QUIET_NAN__;1;__FLT64X_MANT_DIG__;64;__FLT64X_DIG__;18;__FLT64X_MIN_EXP__;(-16381);__FLT64X_MIN_10_EXP__;(-4931);__FLT64X_MAX_EXP__;16384;__FLT64X_MAX_10_EXP__;4932;__FLT64X_DECIMAL_DIG__;21;__FLT64X_MAX__;1.18973149535723176502126385303097021e+4932F64x;__FLT64X_MIN__;3.36210314311209350626267781732175260e-4932F64x;__FLT64X_EPSILON__;1.08420217248550443400745280086994171e-19F64x;__FLT64X_DENORM_MIN__;3.64519953188247460252840593361941982e-4951F64x;__FLT64X_HAS_DENORM__;1;__FLT64X_HAS_INFINITY__;1;__FLT64X_HAS_QUIET_NAN__;1;__DEC32_MANT_DIG__;7;__DEC32_MIN_EXP__;(-94);__DEC32_MAX_EXP__;97;__DEC32_MIN__;1E-95DF;__DEC32_MAX__;9.999999E96DF;__DEC32_EPSILON__;1E-6DF;__DEC32_SUBNORMAL_MIN__;0.000001E-95DF;__DEC64_MANT_DIG__;16;__DEC64_MIN_EXP__;(-382);__DEC64_MAX_EXP__;385;__DEC64_MIN__;1E-383DD;__DEC64_MAX__;9.999999999999999E384DD;__DEC64_EPSILON__;1E-15DD;__DEC64_SUBNORMAL_MIN__;0.000000000000001E-383DD;__DEC128_MANT_DIG__;34;__DEC128_MIN_EXP__;(-6142);__DEC128_MAX_EXP__;6145;__DEC128_MIN__;1E-6143DL;__DEC128_MAX__;9.999999999999999999999999999999999E6144DL;__DEC128_EPSILON__;1E-33DL;__DEC128_SUBNORMAL_MIN__;0.000000000000000000000000000000001E-6143DL;__REGISTER_PREFIX__; ;__USER_LABEL_PREFIX__; ;__GNUC_STDC_INLINE__;1;__NO_INLINE__;1;__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1;1;__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2;1;__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4;1;__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8;1;__GCC_ATOMIC_BOOL_LOCK_FREE;2;__GCC_ATOMIC_CHAR_LOCK_FREE;2;__GCC_ATOMIC_CHAR16_T_LOCK_FREE;2;__GCC_ATOMIC_CHAR32_T_LOCK_FREE;2;__GCC_ATOMIC_WCHAR_T_LOCK_FREE;2;__GCC_ATOMIC_SHORT_LOCK_FREE;2;__GCC_ATOMIC_INT_LOCK_FREE;2;__GCC_ATOMIC_LONG_LOCK_FREE;2;__GCC_ATOMIC_LLONG_LOCK_FREE;2;__GCC_ATOMIC_TEST_AND_SET_TRUEVAL;1;__GCC_ATOMIC_POINTER_LOCK_FREE;2;__GCC_HAVE_DWARF2_CFI_ASM;1;__PRAGMA_REDEFINE_EXTNAME;1;__SSP_STRONG__;3;__SIZEOF_INT128__;16;__SIZEOF_WCHAR_T__;4;__SIZEOF_WINT_T__;4;__SIZEOF_PTRDIFF_T__;8;__amd64;1;__amd64__;1;__x86_64;1;__x86_64__;1;__SIZEOF_FLOAT80__;16;__SIZEOF_FLOAT128__;16;__ATOMIC_HLE_ACQUIRE;65536;__ATOMIC_HLE_RELEASE;131072;__GCC_ASM_FLAG_OUTPUTS__;1;__k8;1;__k8__;1;__code_model_small__;1;__MMX__;1;__SSE__;1;__SSE2__;1;__FXSR__;1;__SSE_MATH__;1;__SSE2_MATH__;1;__SEG_FS;1;__SEG_GS;1;__gnu_linux__;1;__linux;1;__linux__;1;linux;1;__unix;1;__unix__;1;unix;1;__ELF__;1;__DECIMAL_BID_FORMAT__;1;_GNU_SOURCE;1;_STDC_PREDEF_H;1;__STDC_IEC_559__;1;__STDC_IEC_559_COMPLEX__;1;__STDC_ISO_10646__;201706L;__STDC_NO_THREADS__;1
+//CXX compiler system include directories
+CMAKE_EXTRA_GENERATOR_CXX_SYSTEM_INCLUDE_DIRS:INTERNAL=/usr/include/c++/7;/usr/include/x86_64-linux-gnu/c++/7;/usr/include/c++/7/backward;/usr/lib/gcc/x86_64-linux-gnu/7/include;/usr/local/include;/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed;/usr/include/x86_64-linux-gnu;/usr/include
+//C compiler system defined macros
+CMAKE_EXTRA_GENERATOR_C_SYSTEM_DEFINED_MACROS:INTERNAL=__STDC__;1;__STDC_VERSION__;201112L;__STDC_UTF_16__;1;__STDC_UTF_32__;1;__STDC_HOSTED__;1;__GNUC__;7;__GNUC_MINOR__;3;__GNUC_PATCHLEVEL__; ;__VERSION__;"7.3.0";__ATOMIC_RELAXED; ;__ATOMIC_SEQ_CST;5;__ATOMIC_ACQUIRE;2;__ATOMIC_RELEASE;3;__ATOMIC_ACQ_REL;4;__ATOMIC_CONSUME;1;__pic__;2;__PIC__;2;__pie__;2;__PIE__;2;__FINITE_MATH_ONLY__; ;_LP64;1;__LP64__;1;__SIZEOF_INT__;4;__SIZEOF_LONG__;8;__SIZEOF_LONG_LONG__;8;__SIZEOF_SHORT__;2;__SIZEOF_FLOAT__;4;__SIZEOF_DOUBLE__;8;__SIZEOF_LONG_DOUBLE__;16;__SIZEOF_SIZE_T__;8;__CHAR_BIT__;8;__BIGGEST_ALIGNMENT__;16;__ORDER_LITTLE_ENDIAN__;1234;__ORDER_BIG_ENDIAN__;4321;__ORDER_PDP_ENDIAN__;3412;__BYTE_ORDER__;__ORDER_LITTLE_ENDIAN__;__FLOAT_WORD_ORDER__;__ORDER_LITTLE_ENDIAN__;__SIZEOF_POINTER__;8;__SIZE_TYPE__;long unsigned int;__PTRDIFF_TYPE__;long int;__WCHAR_TYPE__;int;__WINT_TYPE__;unsigned int;__INTMAX_TYPE__;long int;__UINTMAX_TYPE__;long unsigned int;__CHAR16_TYPE__;short unsigned int;__CHAR32_TYPE__;unsigned int;__SIG_ATOMIC_TYPE__;int;__INT8_TYPE__;signed char;__INT16_TYPE__;short int;__INT32_TYPE__;int;__INT64_TYPE__;long int;__UINT8_TYPE__;unsigned char;__UINT16_TYPE__;short unsigned int;__UINT32_TYPE__;unsigned int;__UINT64_TYPE__;long unsigned int;__INT_LEAST8_TYPE__;signed char;__INT_LEAST16_TYPE__;short int;__INT_LEAST32_TYPE__;int;__INT_LEAST64_TYPE__;long int;__UINT_LEAST8_TYPE__;unsigned char;__UINT_LEAST16_TYPE__;short unsigned int;__UINT_LEAST32_TYPE__;unsigned int;__UINT_LEAST64_TYPE__;long unsigned int;__INT_FAST8_TYPE__;signed char;__INT_FAST16_TYPE__;long int;__INT_FAST32_TYPE__;long int;__INT_FAST64_TYPE__;long int;__UINT_FAST8_TYPE__;unsigned char;__UINT_FAST16_TYPE__;long unsigned int;__UINT_FAST32_TYPE__;long unsigned int;__UINT_FAST64_TYPE__;long unsigned int;__INTPTR_TYPE__;long int;__UINTPTR_TYPE__;long unsigned int;__has_include(STR);__has_include__(STR);__has_include_next(STR);__has_include_next__(STR);__GXX_ABI_VERSION;1011;__SCHAR_MAX__;0x7f;__SHRT_MAX__;0x7fff;__INT_MAX__;0x7fffffff;__LONG_MAX__;0x7fffffffffffffffL;__LONG_LONG_MAX__;0x7fffffffffffffffLL;__WCHAR_MAX__;0x7fffffff;__WCHAR_MIN__;(-__WCHAR_MAX__ - 1);__WINT_MAX__;0xffffffffU;__WINT_MIN__;0U;__PTRDIFF_MAX__;0x7fffffffffffffffL;__SIZE_MAX__;0xffffffffffffffffUL;__SCHAR_WIDTH__;8;__SHRT_WIDTH__;16;__INT_WIDTH__;32;__LONG_WIDTH__;64;__LONG_LONG_WIDTH__;64;__WCHAR_WIDTH__;32;__WINT_WIDTH__;32;__PTRDIFF_WIDTH__;64;__SIZE_WIDTH__;64;__INTMAX_MAX__;0x7fffffffffffffffL;__INTMAX_C(c);c ## L;__UINTMAX_MAX__;0xffffffffffffffffUL;__UINTMAX_C(c);c ## UL;__INTMAX_WIDTH__;64;__SIG_ATOMIC_MAX__;0x7fffffff;__SIG_ATOMIC_MIN__;(-__SIG_ATOMIC_MAX__ - 1);__SIG_ATOMIC_WIDTH__;32;__INT8_MAX__;0x7f;__INT16_MAX__;0x7fff;__INT32_MAX__;0x7fffffff;__INT64_MAX__;0x7fffffffffffffffL;__UINT8_MAX__;0xff;__UINT16_MAX__;0xffff;__UINT32_MAX__;0xffffffffU;__UINT64_MAX__;0xffffffffffffffffUL;__INT_LEAST8_MAX__;0x7f;__INT8_C(c);c;__INT_LEAST8_WIDTH__;8;__INT_LEAST16_MAX__;0x7fff;__INT16_C(c);c;__INT_LEAST16_WIDTH__;16;__INT_LEAST32_MAX__;0x7fffffff;__INT32_C(c);c;__INT_LEAST32_WIDTH__;32;__INT_LEAST64_MAX__;0x7fffffffffffffffL;__INT64_C(c);c ## L;__INT_LEAST64_WIDTH__;64;__UINT_LEAST8_MAX__;0xff;__UINT8_C(c);c;__UINT_LEAST16_MAX__;0xffff;__UINT16_C(c);c;__UINT_LEAST32_MAX__;0xffffffffU;__UINT32_C(c);c ## U;__UINT_LEAST64_MAX__;0xffffffffffffffffUL;__UINT64_C(c);c ## UL;__INT_FAST8_MAX__;0x7f;__INT_FAST8_WIDTH__;8;__INT_FAST16_MAX__;0x7fffffffffffffffL;__INT_FAST16_WIDTH__;64;__INT_FAST32_MAX__;0x7fffffffffffffffL;__INT_FAST32_WIDTH__;64;__INT_FAST64_MAX__;0x7fffffffffffffffL;__INT_FAST64_WIDTH__;64;__UINT_FAST8_MAX__;0xff;__UINT_FAST16_MAX__;0xffffffffffffffffUL;__UINT_FAST32_MAX__;0xffffffffffffffffUL;__UINT_FAST64_MAX__;0xffffffffffffffffUL;__INTPTR_MAX__;0x7fffffffffffffffL;__INTPTR_WIDTH__;64;__UINTPTR_MAX__;0xffffffffffffffffUL;__GCC_IEC_559;2;__GCC_IEC_559_COMPLEX;2;__FLT_EVAL_METHOD__; ;__FLT_EVAL_METHOD_TS_18661_3__; ;__DEC_EVAL_METHOD__;2;__FLT_RADIX__;2;__FLT_MANT_DIG__;24;__FLT_DIG__;6;__FLT_MIN_EXP__;(-125);__FLT_MIN_10_EXP__;(-37);__FLT_MAX_EXP__;128;__FLT_MAX_10_EXP__;38;__FLT_DECIMAL_DIG__;9;__FLT_MAX__;3.40282346638528859811704183484516925e+38F;__FLT_MIN__;1.17549435082228750796873653722224568e-38F;__FLT_EPSILON__;1.19209289550781250000000000000000000e-7F;__FLT_DENORM_MIN__;1.40129846432481707092372958328991613e-45F;__FLT_HAS_DENORM__;1;__FLT_HAS_INFINITY__;1;__FLT_HAS_QUIET_NAN__;1;__DBL_MANT_DIG__;53;__DBL_DIG__;15;__DBL_MIN_EXP__;(-1021);__DBL_MIN_10_EXP__;(-307);__DBL_MAX_EXP__;1024;__DBL_MAX_10_EXP__;308;__DBL_DECIMAL_DIG__;17;__DBL_MAX__;((double)1.79769313486231570814527423731704357e+308L);__DBL_MIN__;((double)2.22507385850720138309023271733240406e-308L);__DBL_EPSILON__;((double)2.22044604925031308084726333618164062e-16L);__DBL_DENORM_MIN__;((double)4.94065645841246544176568792868221372e-324L);__DBL_HAS_DENORM__;1;__DBL_HAS_INFINITY__;1;__DBL_HAS_QUIET_NAN__;1;__LDBL_MANT_DIG__;64;__LDBL_DIG__;18;__LDBL_MIN_EXP__;(-16381);__LDBL_MIN_10_EXP__;(-4931);__LDBL_MAX_EXP__;16384;__LDBL_MAX_10_EXP__;4932;__DECIMAL_DIG__;21;__LDBL_DECIMAL_DIG__;21;__LDBL_MAX__;1.18973149535723176502126385303097021e+4932L;__LDBL_MIN__;3.36210314311209350626267781732175260e-4932L;__LDBL_EPSILON__;1.08420217248550443400745280086994171e-19L;__LDBL_DENORM_MIN__;3.64519953188247460252840593361941982e-4951L;__LDBL_HAS_DENORM__;1;__LDBL_HAS_INFINITY__;1;__LDBL_HAS_QUIET_NAN__;1;__FLT32_MANT_DIG__;24;__FLT32_DIG__;6;__FLT32_MIN_EXP__;(-125);__FLT32_MIN_10_EXP__;(-37);__FLT32_MAX_EXP__;128;__FLT32_MAX_10_EXP__;38;__FLT32_DECIMAL_DIG__;9;__FLT32_MAX__;3.40282346638528859811704183484516925e+38F32;__FLT32_MIN__;1.17549435082228750796873653722224568e-38F32;__FLT32_EPSILON__;1.19209289550781250000000000000000000e-7F32;__FLT32_DENORM_MIN__;1.40129846432481707092372958328991613e-45F32;__FLT32_HAS_DENORM__;1;__FLT32_HAS_INFINITY__;1;__FLT32_HAS_QUIET_NAN__;1;__FLT64_MANT_DIG__;53;__FLT64_DIG__;15;__FLT64_MIN_EXP__;(-1021);__FLT64_MIN_10_EXP__;(-307);__FLT64_MAX_EXP__;1024;__FLT64_MAX_10_EXP__;308;__FLT64_DECIMAL_DIG__;17;__FLT64_MAX__;1.79769313486231570814527423731704357e+308F64;__FLT64_MIN__;2.22507385850720138309023271733240406e-308F64;__FLT64_EPSILON__;2.22044604925031308084726333618164062e-16F64;__FLT64_DENORM_MIN__;4.94065645841246544176568792868221372e-324F64;__FLT64_HAS_DENORM__;1;__FLT64_HAS_INFINITY__;1;__FLT64_HAS_QUIET_NAN__;1;__FLT128_MANT_DIG__;113;__FLT128_DIG__;33;__FLT128_MIN_EXP__;(-16381);__FLT128_MIN_10_EXP__;(-4931);__FLT128_MAX_EXP__;16384;__FLT128_MAX_10_EXP__;4932;__FLT128_DECIMAL_DIG__;36;__FLT128_MAX__;1.18973149535723176508575932662800702e+4932F128;__FLT128_MIN__;3.36210314311209350626267781732175260e-4932F128;__FLT128_EPSILON__;1.92592994438723585305597794258492732e-34F128;__FLT128_DENORM_MIN__;6.47517511943802511092443895822764655e-4966F128;__FLT128_HAS_DENORM__;1;__FLT128_HAS_INFINITY__;1;__FLT128_HAS_QUIET_NAN__;1;__FLT32X_MANT_DIG__;53;__FLT32X_DIG__;15;__FLT32X_MIN_EXP__;(-1021);__FLT32X_MIN_10_EXP__;(-307);__FLT32X_MAX_EXP__;1024;__FLT32X_MAX_10_EXP__;308;__FLT32X_DECIMAL_DIG__;17;__FLT32X_MAX__;1.79769313486231570814527423731704357e+308F32x;__FLT32X_MIN__;2.22507385850720138309023271733240406e-308F32x;__FLT32X_EPSILON__;2.22044604925031308084726333618164062e-16F32x;__FLT32X_DENORM_MIN__;4.94065645841246544176568792868221372e-324F32x;__FLT32X_HAS_DENORM__;1;__FLT32X_HAS_INFINITY__;1;__FLT32X_HAS_QUIET_NAN__;1;__FLT64X_MANT_DIG__;64;__FLT64X_DIG__;18;__FLT64X_MIN_EXP__;(-16381);__FLT64X_MIN_10_EXP__;(-4931);__FLT64X_MAX_EXP__;16384;__FLT64X_MAX_10_EXP__;4932;__FLT64X_DECIMAL_DIG__;21;__FLT64X_MAX__;1.18973149535723176502126385303097021e+4932F64x;__FLT64X_MIN__;3.36210314311209350626267781732175260e-4932F64x;__FLT64X_EPSILON__;1.08420217248550443400745280086994171e-19F64x;__FLT64X_DENORM_MIN__;3.64519953188247460252840593361941982e-4951F64x;__FLT64X_HAS_DENORM__;1;__FLT64X_HAS_INFINITY__;1;__FLT64X_HAS_QUIET_NAN__;1;__DEC32_MANT_DIG__;7;__DEC32_MIN_EXP__;(-94);__DEC32_MAX_EXP__;97;__DEC32_MIN__;1E-95DF;__DEC32_MAX__;9.999999E96DF;__DEC32_EPSILON__;1E-6DF;__DEC32_SUBNORMAL_MIN__;0.000001E-95DF;__DEC64_MANT_DIG__;16;__DEC64_MIN_EXP__;(-382);__DEC64_MAX_EXP__;385;__DEC64_MIN__;1E-383DD;__DEC64_MAX__;9.999999999999999E384DD;__DEC64_EPSILON__;1E-15DD;__DEC64_SUBNORMAL_MIN__;0.000000000000001E-383DD;__DEC128_MANT_DIG__;34;__DEC128_MIN_EXP__;(-6142);__DEC128_MAX_EXP__;6145;__DEC128_MIN__;1E-6143DL;__DEC128_MAX__;9.999999999999999999999999999999999E6144DL;__DEC128_EPSILON__;1E-33DL;__DEC128_SUBNORMAL_MIN__;0.000000000000000000000000000000001E-6143DL;__REGISTER_PREFIX__; ;__USER_LABEL_PREFIX__; ;__GNUC_STDC_INLINE__;1;__NO_INLINE__;1;__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1;1;__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2;1;__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4;1;__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8;1;__GCC_ATOMIC_BOOL_LOCK_FREE;2;__GCC_ATOMIC_CHAR_LOCK_FREE;2;__GCC_ATOMIC_CHAR16_T_LOCK_FREE;2;__GCC_ATOMIC_CHAR32_T_LOCK_FREE;2;__GCC_ATOMIC_WCHAR_T_LOCK_FREE;2;__GCC_ATOMIC_SHORT_LOCK_FREE;2;__GCC_ATOMIC_INT_LOCK_FREE;2;__GCC_ATOMIC_LONG_LOCK_FREE;2;__GCC_ATOMIC_LLONG_LOCK_FREE;2;__GCC_ATOMIC_TEST_AND_SET_TRUEVAL;1;__GCC_ATOMIC_POINTER_LOCK_FREE;2;__GCC_HAVE_DWARF2_CFI_ASM;1;__PRAGMA_REDEFINE_EXTNAME;1;__SSP_STRONG__;3;__SIZEOF_INT128__;16;__SIZEOF_WCHAR_T__;4;__SIZEOF_WINT_T__;4;__SIZEOF_PTRDIFF_T__;8;__amd64;1;__amd64__;1;__x86_64;1;__x86_64__;1;__SIZEOF_FLOAT80__;16;__SIZEOF_FLOAT128__;16;__ATOMIC_HLE_ACQUIRE;65536;__ATOMIC_HLE_RELEASE;131072;__GCC_ASM_FLAG_OUTPUTS__;1;__k8;1;__k8__;1;__code_model_small__;1;__MMX__;1;__SSE__;1;__SSE2__;1;__FXSR__;1;__SSE_MATH__;1;__SSE2_MATH__;1;__SEG_FS;1;__SEG_GS;1;__gnu_linux__;1;__linux;1;__linux__;1;linux;1;__unix;1;__unix__;1;unix;1;__ELF__;1;__DECIMAL_BID_FORMAT__;1;_STDC_PREDEF_H;1;__STDC_IEC_559__;1;__STDC_IEC_559_COMPLEX__;1;__STDC_ISO_10646__;201706L;__STDC_NO_THREADS__;1
+//C compiler system include directories
+CMAKE_EXTRA_GENERATOR_C_SYSTEM_INCLUDE_DIRS:INTERNAL=/usr/lib/gcc/x86_64-linux-gnu/7/include;/usr/local/include;/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed;/usr/include/x86_64-linux-gnu;/usr/include
+//Name of generator.
+CMAKE_GENERATOR:INTERNAL=Unix Makefiles
+//Name of generator platform.
+CMAKE_GENERATOR_PLATFORM:INTERNAL=
+//Name of generator toolset.
+CMAKE_GENERATOR_TOOLSET:INTERNAL=
+//Source directory with the top level CMakeLists.txt file for this
+// project
+CMAKE_HOME_DIRECTORY:INTERNAL=/users/studs/bsc/2016/rosent/os192/Assignment1
+//Install .so files without execute permission.
+CMAKE_INSTALL_SO_NO_EXE:INTERNAL=1
+//ADVANCED property for variable: CMAKE_LINKER
+CMAKE_LINKER-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_MAKE_PROGRAM
+CMAKE_MAKE_PROGRAM-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS
+CMAKE_MODULE_LINKER_FLAGS-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_DEBUG
+CMAKE_MODULE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL
+CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELEASE
+CMAKE_MODULE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO
+CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_NM
+CMAKE_NM-ADVANCED:INTERNAL=1
+//number of local generators
+CMAKE_NUMBER_OF_MAKEFILES:INTERNAL=1
+//ADVANCED property for variable: CMAKE_OBJCOPY
+CMAKE_OBJCOPY-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_OBJDUMP
+CMAKE_OBJDUMP-ADVANCED:INTERNAL=1
+//Platform information initialized
+CMAKE_PLATFORM_INFO_INITIALIZED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_RANLIB
+CMAKE_RANLIB-ADVANCED:INTERNAL=1
+//Path to CMake installation.
+CMAKE_ROOT:INTERNAL=/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10
+//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS
+CMAKE_SHARED_LINKER_FLAGS-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_DEBUG
+CMAKE_SHARED_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL
+CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELEASE
+CMAKE_SHARED_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO
+CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_SKIP_INSTALL_RPATH
+CMAKE_SKIP_INSTALL_RPATH-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_SKIP_RPATH
+CMAKE_SKIP_RPATH-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS
+CMAKE_STATIC_LINKER_FLAGS-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_DEBUG
+CMAKE_STATIC_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL
+CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELEASE
+CMAKE_STATIC_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO
+CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_STRIP
+CMAKE_STRIP-ADVANCED:INTERNAL=1
+//uname command
+CMAKE_UNAME:INTERNAL=/bin/uname
+//ADVANCED property for variable: CMAKE_VERBOSE_MAKEFILE
+CMAKE_VERBOSE_MAKEFILE-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: ProcessorCount_cmd_getconf
+ProcessorCount_cmd_getconf-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: ProcessorCount_cmd_sysctl
+ProcessorCount_cmd_sysctl-ADVANCED:INTERNAL=1
+
diff --git a/cmake-build-debug/CMakeFiles/3.10.3/CMakeCCompiler.cmake b/cmake-build-debug/CMakeFiles/3.10.3/CMakeCCompiler.cmake
new file mode 100644
index 0000000..9a941e5
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/3.10.3/CMakeCCompiler.cmake
@@ -0,0 +1,73 @@
+set(CMAKE_C_COMPILER "/usr/bin/cc")
+set(CMAKE_C_COMPILER_ARG1 "")
+set(CMAKE_C_COMPILER_ID "GNU")
+set(CMAKE_C_COMPILER_VERSION "7.3.0")
+set(CMAKE_C_COMPILER_VERSION_INTERNAL "")
+set(CMAKE_C_COMPILER_WRAPPER "")
+set(CMAKE_C_STANDARD_COMPUTED_DEFAULT "11")
+set(CMAKE_C_COMPILE_FEATURES "c_std_90;c_function_prototypes;c_std_99;c_restrict;c_variadic_macros;c_std_11;c_static_assert")
+set(CMAKE_C90_COMPILE_FEATURES "c_std_90;c_function_prototypes")
+set(CMAKE_C99_COMPILE_FEATURES "c_std_99;c_restrict;c_variadic_macros")
+set(CMAKE_C11_COMPILE_FEATURES "c_std_11;c_static_assert")
+
+set(CMAKE_C_PLATFORM_ID "Linux")
+set(CMAKE_C_SIMULATE_ID "")
+set(CMAKE_C_SIMULATE_VERSION "")
+
+
+
+set(CMAKE_AR "/usr/bin/ar")
+set(CMAKE_C_COMPILER_AR "/usr/bin/gcc-ar-7")
+set(CMAKE_RANLIB "/usr/bin/ranlib")
+set(CMAKE_C_COMPILER_RANLIB "/usr/bin/gcc-ranlib-7")
+set(CMAKE_LINKER "/usr/bin/ld")
+set(CMAKE_COMPILER_IS_GNUCC 1)
+set(CMAKE_C_COMPILER_LOADED 1)
+set(CMAKE_C_COMPILER_WORKS TRUE)
+set(CMAKE_C_ABI_COMPILED TRUE)
+set(CMAKE_COMPILER_IS_MINGW )
+set(CMAKE_COMPILER_IS_CYGWIN )
+if(CMAKE_COMPILER_IS_CYGWIN)
+  set(CYGWIN 1)
+  set(UNIX 1)
+endif()
+
+set(CMAKE_C_COMPILER_ENV_VAR "CC")
+
+if(CMAKE_COMPILER_IS_MINGW)
+  set(MINGW 1)
+endif()
+set(CMAKE_C_COMPILER_ID_RUN 1)
+set(CMAKE_C_SOURCE_FILE_EXTENSIONS c;m)
+set(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)
+set(CMAKE_C_LINKER_PREFERENCE 10)
+
+# Save compiler ABI information.
+set(CMAKE_C_SIZEOF_DATA_PTR "8")
+set(CMAKE_C_COMPILER_ABI "ELF")
+set(CMAKE_C_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")
+
+if(CMAKE_C_SIZEOF_DATA_PTR)
+  set(CMAKE_SIZEOF_VOID_P "${CMAKE_C_SIZEOF_DATA_PTR}")
+endif()
+
+if(CMAKE_C_COMPILER_ABI)
+  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_C_COMPILER_ABI}")
+endif()
+
+if(CMAKE_C_LIBRARY_ARCHITECTURE)
+  set(CMAKE_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")
+endif()
+
+set(CMAKE_C_CL_SHOWINCLUDES_PREFIX "")
+if(CMAKE_C_CL_SHOWINCLUDES_PREFIX)
+  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_C_CL_SHOWINCLUDES_PREFIX}")
+endif()
+
+
+
+
+
+set(CMAKE_C_IMPLICIT_LINK_LIBRARIES "gcc;gcc_s;c;gcc;gcc_s")
+set(CMAKE_C_IMPLICIT_LINK_DIRECTORIES "/usr/lib/gcc/x86_64-linux-gnu/7;/usr/lib/x86_64-linux-gnu;/usr/lib;/lib/x86_64-linux-gnu;/lib")
+set(CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")
diff --git a/cmake-build-debug/CMakeFiles/3.10.3/CMakeCXXCompiler.cmake b/cmake-build-debug/CMakeFiles/3.10.3/CMakeCXXCompiler.cmake
new file mode 100644
index 0000000..1404958
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/3.10.3/CMakeCXXCompiler.cmake
@@ -0,0 +1,75 @@
+set(CMAKE_CXX_COMPILER "/usr/bin/c++")
+set(CMAKE_CXX_COMPILER_ARG1 "")
+set(CMAKE_CXX_COMPILER_ID "GNU")
+set(CMAKE_CXX_COMPILER_VERSION "7.3.0")
+set(CMAKE_CXX_COMPILER_VERSION_INTERNAL "")
+set(CMAKE_CXX_COMPILER_WRAPPER "")
+set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT "14")
+set(CMAKE_CXX_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters;cxx_std_11;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_attributes;cxx_auto_type;cxx_constexpr;cxx_decltype;cxx_decltype_incomplete_return_types;cxx_default_function_template_args;cxx_defaulted_functions;cxx_defaulted_move_initializers;cxx_delegating_constructors;cxx_deleted_functions;cxx_enum_forward_declarations;cxx_explicit_conversions;cxx_extended_friend_declarations;cxx_extern_templates;cxx_final;cxx_func_identifier;cxx_generalized_initializers;cxx_inheriting_constructors;cxx_inline_namespaces;cxx_lambdas;cxx_local_type_template_args;cxx_long_long_type;cxx_noexcept;cxx_nonstatic_member_init;cxx_nullptr;cxx_override;cxx_range_for;cxx_raw_string_literals;cxx_reference_qualified_functions;cxx_right_angle_brackets;cxx_rvalue_references;cxx_sizeof_member;cxx_static_assert;cxx_strong_enums;cxx_thread_local;cxx_trailing_return_types;cxx_unicode_literals;cxx_uniform_initialization;cxx_unrestricted_unions;cxx_user_literals;cxx_variadic_macros;cxx_variadic_templates;cxx_std_14;cxx_aggregate_default_initializers;cxx_attribute_deprecated;cxx_binary_literals;cxx_contextual_conversions;cxx_decltype_auto;cxx_digit_separators;cxx_generic_lambdas;cxx_lambda_init_captures;cxx_relaxed_constexpr;cxx_return_type_deduction;cxx_variable_templates;cxx_std_17")
+set(CMAKE_CXX98_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters")
+set(CMAKE_CXX11_COMPILE_FEATURES "cxx_std_11;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_attributes;cxx_auto_type;cxx_constexpr;cxx_decltype;cxx_decltype_incomplete_return_types;cxx_default_function_template_args;cxx_defaulted_functions;cxx_defaulted_move_initializers;cxx_delegating_constructors;cxx_deleted_functions;cxx_enum_forward_declarations;cxx_explicit_conversions;cxx_extended_friend_declarations;cxx_extern_templates;cxx_final;cxx_func_identifier;cxx_generalized_initializers;cxx_inheriting_constructors;cxx_inline_namespaces;cxx_lambdas;cxx_local_type_template_args;cxx_long_long_type;cxx_noexcept;cxx_nonstatic_member_init;cxx_nullptr;cxx_override;cxx_range_for;cxx_raw_string_literals;cxx_reference_qualified_functions;cxx_right_angle_brackets;cxx_rvalue_references;cxx_sizeof_member;cxx_static_assert;cxx_strong_enums;cxx_thread_local;cxx_trailing_return_types;cxx_unicode_literals;cxx_uniform_initialization;cxx_unrestricted_unions;cxx_user_literals;cxx_variadic_macros;cxx_variadic_templates")
+set(CMAKE_CXX14_COMPILE_FEATURES "cxx_std_14;cxx_aggregate_default_initializers;cxx_attribute_deprecated;cxx_binary_literals;cxx_contextual_conversions;cxx_decltype_auto;cxx_digit_separators;cxx_generic_lambdas;cxx_lambda_init_captures;cxx_relaxed_constexpr;cxx_return_type_deduction;cxx_variable_templates")
+set(CMAKE_CXX17_COMPILE_FEATURES "cxx_std_17")
+
+set(CMAKE_CXX_PLATFORM_ID "Linux")
+set(CMAKE_CXX_SIMULATE_ID "")
+set(CMAKE_CXX_SIMULATE_VERSION "")
+
+
+
+set(CMAKE_AR "/usr/bin/ar")
+set(CMAKE_CXX_COMPILER_AR "/usr/bin/gcc-ar-7")
+set(CMAKE_RANLIB "/usr/bin/ranlib")
+set(CMAKE_CXX_COMPILER_RANLIB "/usr/bin/gcc-ranlib-7")
+set(CMAKE_LINKER "/usr/bin/ld")
+set(CMAKE_COMPILER_IS_GNUCXX 1)
+set(CMAKE_CXX_COMPILER_LOADED 1)
+set(CMAKE_CXX_COMPILER_WORKS TRUE)
+set(CMAKE_CXX_ABI_COMPILED TRUE)
+set(CMAKE_COMPILER_IS_MINGW )
+set(CMAKE_COMPILER_IS_CYGWIN )
+if(CMAKE_COMPILER_IS_CYGWIN)
+  set(CYGWIN 1)
+  set(UNIX 1)
+endif()
+
+set(CMAKE_CXX_COMPILER_ENV_VAR "CXX")
+
+if(CMAKE_COMPILER_IS_MINGW)
+  set(MINGW 1)
+endif()
+set(CMAKE_CXX_COMPILER_ID_RUN 1)
+set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)
+set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;mm;CPP)
+set(CMAKE_CXX_LINKER_PREFERENCE 30)
+set(CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES 1)
+
+# Save compiler ABI information.
+set(CMAKE_CXX_SIZEOF_DATA_PTR "8")
+set(CMAKE_CXX_COMPILER_ABI "ELF")
+set(CMAKE_CXX_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")
+
+if(CMAKE_CXX_SIZEOF_DATA_PTR)
+  set(CMAKE_SIZEOF_VOID_P "${CMAKE_CXX_SIZEOF_DATA_PTR}")
+endif()
+
+if(CMAKE_CXX_COMPILER_ABI)
+  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_CXX_COMPILER_ABI}")
+endif()
+
+if(CMAKE_CXX_LIBRARY_ARCHITECTURE)
+  set(CMAKE_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")
+endif()
+
+set(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX "")
+if(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX)
+  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_CXX_CL_SHOWINCLUDES_PREFIX}")
+endif()
+
+
+
+
+
+set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES "stdc++;m;gcc_s;gcc;c;gcc_s;gcc")
+set(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES "/usr/lib/gcc/x86_64-linux-gnu/7;/usr/lib/x86_64-linux-gnu;/usr/lib;/lib/x86_64-linux-gnu;/lib")
+set(CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")
diff --git a/cmake-build-debug/CMakeFiles/3.10.3/CMakeDetermineCompilerABI_C.bin b/cmake-build-debug/CMakeFiles/3.10.3/CMakeDetermineCompilerABI_C.bin
new file mode 100755
index 0000000..bd61e49
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/3.10.3/CMakeDetermineCompilerABI_C.bin differ
diff --git a/cmake-build-debug/CMakeFiles/3.10.3/CMakeDetermineCompilerABI_CXX.bin b/cmake-build-debug/CMakeFiles/3.10.3/CMakeDetermineCompilerABI_CXX.bin
new file mode 100755
index 0000000..e06836b
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/3.10.3/CMakeDetermineCompilerABI_CXX.bin differ
diff --git a/cmake-build-debug/CMakeFiles/3.10.3/CMakeSystem.cmake b/cmake-build-debug/CMakeFiles/3.10.3/CMakeSystem.cmake
new file mode 100644
index 0000000..7010ea2
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/3.10.3/CMakeSystem.cmake
@@ -0,0 +1,15 @@
+set(CMAKE_HOST_SYSTEM "Linux-4.15.0-46-generic")
+set(CMAKE_HOST_SYSTEM_NAME "Linux")
+set(CMAKE_HOST_SYSTEM_VERSION "4.15.0-46-generic")
+set(CMAKE_HOST_SYSTEM_PROCESSOR "x86_64")
+
+
+
+set(CMAKE_SYSTEM "Linux-4.15.0-46-generic")
+set(CMAKE_SYSTEM_NAME "Linux")
+set(CMAKE_SYSTEM_VERSION "4.15.0-46-generic")
+set(CMAKE_SYSTEM_PROCESSOR "x86_64")
+
+set(CMAKE_CROSSCOMPILING "FALSE")
+
+set(CMAKE_SYSTEM_LOADED 1)
diff --git a/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdC/CMakeCCompilerId.c b/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdC/CMakeCCompilerId.c
new file mode 100644
index 0000000..722faa8
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdC/CMakeCCompilerId.c
@@ -0,0 +1,598 @@
+#ifdef __cplusplus
+# error "A C++ compiler has been selected for C."
+#endif
+
+#if defined(__18CXX)
+# define ID_VOID_MAIN
+#endif
+#if defined(__CLASSIC_C__)
+/* cv-qualifiers did not exist in K&R C */
+# define const
+# define volatile
+#endif
+
+
+/* Version number components: V=Version, R=Revision, P=Patch
+   Version date components:   YYYY=Year, MM=Month,   DD=Day  */
+
+#if defined(__INTEL_COMPILER) || defined(__ICC)
+# define COMPILER_ID "Intel"
+# if defined(_MSC_VER)
+#  define SIMULATE_ID "MSVC"
+# endif
+  /* __INTEL_COMPILER = VRP */
+# define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)
+# define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)
+# if defined(__INTEL_COMPILER_UPDATE)
+#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)
+# else
+#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
+# endif
+# if defined(__INTEL_COMPILER_BUILD_DATE)
+  /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
+#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
+# endif
+# if defined(_MSC_VER)
+   /* _MSC_VER = VVRR */
+#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
+#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
+# endif
+
+#elif defined(__PATHCC__)
+# define COMPILER_ID "PathScale"
+# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)
+# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)
+# if defined(__PATHCC_PATCHLEVEL__)
+#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
+# endif
+
+#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)
+# define COMPILER_ID "Embarcadero"
+# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)
+# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)
+# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)
+
+#elif defined(__BORLANDC__)
+# define COMPILER_ID "Borland"
+  /* __BORLANDC__ = 0xVRR */
+# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)
+# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)
+
+#elif defined(__WATCOMC__) && __WATCOMC__ < 1200
+# define COMPILER_ID "Watcom"
+   /* __WATCOMC__ = VVRR */
+# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)
+# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
+# if (__WATCOMC__ % 10) > 0
+#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
+# endif
+
+#elif defined(__WATCOMC__)
+# define COMPILER_ID "OpenWatcom"
+   /* __WATCOMC__ = VVRP + 1100 */
+# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)
+# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
+# if (__WATCOMC__ % 10) > 0
+#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
+# endif
+
+#elif defined(__SUNPRO_C)
+# define COMPILER_ID "SunPro"
+# if __SUNPRO_C >= 0x5100
+   /* __SUNPRO_C = 0xVRRP */
+#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>12)
+#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xFF)
+#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)
+# else
+   /* __SUNPRO_CC = 0xVRP */
+#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>8)
+#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xF)
+#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)
+# endif
+
+#elif defined(__HP_cc)
+# define COMPILER_ID "HP"
+  /* __HP_cc = VVRRPP */
+# define COMPILER_VERSION_MAJOR DEC(__HP_cc/10000)
+# define COMPILER_VERSION_MINOR DEC(__HP_cc/100 % 100)
+# define COMPILER_VERSION_PATCH DEC(__HP_cc     % 100)
+
+#elif defined(__DECC)
+# define COMPILER_ID "Compaq"
+  /* __DECC_VER = VVRRTPPPP */
+# define COMPILER_VERSION_MAJOR DEC(__DECC_VER/10000000)
+# define COMPILER_VERSION_MINOR DEC(__DECC_VER/100000  % 100)
+# define COMPILER_VERSION_PATCH DEC(__DECC_VER         % 10000)
+
+#elif defined(__IBMC__) && defined(__COMPILER_VER__)
+# define COMPILER_ID "zOS"
+  /* __IBMC__ = VRP */
+# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
+# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
+# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)
+
+#elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ >= 800
+# define COMPILER_ID "XL"
+  /* __IBMC__ = VRP */
+# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
+# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
+# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)
+
+#elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ < 800
+# define COMPILER_ID "VisualAge"
+  /* __IBMC__ = VRP */
+# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
+# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
+# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)
+
+#elif defined(__PGI)
+# define COMPILER_ID "PGI"
+# define COMPILER_VERSION_MAJOR DEC(__PGIC__)
+# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)
+# if defined(__PGIC_PATCHLEVEL__)
+#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
+# endif
+
+#elif defined(_CRAYC)
+# define COMPILER_ID "Cray"
+# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)
+# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)
+
+#elif defined(__TI_COMPILER_VERSION__)
+# define COMPILER_ID "TI"
+  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
+# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)
+# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)
+# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)
+
+#elif defined(__FUJITSU) || defined(__FCC_VERSION) || defined(__fcc_version)
+# define COMPILER_ID "Fujitsu"
+
+#elif defined(__TINYC__)
+# define COMPILER_ID "TinyCC"
+
+#elif defined(__BCC__)
+# define COMPILER_ID "Bruce"
+
+#elif defined(__SCO_VERSION__)
+# define COMPILER_ID "SCO"
+
+#elif defined(__clang__) && defined(__apple_build_version__)
+# define COMPILER_ID "AppleClang"
+# if defined(_MSC_VER)
+#  define SIMULATE_ID "MSVC"
+# endif
+# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
+# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
+# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
+# if defined(_MSC_VER)
+   /* _MSC_VER = VVRR */
+#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
+#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
+# endif
+# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)
+
+#elif defined(__clang__)
+# define COMPILER_ID "Clang"
+# if defined(_MSC_VER)
+#  define SIMULATE_ID "MSVC"
+# endif
+# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
+# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
+# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
+# if defined(_MSC_VER)
+   /* _MSC_VER = VVRR */
+#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
+#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
+# endif
+
+#elif defined(__GNUC__)
+# define COMPILER_ID "GNU"
+# define COMPILER_VERSION_MAJOR DEC(__GNUC__)
+# if defined(__GNUC_MINOR__)
+#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
+# endif
+# if defined(__GNUC_PATCHLEVEL__)
+#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
+# endif
+
+#elif defined(_MSC_VER)
+# define COMPILER_ID "MSVC"
+  /* _MSC_VER = VVRR */
+# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)
+# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)
+# if defined(_MSC_FULL_VER)
+#  if _MSC_VER >= 1400
+    /* _MSC_FULL_VER = VVRRPPPPP */
+#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)
+#  else
+    /* _MSC_FULL_VER = VVRRPPPP */
+#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
+#  endif
+# endif
+# if defined(_MSC_BUILD)
+#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
+# endif
+
+#elif defined(__VISUALDSPVERSION__) || defined(__ADSPBLACKFIN__) || defined(__ADSPTS__) || defined(__ADSP21000__)
+# define COMPILER_ID "ADSP"
+#if defined(__VISUALDSPVERSION__)
+  /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
+# define COMPILER_VERSION_MAJOR HEX(__VISUALDSPVERSION__>>24)
+# define COMPILER_VERSION_MINOR HEX(__VISUALDSPVERSION__>>16 & 0xFF)
+# define COMPILER_VERSION_PATCH HEX(__VISUALDSPVERSION__>>8  & 0xFF)
+#endif
+
+#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
+# define COMPILER_ID "IAR"
+# if defined(__VER__)
+#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)
+#  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)
+#  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)
+#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
+# endif
+
+#elif defined(__ARMCC_VERSION)
+# define COMPILER_ID "ARMCC"
+#if __ARMCC_VERSION >= 1000000
+  /* __ARMCC_VERSION = VRRPPPP */
+  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)
+  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)
+  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)
+#else
+  /* __ARMCC_VERSION = VRPPPP */
+  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)
+  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
+  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
+#endif
+
+
+#elif defined(__SDCC_VERSION_MAJOR) || defined(SDCC)
+# define COMPILER_ID "SDCC"
+# if defined(__SDCC_VERSION_MAJOR)
+#  define COMPILER_VERSION_MAJOR DEC(__SDCC_VERSION_MAJOR)
+#  define COMPILER_VERSION_MINOR DEC(__SDCC_VERSION_MINOR)
+#  define COMPILER_VERSION_PATCH DEC(__SDCC_VERSION_PATCH)
+# else
+  /* SDCC = VRP */
+#  define COMPILER_VERSION_MAJOR DEC(SDCC/100)
+#  define COMPILER_VERSION_MINOR DEC(SDCC/10 % 10)
+#  define COMPILER_VERSION_PATCH DEC(SDCC    % 10)
+# endif
+
+#elif defined(_SGI_COMPILER_VERSION) || defined(_COMPILER_VERSION)
+# define COMPILER_ID "MIPSpro"
+# if defined(_SGI_COMPILER_VERSION)
+  /* _SGI_COMPILER_VERSION = VRP */
+#  define COMPILER_VERSION_MAJOR DEC(_SGI_COMPILER_VERSION/100)
+#  define COMPILER_VERSION_MINOR DEC(_SGI_COMPILER_VERSION/10 % 10)
+#  define COMPILER_VERSION_PATCH DEC(_SGI_COMPILER_VERSION    % 10)
+# else
+  /* _COMPILER_VERSION = VRP */
+#  define COMPILER_VERSION_MAJOR DEC(_COMPILER_VERSION/100)
+#  define COMPILER_VERSION_MINOR DEC(_COMPILER_VERSION/10 % 10)
+#  define COMPILER_VERSION_PATCH DEC(_COMPILER_VERSION    % 10)
+# endif
+
+
+/* These compilers are either not known or too old to define an
+  identification macro.  Try to identify the platform and guess that
+  it is the native compiler.  */
+#elif defined(__sgi)
+# define COMPILER_ID "MIPSpro"
+
+#elif defined(__hpux) || defined(__hpua)
+# define COMPILER_ID "HP"
+
+#else /* unknown compiler */
+# define COMPILER_ID ""
+#endif
+
+/* Construct the string literal in pieces to prevent the source from
+   getting matched.  Store it in a pointer rather than an array
+   because some compilers will just produce instructions to fill the
+   array rather than assigning a pointer to a static array.  */
+char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
+#ifdef SIMULATE_ID
+char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
+#endif
+
+#ifdef __QNXNTO__
+char const* qnxnto = "INFO" ":" "qnxnto[]";
+#endif
+
+#if defined(__CRAYXE) || defined(__CRAYXC)
+char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
+#endif
+
+#define STRINGIFY_HELPER(X) #X
+#define STRINGIFY(X) STRINGIFY_HELPER(X)
+
+/* Identify known platforms by name.  */
+#if defined(__linux) || defined(__linux__) || defined(linux)
+# define PLATFORM_ID "Linux"
+
+#elif defined(__CYGWIN__)
+# define PLATFORM_ID "Cygwin"
+
+#elif defined(__MINGW32__)
+# define PLATFORM_ID "MinGW"
+
+#elif defined(__APPLE__)
+# define PLATFORM_ID "Darwin"
+
+#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
+# define PLATFORM_ID "Windows"
+
+#elif defined(__FreeBSD__) || defined(__FreeBSD)
+# define PLATFORM_ID "FreeBSD"
+
+#elif defined(__NetBSD__) || defined(__NetBSD)
+# define PLATFORM_ID "NetBSD"
+
+#elif defined(__OpenBSD__) || defined(__OPENBSD)
+# define PLATFORM_ID "OpenBSD"
+
+#elif defined(__sun) || defined(sun)
+# define PLATFORM_ID "SunOS"
+
+#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
+# define PLATFORM_ID "AIX"
+
+#elif defined(__sgi) || defined(__sgi__) || defined(_SGI)
+# define PLATFORM_ID "IRIX"
+
+#elif defined(__hpux) || defined(__hpux__)
+# define PLATFORM_ID "HP-UX"
+
+#elif defined(__HAIKU__)
+# define PLATFORM_ID "Haiku"
+
+#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
+# define PLATFORM_ID "BeOS"
+
+#elif defined(__QNX__) || defined(__QNXNTO__)
+# define PLATFORM_ID "QNX"
+
+#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
+# define PLATFORM_ID "Tru64"
+
+#elif defined(__riscos) || defined(__riscos__)
+# define PLATFORM_ID "RISCos"
+
+#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
+# define PLATFORM_ID "SINIX"
+
+#elif defined(__UNIX_SV__)
+# define PLATFORM_ID "UNIX_SV"
+
+#elif defined(__bsdos__)
+# define PLATFORM_ID "BSDOS"
+
+#elif defined(_MPRAS) || defined(MPRAS)
+# define PLATFORM_ID "MP-RAS"
+
+#elif defined(__osf) || defined(__osf__)
+# define PLATFORM_ID "OSF1"
+
+#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
+# define PLATFORM_ID "SCO_SV"
+
+#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
+# define PLATFORM_ID "ULTRIX"
+
+#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
+# define PLATFORM_ID "Xenix"
+
+#elif defined(__WATCOMC__)
+# if defined(__LINUX__)
+#  define PLATFORM_ID "Linux"
+
+# elif defined(__DOS__)
+#  define PLATFORM_ID "DOS"
+
+# elif defined(__OS2__)
+#  define PLATFORM_ID "OS2"
+
+# elif defined(__WINDOWS__)
+#  define PLATFORM_ID "Windows3x"
+
+# else /* unknown platform */
+#  define PLATFORM_ID
+# endif
+
+#else /* unknown platform */
+# define PLATFORM_ID
+
+#endif
+
+/* For windows compilers MSVC and Intel we can determine
+   the architecture of the compiler being used.  This is because
+   the compilers do not have flags that can change the architecture,
+   but rather depend on which compiler is being used
+*/
+#if defined(_WIN32) && defined(_MSC_VER)
+# if defined(_M_IA64)
+#  define ARCHITECTURE_ID "IA64"
+
+# elif defined(_M_X64) || defined(_M_AMD64)
+#  define ARCHITECTURE_ID "x64"
+
+# elif defined(_M_IX86)
+#  define ARCHITECTURE_ID "X86"
+
+# elif defined(_M_ARM64)
+#  define ARCHITECTURE_ID "ARM64"
+
+# elif defined(_M_ARM)
+#  if _M_ARM == 4
+#   define ARCHITECTURE_ID "ARMV4I"
+#  elif _M_ARM == 5
+#   define ARCHITECTURE_ID "ARMV5I"
+#  else
+#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
+#  endif
+
+# elif defined(_M_MIPS)
+#  define ARCHITECTURE_ID "MIPS"
+
+# elif defined(_M_SH)
+#  define ARCHITECTURE_ID "SHx"
+
+# else /* unknown architecture */
+#  define ARCHITECTURE_ID ""
+# endif
+
+#elif defined(__WATCOMC__)
+# if defined(_M_I86)
+#  define ARCHITECTURE_ID "I86"
+
+# elif defined(_M_IX86)
+#  define ARCHITECTURE_ID "X86"
+
+# else /* unknown architecture */
+#  define ARCHITECTURE_ID ""
+# endif
+
+#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
+# if defined(__ICCARM__)
+#  define ARCHITECTURE_ID "ARM"
+
+# elif defined(__ICCAVR__)
+#  define ARCHITECTURE_ID "AVR"
+
+# else /* unknown architecture */
+#  define ARCHITECTURE_ID ""
+# endif
+#else
+#  define ARCHITECTURE_ID
+#endif
+
+/* Convert integer to decimal digit literals.  */
+#define DEC(n)                   \
+  ('0' + (((n) / 10000000)%10)), \
+  ('0' + (((n) / 1000000)%10)),  \
+  ('0' + (((n) / 100000)%10)),   \
+  ('0' + (((n) / 10000)%10)),    \
+  ('0' + (((n) / 1000)%10)),     \
+  ('0' + (((n) / 100)%10)),      \
+  ('0' + (((n) / 10)%10)),       \
+  ('0' +  ((n) % 10))
+
+/* Convert integer to hex digit literals.  */
+#define HEX(n)             \
+  ('0' + ((n)>>28 & 0xF)), \
+  ('0' + ((n)>>24 & 0xF)), \
+  ('0' + ((n)>>20 & 0xF)), \
+  ('0' + ((n)>>16 & 0xF)), \
+  ('0' + ((n)>>12 & 0xF)), \
+  ('0' + ((n)>>8  & 0xF)), \
+  ('0' + ((n)>>4  & 0xF)), \
+  ('0' + ((n)     & 0xF))
+
+/* Construct a string literal encoding the version number components. */
+#ifdef COMPILER_VERSION_MAJOR
+char const info_version[] = {
+  'I', 'N', 'F', 'O', ':',
+  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
+  COMPILER_VERSION_MAJOR,
+# ifdef COMPILER_VERSION_MINOR
+  '.', COMPILER_VERSION_MINOR,
+#  ifdef COMPILER_VERSION_PATCH
+   '.', COMPILER_VERSION_PATCH,
+#   ifdef COMPILER_VERSION_TWEAK
+    '.', COMPILER_VERSION_TWEAK,
+#   endif
+#  endif
+# endif
+  ']','\0'};
+#endif
+
+/* Construct a string literal encoding the internal version number. */
+#ifdef COMPILER_VERSION_INTERNAL
+char const info_version_internal[] = {
+  'I', 'N', 'F', 'O', ':',
+  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
+  'i','n','t','e','r','n','a','l','[',
+  COMPILER_VERSION_INTERNAL,']','\0'};
+#endif
+
+/* Construct a string literal encoding the version number components. */
+#ifdef SIMULATE_VERSION_MAJOR
+char const info_simulate_version[] = {
+  'I', 'N', 'F', 'O', ':',
+  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
+  SIMULATE_VERSION_MAJOR,
+# ifdef SIMULATE_VERSION_MINOR
+  '.', SIMULATE_VERSION_MINOR,
+#  ifdef SIMULATE_VERSION_PATCH
+   '.', SIMULATE_VERSION_PATCH,
+#   ifdef SIMULATE_VERSION_TWEAK
+    '.', SIMULATE_VERSION_TWEAK,
+#   endif
+#  endif
+# endif
+  ']','\0'};
+#endif
+
+/* Construct the string literal in pieces to prevent the source from
+   getting matched.  Store it in a pointer rather than an array
+   because some compilers will just produce instructions to fill the
+   array rather than assigning a pointer to a static array.  */
+char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
+char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
+
+
+
+
+#if !defined(__STDC__)
+# if defined(_MSC_VER) && !defined(__clang__)
+#  define C_DIALECT "90"
+# else
+#  define C_DIALECT
+# endif
+#elif __STDC_VERSION__ >= 201000L
+# define C_DIALECT "11"
+#elif __STDC_VERSION__ >= 199901L
+# define C_DIALECT "99"
+#else
+# define C_DIALECT "90"
+#endif
+const char* info_language_dialect_default =
+  "INFO" ":" "dialect_default[" C_DIALECT "]";
+
+/*--------------------------------------------------------------------------*/
+
+#ifdef ID_VOID_MAIN
+void main() {}
+#else
+# if defined(__CLASSIC_C__)
+int main(argc, argv) int argc; char *argv[];
+# else
+int main(int argc, char* argv[])
+# endif
+{
+  int require = 0;
+  require += info_compiler[argc];
+  require += info_platform[argc];
+  require += info_arch[argc];
+#ifdef COMPILER_VERSION_MAJOR
+  require += info_version[argc];
+#endif
+#ifdef COMPILER_VERSION_INTERNAL
+  require += info_version_internal[argc];
+#endif
+#ifdef SIMULATE_ID
+  require += info_simulate[argc];
+#endif
+#ifdef SIMULATE_VERSION_MAJOR
+  require += info_simulate_version[argc];
+#endif
+#if defined(__CRAYXE) || defined(__CRAYXC)
+  require += info_cray[argc];
+#endif
+  require += info_language_dialect_default[argc];
+  (void)argv;
+  return require;
+}
+#endif
diff --git a/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdC/a.out b/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdC/a.out
new file mode 100755
index 0000000..709142d
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdC/a.out differ
diff --git a/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdCXX/CMakeCXXCompilerId.cpp b/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdCXX/CMakeCXXCompilerId.cpp
new file mode 100644
index 0000000..2d66298
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdCXX/CMakeCXXCompilerId.cpp
@@ -0,0 +1,576 @@
+/* This source file must have a .cpp extension so that all C++ compilers
+   recognize the extension without flags.  Borland does not know .cxx for
+   example.  */
+#ifndef __cplusplus
+# error "A C compiler has been selected for C++."
+#endif
+
+
+/* Version number components: V=Version, R=Revision, P=Patch
+   Version date components:   YYYY=Year, MM=Month,   DD=Day  */
+
+#if defined(__COMO__)
+# define COMPILER_ID "Comeau"
+  /* __COMO_VERSION__ = VRR */
+# define COMPILER_VERSION_MAJOR DEC(__COMO_VERSION__ / 100)
+# define COMPILER_VERSION_MINOR DEC(__COMO_VERSION__ % 100)
+
+#elif defined(__INTEL_COMPILER) || defined(__ICC)
+# define COMPILER_ID "Intel"
+# if defined(_MSC_VER)
+#  define SIMULATE_ID "MSVC"
+# endif
+  /* __INTEL_COMPILER = VRP */
+# define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)
+# define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)
+# if defined(__INTEL_COMPILER_UPDATE)
+#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)
+# else
+#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
+# endif
+# if defined(__INTEL_COMPILER_BUILD_DATE)
+  /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
+#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
+# endif
+# if defined(_MSC_VER)
+   /* _MSC_VER = VVRR */
+#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
+#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
+# endif
+
+#elif defined(__PATHCC__)
+# define COMPILER_ID "PathScale"
+# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)
+# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)
+# if defined(__PATHCC_PATCHLEVEL__)
+#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
+# endif
+
+#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)
+# define COMPILER_ID "Embarcadero"
+# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)
+# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)
+# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)
+
+#elif defined(__BORLANDC__)
+# define COMPILER_ID "Borland"
+  /* __BORLANDC__ = 0xVRR */
+# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)
+# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)
+
+#elif defined(__WATCOMC__) && __WATCOMC__ < 1200
+# define COMPILER_ID "Watcom"
+   /* __WATCOMC__ = VVRR */
+# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)
+# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
+# if (__WATCOMC__ % 10) > 0
+#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
+# endif
+
+#elif defined(__WATCOMC__)
+# define COMPILER_ID "OpenWatcom"
+   /* __WATCOMC__ = VVRP + 1100 */
+# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)
+# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
+# if (__WATCOMC__ % 10) > 0
+#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
+# endif
+
+#elif defined(__SUNPRO_CC)
+# define COMPILER_ID "SunPro"
+# if __SUNPRO_CC >= 0x5100
+   /* __SUNPRO_CC = 0xVRRP */
+#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)
+#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)
+#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
+# else
+   /* __SUNPRO_CC = 0xVRP */
+#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)
+#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)
+#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
+# endif
+
+#elif defined(__HP_aCC)
+# define COMPILER_ID "HP"
+  /* __HP_aCC = VVRRPP */
+# define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)
+# define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)
+# define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)
+
+#elif defined(__DECCXX)
+# define COMPILER_ID "Compaq"
+  /* __DECCXX_VER = VVRRTPPPP */
+# define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)
+# define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)
+# define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)
+
+#elif defined(__IBMCPP__) && defined(__COMPILER_VER__)
+# define COMPILER_ID "zOS"
+  /* __IBMCPP__ = VRP */
+# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
+# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
+# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)
+
+#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800
+# define COMPILER_ID "XL"
+  /* __IBMCPP__ = VRP */
+# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
+# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
+# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)
+
+#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800
+# define COMPILER_ID "VisualAge"
+  /* __IBMCPP__ = VRP */
+# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
+# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
+# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)
+
+#elif defined(__PGI)
+# define COMPILER_ID "PGI"
+# define COMPILER_VERSION_MAJOR DEC(__PGIC__)
+# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)
+# if defined(__PGIC_PATCHLEVEL__)
+#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
+# endif
+
+#elif defined(_CRAYC)
+# define COMPILER_ID "Cray"
+# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)
+# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)
+
+#elif defined(__TI_COMPILER_VERSION__)
+# define COMPILER_ID "TI"
+  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
+# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)
+# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)
+# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)
+
+#elif defined(__FUJITSU) || defined(__FCC_VERSION) || defined(__fcc_version)
+# define COMPILER_ID "Fujitsu"
+
+#elif defined(__SCO_VERSION__)
+# define COMPILER_ID "SCO"
+
+#elif defined(__clang__) && defined(__apple_build_version__)
+# define COMPILER_ID "AppleClang"
+# if defined(_MSC_VER)
+#  define SIMULATE_ID "MSVC"
+# endif
+# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
+# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
+# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
+# if defined(_MSC_VER)
+   /* _MSC_VER = VVRR */
+#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
+#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
+# endif
+# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)
+
+#elif defined(__clang__)
+# define COMPILER_ID "Clang"
+# if defined(_MSC_VER)
+#  define SIMULATE_ID "MSVC"
+# endif
+# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
+# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
+# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
+# if defined(_MSC_VER)
+   /* _MSC_VER = VVRR */
+#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
+#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
+# endif
+
+#elif defined(__GNUC__) || defined(__GNUG__)
+# define COMPILER_ID "GNU"
+# if defined(__GNUC__)
+#  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
+# else
+#  define COMPILER_VERSION_MAJOR DEC(__GNUG__)
+# endif
+# if defined(__GNUC_MINOR__)
+#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
+# endif
+# if defined(__GNUC_PATCHLEVEL__)
+#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
+# endif
+
+#elif defined(_MSC_VER)
+# define COMPILER_ID "MSVC"
+  /* _MSC_VER = VVRR */
+# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)
+# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)
+# if defined(_MSC_FULL_VER)
+#  if _MSC_VER >= 1400
+    /* _MSC_FULL_VER = VVRRPPPPP */
+#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)
+#  else
+    /* _MSC_FULL_VER = VVRRPPPP */
+#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
+#  endif
+# endif
+# if defined(_MSC_BUILD)
+#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
+# endif
+
+#elif defined(__VISUALDSPVERSION__) || defined(__ADSPBLACKFIN__) || defined(__ADSPTS__) || defined(__ADSP21000__)
+# define COMPILER_ID "ADSP"
+#if defined(__VISUALDSPVERSION__)
+  /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
+# define COMPILER_VERSION_MAJOR HEX(__VISUALDSPVERSION__>>24)
+# define COMPILER_VERSION_MINOR HEX(__VISUALDSPVERSION__>>16 & 0xFF)
+# define COMPILER_VERSION_PATCH HEX(__VISUALDSPVERSION__>>8  & 0xFF)
+#endif
+
+#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
+# define COMPILER_ID "IAR"
+# if defined(__VER__)
+#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)
+#  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)
+#  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)
+#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
+# endif
+
+#elif defined(__ARMCC_VERSION)
+# define COMPILER_ID "ARMCC"
+#if __ARMCC_VERSION >= 1000000
+  /* __ARMCC_VERSION = VRRPPPP */
+  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)
+  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)
+  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)
+#else
+  /* __ARMCC_VERSION = VRPPPP */
+  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)
+  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
+  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
+#endif
+
+
+#elif defined(_SGI_COMPILER_VERSION) || defined(_COMPILER_VERSION)
+# define COMPILER_ID "MIPSpro"
+# if defined(_SGI_COMPILER_VERSION)
+  /* _SGI_COMPILER_VERSION = VRP */
+#  define COMPILER_VERSION_MAJOR DEC(_SGI_COMPILER_VERSION/100)
+#  define COMPILER_VERSION_MINOR DEC(_SGI_COMPILER_VERSION/10 % 10)
+#  define COMPILER_VERSION_PATCH DEC(_SGI_COMPILER_VERSION    % 10)
+# else
+  /* _COMPILER_VERSION = VRP */
+#  define COMPILER_VERSION_MAJOR DEC(_COMPILER_VERSION/100)
+#  define COMPILER_VERSION_MINOR DEC(_COMPILER_VERSION/10 % 10)
+#  define COMPILER_VERSION_PATCH DEC(_COMPILER_VERSION    % 10)
+# endif
+
+
+/* These compilers are either not known or too old to define an
+  identification macro.  Try to identify the platform and guess that
+  it is the native compiler.  */
+#elif defined(__sgi)
+# define COMPILER_ID "MIPSpro"
+
+#elif defined(__hpux) || defined(__hpua)
+# define COMPILER_ID "HP"
+
+#else /* unknown compiler */
+# define COMPILER_ID ""
+#endif
+
+/* Construct the string literal in pieces to prevent the source from
+   getting matched.  Store it in a pointer rather than an array
+   because some compilers will just produce instructions to fill the
+   array rather than assigning a pointer to a static array.  */
+char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
+#ifdef SIMULATE_ID
+char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
+#endif
+
+#ifdef __QNXNTO__
+char const* qnxnto = "INFO" ":" "qnxnto[]";
+#endif
+
+#if defined(__CRAYXE) || defined(__CRAYXC)
+char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
+#endif
+
+#define STRINGIFY_HELPER(X) #X
+#define STRINGIFY(X) STRINGIFY_HELPER(X)
+
+/* Identify known platforms by name.  */
+#if defined(__linux) || defined(__linux__) || defined(linux)
+# define PLATFORM_ID "Linux"
+
+#elif defined(__CYGWIN__)
+# define PLATFORM_ID "Cygwin"
+
+#elif defined(__MINGW32__)
+# define PLATFORM_ID "MinGW"
+
+#elif defined(__APPLE__)
+# define PLATFORM_ID "Darwin"
+
+#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
+# define PLATFORM_ID "Windows"
+
+#elif defined(__FreeBSD__) || defined(__FreeBSD)
+# define PLATFORM_ID "FreeBSD"
+
+#elif defined(__NetBSD__) || defined(__NetBSD)
+# define PLATFORM_ID "NetBSD"
+
+#elif defined(__OpenBSD__) || defined(__OPENBSD)
+# define PLATFORM_ID "OpenBSD"
+
+#elif defined(__sun) || defined(sun)
+# define PLATFORM_ID "SunOS"
+
+#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
+# define PLATFORM_ID "AIX"
+
+#elif defined(__sgi) || defined(__sgi__) || defined(_SGI)
+# define PLATFORM_ID "IRIX"
+
+#elif defined(__hpux) || defined(__hpux__)
+# define PLATFORM_ID "HP-UX"
+
+#elif defined(__HAIKU__)
+# define PLATFORM_ID "Haiku"
+
+#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
+# define PLATFORM_ID "BeOS"
+
+#elif defined(__QNX__) || defined(__QNXNTO__)
+# define PLATFORM_ID "QNX"
+
+#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
+# define PLATFORM_ID "Tru64"
+
+#elif defined(__riscos) || defined(__riscos__)
+# define PLATFORM_ID "RISCos"
+
+#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
+# define PLATFORM_ID "SINIX"
+
+#elif defined(__UNIX_SV__)
+# define PLATFORM_ID "UNIX_SV"
+
+#elif defined(__bsdos__)
+# define PLATFORM_ID "BSDOS"
+
+#elif defined(_MPRAS) || defined(MPRAS)
+# define PLATFORM_ID "MP-RAS"
+
+#elif defined(__osf) || defined(__osf__)
+# define PLATFORM_ID "OSF1"
+
+#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
+# define PLATFORM_ID "SCO_SV"
+
+#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
+# define PLATFORM_ID "ULTRIX"
+
+#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
+# define PLATFORM_ID "Xenix"
+
+#elif defined(__WATCOMC__)
+# if defined(__LINUX__)
+#  define PLATFORM_ID "Linux"
+
+# elif defined(__DOS__)
+#  define PLATFORM_ID "DOS"
+
+# elif defined(__OS2__)
+#  define PLATFORM_ID "OS2"
+
+# elif defined(__WINDOWS__)
+#  define PLATFORM_ID "Windows3x"
+
+# else /* unknown platform */
+#  define PLATFORM_ID
+# endif
+
+#else /* unknown platform */
+# define PLATFORM_ID
+
+#endif
+
+/* For windows compilers MSVC and Intel we can determine
+   the architecture of the compiler being used.  This is because
+   the compilers do not have flags that can change the architecture,
+   but rather depend on which compiler is being used
+*/
+#if defined(_WIN32) && defined(_MSC_VER)
+# if defined(_M_IA64)
+#  define ARCHITECTURE_ID "IA64"
+
+# elif defined(_M_X64) || defined(_M_AMD64)
+#  define ARCHITECTURE_ID "x64"
+
+# elif defined(_M_IX86)
+#  define ARCHITECTURE_ID "X86"
+
+# elif defined(_M_ARM64)
+#  define ARCHITECTURE_ID "ARM64"
+
+# elif defined(_M_ARM)
+#  if _M_ARM == 4
+#   define ARCHITECTURE_ID "ARMV4I"
+#  elif _M_ARM == 5
+#   define ARCHITECTURE_ID "ARMV5I"
+#  else
+#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
+#  endif
+
+# elif defined(_M_MIPS)
+#  define ARCHITECTURE_ID "MIPS"
+
+# elif defined(_M_SH)
+#  define ARCHITECTURE_ID "SHx"
+
+# else /* unknown architecture */
+#  define ARCHITECTURE_ID ""
+# endif
+
+#elif defined(__WATCOMC__)
+# if defined(_M_I86)
+#  define ARCHITECTURE_ID "I86"
+
+# elif defined(_M_IX86)
+#  define ARCHITECTURE_ID "X86"
+
+# else /* unknown architecture */
+#  define ARCHITECTURE_ID ""
+# endif
+
+#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
+# if defined(__ICCARM__)
+#  define ARCHITECTURE_ID "ARM"
+
+# elif defined(__ICCAVR__)
+#  define ARCHITECTURE_ID "AVR"
+
+# else /* unknown architecture */
+#  define ARCHITECTURE_ID ""
+# endif
+#else
+#  define ARCHITECTURE_ID
+#endif
+
+/* Convert integer to decimal digit literals.  */
+#define DEC(n)                   \
+  ('0' + (((n) / 10000000)%10)), \
+  ('0' + (((n) / 1000000)%10)),  \
+  ('0' + (((n) / 100000)%10)),   \
+  ('0' + (((n) / 10000)%10)),    \
+  ('0' + (((n) / 1000)%10)),     \
+  ('0' + (((n) / 100)%10)),      \
+  ('0' + (((n) / 10)%10)),       \
+  ('0' +  ((n) % 10))
+
+/* Convert integer to hex digit literals.  */
+#define HEX(n)             \
+  ('0' + ((n)>>28 & 0xF)), \
+  ('0' + ((n)>>24 & 0xF)), \
+  ('0' + ((n)>>20 & 0xF)), \
+  ('0' + ((n)>>16 & 0xF)), \
+  ('0' + ((n)>>12 & 0xF)), \
+  ('0' + ((n)>>8  & 0xF)), \
+  ('0' + ((n)>>4  & 0xF)), \
+  ('0' + ((n)     & 0xF))
+
+/* Construct a string literal encoding the version number components. */
+#ifdef COMPILER_VERSION_MAJOR
+char const info_version[] = {
+  'I', 'N', 'F', 'O', ':',
+  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
+  COMPILER_VERSION_MAJOR,
+# ifdef COMPILER_VERSION_MINOR
+  '.', COMPILER_VERSION_MINOR,
+#  ifdef COMPILER_VERSION_PATCH
+   '.', COMPILER_VERSION_PATCH,
+#   ifdef COMPILER_VERSION_TWEAK
+    '.', COMPILER_VERSION_TWEAK,
+#   endif
+#  endif
+# endif
+  ']','\0'};
+#endif
+
+/* Construct a string literal encoding the internal version number. */
+#ifdef COMPILER_VERSION_INTERNAL
+char const info_version_internal[] = {
+  'I', 'N', 'F', 'O', ':',
+  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
+  'i','n','t','e','r','n','a','l','[',
+  COMPILER_VERSION_INTERNAL,']','\0'};
+#endif
+
+/* Construct a string literal encoding the version number components. */
+#ifdef SIMULATE_VERSION_MAJOR
+char const info_simulate_version[] = {
+  'I', 'N', 'F', 'O', ':',
+  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
+  SIMULATE_VERSION_MAJOR,
+# ifdef SIMULATE_VERSION_MINOR
+  '.', SIMULATE_VERSION_MINOR,
+#  ifdef SIMULATE_VERSION_PATCH
+   '.', SIMULATE_VERSION_PATCH,
+#   ifdef SIMULATE_VERSION_TWEAK
+    '.', SIMULATE_VERSION_TWEAK,
+#   endif
+#  endif
+# endif
+  ']','\0'};
+#endif
+
+/* Construct the string literal in pieces to prevent the source from
+   getting matched.  Store it in a pointer rather than an array
+   because some compilers will just produce instructions to fill the
+   array rather than assigning a pointer to a static array.  */
+char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
+char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
+
+
+
+
+#if defined(_MSC_VER) && defined(_MSVC_LANG)
+#define CXX_STD _MSVC_LANG
+#else
+#define CXX_STD __cplusplus
+#endif
+
+const char* info_language_dialect_default = "INFO" ":" "dialect_default["
+#if CXX_STD > 201402L
+  "17"
+#elif CXX_STD >= 201402L
+  "14"
+#elif CXX_STD >= 201103L
+  "11"
+#else
+  "98"
+#endif
+"]";
+
+/*--------------------------------------------------------------------------*/
+
+int main(int argc, char* argv[])
+{
+  int require = 0;
+  require += info_compiler[argc];
+  require += info_platform[argc];
+#ifdef COMPILER_VERSION_MAJOR
+  require += info_version[argc];
+#endif
+#ifdef COMPILER_VERSION_INTERNAL
+  require += info_version_internal[argc];
+#endif
+#ifdef SIMULATE_ID
+  require += info_simulate[argc];
+#endif
+#ifdef SIMULATE_VERSION_MAJOR
+  require += info_simulate_version[argc];
+#endif
+#if defined(__CRAYXE) || defined(__CRAYXC)
+  require += info_cray[argc];
+#endif
+  require += info_language_dialect_default[argc];
+  (void)argv;
+  return require;
+}
diff --git a/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdCXX/a.out b/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdCXX/a.out
new file mode 100755
index 0000000..8813175
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdCXX/a.out differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/C.includecache b/cmake-build-debug/CMakeFiles/Assignment1.dir/C.includecache
new file mode 100644
index 0000000..f2b13e8
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Assignment1.dir/C.includecache
@@ -0,0 +1,716 @@
+#IncludeRegexLine: ^[ 	]*[#%][ 	]*(include|import)[ 	]*[<"]([^">]+)([">])
+
+#IncludeRegexScan: ^.*$
+
+#IncludeRegexComplain: ^$
+
+#IncludeRegexTransform: 
+
+.././fcntl.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/bio.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+spinlock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+sleeplock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+fs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+buf.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/buf.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/bootmain.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+elf.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/elf.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+memlayout.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/buf.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/cat.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/console.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+traps.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/traps.h
+spinlock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+sleeplock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+fs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+file.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/file.h
+memlayout.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+proc.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/date.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/echo.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/elf.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/exec.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+memlayout.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+proc.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+elf.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/elf.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/fcntl.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/file.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+fs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+spinlock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+sleeplock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+file.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/file.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/file.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/forktest.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/fs.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+proc.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+spinlock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+sleeplock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+fs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+buf.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/buf.h
+file.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/file.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/grep.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/ide.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+memlayout.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+proc.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+traps.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/traps.h
+spinlock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+sleeplock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+fs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+buf.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/buf.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/init.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+fcntl.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fcntl.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/ioapic.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+traps.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/traps.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/kalloc.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+memlayout.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+spinlock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/kbd.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+kbd.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/kbd.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/kbd.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/kill.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/lapic.c
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+date.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/date.h
+memlayout.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+traps.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/traps.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/ln.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/log.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+spinlock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+sleeplock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+fs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+buf.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/buf.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/ls.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+fs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/main.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+memlayout.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+proc.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/memide.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+proc.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+traps.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/traps.h
+spinlock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+sleeplock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+fs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+buf.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/buf.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/mkdir.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/mkfs.c
+stdio.h
+-
+unistd.h
+-
+stdlib.h
+-
+string.h
+-
+fcntl.h
+-
+assert.h
+-
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+fs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/mp.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+memlayout.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+mp.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mp.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+proc.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/mp.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/picirq.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+traps.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/traps.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/pipe.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+proc.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+fs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+spinlock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+sleeplock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+file.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/file.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/policy.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/printf.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.c
+stddef.h
+-
+schedulinginterface.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/schedulinginterface.h
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+memlayout.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+proc.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+spinlock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/rm.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/sanity.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/schedulinginterface.h
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/sh.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+fcntl.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fcntl.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+memlayout.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+proc.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+spinlock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+sleeplock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+memlayout.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+proc.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+spinlock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/stressfs.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+fs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+fcntl.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fcntl.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/string.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/syscall.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+memlayout.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+proc.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+syscall.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/syscall.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/syscall.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/sysfile.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+proc.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+fs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+spinlock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+sleeplock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+file.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/file.h
+fcntl.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fcntl.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/sysproc.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+date.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/date.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+memlayout.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+proc.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/trap.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+memlayout.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+proc.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+traps.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/traps.h
+spinlock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/traps.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/uart.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+traps.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/traps.h
+spinlock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+sleeplock.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+fs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+file.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/file.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+proc.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/ulib.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+fcntl.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/fcntl.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/umalloc.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/vm.c
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+defs.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+x86.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+memlayout.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+mmu.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+proc.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+elf.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/elf.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/wc.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/zombie.c
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+stat.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+user.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/CXX.includecache b/cmake-build-debug/CMakeFiles/Assignment1.dir/CXX.includecache
new file mode 100644
index 0000000..5f57c0a
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Assignment1.dir/CXX.includecache
@@ -0,0 +1,28 @@
+#IncludeRegexLine: ^[ 	]*[#%][ 	]*(include|import)[ 	]*[<"]([^">]+)([">])
+
+#IncludeRegexScan: ^.*$
+
+#IncludeRegexComplain: ^$
+
+#IncludeRegexTransform: 
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/ass1ds.cpp
+ass1ds.hpp
+/users/studs/bsc/2016/rosent/os192/Assignment1/ass1ds.hpp
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/ass1ds.hpp
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+param.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+schedulinginterface.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/schedulinginterface.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/schedulinginterface.h
+types.h
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+
+/users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/DependInfo.cmake b/cmake-build-debug/CMakeFiles/Assignment1.dir/DependInfo.cmake
new file mode 100644
index 0000000..de6ce5a
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Assignment1.dir/DependInfo.cmake
@@ -0,0 +1,77 @@
+# The set of languages for which implicit dependencies are needed:
+set(CMAKE_DEPENDS_LANGUAGES
+  "C"
+  "CXX"
+  )
+# The set of files for implicit dependencies of each language:
+set(CMAKE_DEPENDS_CHECK_C
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/bio.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/bio.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/bootmain.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/bootmain.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/cat.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/cat.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/console.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/console.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/echo.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/echo.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/exec.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/exec.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/file.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/file.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/forktest.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/forktest.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/fs.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/fs.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/grep.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/grep.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/ide.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/ide.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/init.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/init.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/ioapic.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/ioapic.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/kalloc.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/kalloc.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/kbd.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/kbd.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/kill.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/kill.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/lapic.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/lapic.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/ln.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/ln.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/log.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/log.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/ls.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/ls.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/main.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/main.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/memide.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/memide.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/mkdir.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/mkdir.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/mkfs.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/mkfs.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/mp.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/mp.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/picirq.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/picirq.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/pipe.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/pipe.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/policy.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/policy.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/printf.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/printf.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/proc.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/proc.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/rm.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/rm.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/sanity.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/sanity.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/sh.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/sh.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/sleeplock.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/spinlock.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/stressfs.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/stressfs.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/string.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/string.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/syscall.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/syscall.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/sysfile.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/sysfile.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/sysproc.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/sysproc.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/trap.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/trap.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/uart.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/uart.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/ulib.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/ulib.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/umalloc.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/umalloc.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/vm.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/vm.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/wc.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/wc.c.o"
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/zombie.c" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/zombie.c.o"
+  )
+set(CMAKE_C_COMPILER_ID "GNU")
+
+# The include file search paths:
+set(CMAKE_C_TARGET_INCLUDE_PATH
+  "../."
+  )
+set(CMAKE_DEPENDS_CHECK_CXX
+  "/users/studs/bsc/2016/rosent/os192/Assignment1/ass1ds.cpp" "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/ass1ds.cpp.o"
+  )
+set(CMAKE_CXX_COMPILER_ID "GNU")
+
+# The include file search paths:
+set(CMAKE_CXX_TARGET_INCLUDE_PATH
+  "../."
+  )
+
+# Targets to which this target links.
+set(CMAKE_TARGET_LINKED_INFO_FILES
+  )
+
+# Fortran module output directory.
+set(CMAKE_Fortran_TARGET_MODULE_DIR "")
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/ass1ds.cpp.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/ass1ds.cpp.o
new file mode 100644
index 0000000..d20d89f
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/ass1ds.cpp.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/bio.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/bio.c.o
new file mode 100644
index 0000000..0446ea0
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/bio.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/bootmain.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/bootmain.c.o
new file mode 100644
index 0000000..22b6107
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/bootmain.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/build.make b/cmake-build-debug/CMakeFiles/Assignment1.dir/build.make
new file mode 100644
index 0000000..fe9a7ff
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Assignment1.dir/build.make
@@ -0,0 +1,1382 @@
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.10
+
+# Delete rule output on recipe failure.
+.DELETE_ON_ERROR:
+
+
+#=============================================================================
+# Special targets provided by cmake.
+
+# Disable implicit rules so canonical targets will work.
+.SUFFIXES:
+
+
+# Remove some rules from gmake that .SUFFIXES does not remove.
+SUFFIXES =
+
+.SUFFIXES: .hpux_make_needs_suffix_list
+
+
+# Suppress display of executed commands.
+$(VERBOSE).SILENT:
+
+
+# A target that is always out of date.
+cmake_force:
+
+.PHONY : cmake_force
+
+#=============================================================================
+# Set environment variables for the build.
+
+# The shell in which to execute make rules.
+SHELL = /bin/sh
+
+# The CMake executable.
+CMAKE_COMMAND = /users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake
+
+# The command to remove a file.
+RM = /users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -E remove -f
+
+# Escaping for special characters.
+EQUALS = =
+
+# The top-level source directory on which CMake was run.
+CMAKE_SOURCE_DIR = /users/studs/bsc/2016/rosent/os192/Assignment1
+
+# The top-level build directory on which CMake was run.
+CMAKE_BINARY_DIR = /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug
+
+# Include any dependencies generated for this target.
+include CMakeFiles/Assignment1.dir/depend.make
+
+# Include the progress variables for this target.
+include CMakeFiles/Assignment1.dir/progress.make
+
+# Include the compile flags for this target's objects.
+include CMakeFiles/Assignment1.dir/flags.make
+
+CMakeFiles/Assignment1.dir/ass1ds.cpp.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/ass1ds.cpp.o: ../ass1ds.cpp
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) "Building CXX object CMakeFiles/Assignment1.dir/ass1ds.cpp.o"
+	/usr/bin/c++  $(CXX_DEFINES) $(CXX_INCLUDES) $(CXX_FLAGS) -o CMakeFiles/Assignment1.dir/ass1ds.cpp.o -c /users/studs/bsc/2016/rosent/os192/Assignment1/ass1ds.cpp
+
+CMakeFiles/Assignment1.dir/ass1ds.cpp.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing CXX source to CMakeFiles/Assignment1.dir/ass1ds.cpp.i"
+	/usr/bin/c++ $(CXX_DEFINES) $(CXX_INCLUDES) $(CXX_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/ass1ds.cpp > CMakeFiles/Assignment1.dir/ass1ds.cpp.i
+
+CMakeFiles/Assignment1.dir/ass1ds.cpp.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling CXX source to assembly CMakeFiles/Assignment1.dir/ass1ds.cpp.s"
+	/usr/bin/c++ $(CXX_DEFINES) $(CXX_INCLUDES) $(CXX_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/ass1ds.cpp -o CMakeFiles/Assignment1.dir/ass1ds.cpp.s
+
+CMakeFiles/Assignment1.dir/ass1ds.cpp.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/ass1ds.cpp.o.requires
+
+CMakeFiles/Assignment1.dir/ass1ds.cpp.o.provides: CMakeFiles/Assignment1.dir/ass1ds.cpp.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ass1ds.cpp.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/ass1ds.cpp.o.provides
+
+CMakeFiles/Assignment1.dir/ass1ds.cpp.o.provides.build: CMakeFiles/Assignment1.dir/ass1ds.cpp.o
+
+
+CMakeFiles/Assignment1.dir/bio.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/bio.c.o: ../bio.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_2) "Building C object CMakeFiles/Assignment1.dir/bio.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/bio.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/bio.c
+
+CMakeFiles/Assignment1.dir/bio.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/bio.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/bio.c > CMakeFiles/Assignment1.dir/bio.c.i
+
+CMakeFiles/Assignment1.dir/bio.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/bio.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/bio.c -o CMakeFiles/Assignment1.dir/bio.c.s
+
+CMakeFiles/Assignment1.dir/bio.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/bio.c.o.requires
+
+CMakeFiles/Assignment1.dir/bio.c.o.provides: CMakeFiles/Assignment1.dir/bio.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/bio.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/bio.c.o.provides
+
+CMakeFiles/Assignment1.dir/bio.c.o.provides.build: CMakeFiles/Assignment1.dir/bio.c.o
+
+
+CMakeFiles/Assignment1.dir/bootmain.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/bootmain.c.o: ../bootmain.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_3) "Building C object CMakeFiles/Assignment1.dir/bootmain.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/bootmain.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/bootmain.c
+
+CMakeFiles/Assignment1.dir/bootmain.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/bootmain.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/bootmain.c > CMakeFiles/Assignment1.dir/bootmain.c.i
+
+CMakeFiles/Assignment1.dir/bootmain.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/bootmain.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/bootmain.c -o CMakeFiles/Assignment1.dir/bootmain.c.s
+
+CMakeFiles/Assignment1.dir/bootmain.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/bootmain.c.o.requires
+
+CMakeFiles/Assignment1.dir/bootmain.c.o.provides: CMakeFiles/Assignment1.dir/bootmain.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/bootmain.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/bootmain.c.o.provides
+
+CMakeFiles/Assignment1.dir/bootmain.c.o.provides.build: CMakeFiles/Assignment1.dir/bootmain.c.o
+
+
+CMakeFiles/Assignment1.dir/cat.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/cat.c.o: ../cat.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_4) "Building C object CMakeFiles/Assignment1.dir/cat.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/cat.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/cat.c
+
+CMakeFiles/Assignment1.dir/cat.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/cat.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/cat.c > CMakeFiles/Assignment1.dir/cat.c.i
+
+CMakeFiles/Assignment1.dir/cat.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/cat.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/cat.c -o CMakeFiles/Assignment1.dir/cat.c.s
+
+CMakeFiles/Assignment1.dir/cat.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/cat.c.o.requires
+
+CMakeFiles/Assignment1.dir/cat.c.o.provides: CMakeFiles/Assignment1.dir/cat.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/cat.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/cat.c.o.provides
+
+CMakeFiles/Assignment1.dir/cat.c.o.provides.build: CMakeFiles/Assignment1.dir/cat.c.o
+
+
+CMakeFiles/Assignment1.dir/console.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/console.c.o: ../console.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_5) "Building C object CMakeFiles/Assignment1.dir/console.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/console.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/console.c
+
+CMakeFiles/Assignment1.dir/console.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/console.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/console.c > CMakeFiles/Assignment1.dir/console.c.i
+
+CMakeFiles/Assignment1.dir/console.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/console.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/console.c -o CMakeFiles/Assignment1.dir/console.c.s
+
+CMakeFiles/Assignment1.dir/console.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/console.c.o.requires
+
+CMakeFiles/Assignment1.dir/console.c.o.provides: CMakeFiles/Assignment1.dir/console.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/console.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/console.c.o.provides
+
+CMakeFiles/Assignment1.dir/console.c.o.provides.build: CMakeFiles/Assignment1.dir/console.c.o
+
+
+CMakeFiles/Assignment1.dir/echo.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/echo.c.o: ../echo.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_6) "Building C object CMakeFiles/Assignment1.dir/echo.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/echo.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/echo.c
+
+CMakeFiles/Assignment1.dir/echo.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/echo.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/echo.c > CMakeFiles/Assignment1.dir/echo.c.i
+
+CMakeFiles/Assignment1.dir/echo.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/echo.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/echo.c -o CMakeFiles/Assignment1.dir/echo.c.s
+
+CMakeFiles/Assignment1.dir/echo.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/echo.c.o.requires
+
+CMakeFiles/Assignment1.dir/echo.c.o.provides: CMakeFiles/Assignment1.dir/echo.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/echo.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/echo.c.o.provides
+
+CMakeFiles/Assignment1.dir/echo.c.o.provides.build: CMakeFiles/Assignment1.dir/echo.c.o
+
+
+CMakeFiles/Assignment1.dir/exec.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/exec.c.o: ../exec.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_7) "Building C object CMakeFiles/Assignment1.dir/exec.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/exec.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/exec.c
+
+CMakeFiles/Assignment1.dir/exec.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/exec.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/exec.c > CMakeFiles/Assignment1.dir/exec.c.i
+
+CMakeFiles/Assignment1.dir/exec.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/exec.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/exec.c -o CMakeFiles/Assignment1.dir/exec.c.s
+
+CMakeFiles/Assignment1.dir/exec.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/exec.c.o.requires
+
+CMakeFiles/Assignment1.dir/exec.c.o.provides: CMakeFiles/Assignment1.dir/exec.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/exec.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/exec.c.o.provides
+
+CMakeFiles/Assignment1.dir/exec.c.o.provides.build: CMakeFiles/Assignment1.dir/exec.c.o
+
+
+CMakeFiles/Assignment1.dir/file.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/file.c.o: ../file.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_8) "Building C object CMakeFiles/Assignment1.dir/file.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/file.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/file.c
+
+CMakeFiles/Assignment1.dir/file.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/file.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/file.c > CMakeFiles/Assignment1.dir/file.c.i
+
+CMakeFiles/Assignment1.dir/file.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/file.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/file.c -o CMakeFiles/Assignment1.dir/file.c.s
+
+CMakeFiles/Assignment1.dir/file.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/file.c.o.requires
+
+CMakeFiles/Assignment1.dir/file.c.o.provides: CMakeFiles/Assignment1.dir/file.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/file.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/file.c.o.provides
+
+CMakeFiles/Assignment1.dir/file.c.o.provides.build: CMakeFiles/Assignment1.dir/file.c.o
+
+
+CMakeFiles/Assignment1.dir/forktest.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/forktest.c.o: ../forktest.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_9) "Building C object CMakeFiles/Assignment1.dir/forktest.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/forktest.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/forktest.c
+
+CMakeFiles/Assignment1.dir/forktest.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/forktest.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/forktest.c > CMakeFiles/Assignment1.dir/forktest.c.i
+
+CMakeFiles/Assignment1.dir/forktest.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/forktest.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/forktest.c -o CMakeFiles/Assignment1.dir/forktest.c.s
+
+CMakeFiles/Assignment1.dir/forktest.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/forktest.c.o.requires
+
+CMakeFiles/Assignment1.dir/forktest.c.o.provides: CMakeFiles/Assignment1.dir/forktest.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/forktest.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/forktest.c.o.provides
+
+CMakeFiles/Assignment1.dir/forktest.c.o.provides.build: CMakeFiles/Assignment1.dir/forktest.c.o
+
+
+CMakeFiles/Assignment1.dir/fs.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/fs.c.o: ../fs.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_10) "Building C object CMakeFiles/Assignment1.dir/fs.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/fs.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/fs.c
+
+CMakeFiles/Assignment1.dir/fs.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/fs.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/fs.c > CMakeFiles/Assignment1.dir/fs.c.i
+
+CMakeFiles/Assignment1.dir/fs.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/fs.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/fs.c -o CMakeFiles/Assignment1.dir/fs.c.s
+
+CMakeFiles/Assignment1.dir/fs.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/fs.c.o.requires
+
+CMakeFiles/Assignment1.dir/fs.c.o.provides: CMakeFiles/Assignment1.dir/fs.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/fs.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/fs.c.o.provides
+
+CMakeFiles/Assignment1.dir/fs.c.o.provides.build: CMakeFiles/Assignment1.dir/fs.c.o
+
+
+CMakeFiles/Assignment1.dir/grep.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/grep.c.o: ../grep.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_11) "Building C object CMakeFiles/Assignment1.dir/grep.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/grep.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/grep.c
+
+CMakeFiles/Assignment1.dir/grep.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/grep.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/grep.c > CMakeFiles/Assignment1.dir/grep.c.i
+
+CMakeFiles/Assignment1.dir/grep.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/grep.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/grep.c -o CMakeFiles/Assignment1.dir/grep.c.s
+
+CMakeFiles/Assignment1.dir/grep.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/grep.c.o.requires
+
+CMakeFiles/Assignment1.dir/grep.c.o.provides: CMakeFiles/Assignment1.dir/grep.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/grep.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/grep.c.o.provides
+
+CMakeFiles/Assignment1.dir/grep.c.o.provides.build: CMakeFiles/Assignment1.dir/grep.c.o
+
+
+CMakeFiles/Assignment1.dir/ide.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/ide.c.o: ../ide.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_12) "Building C object CMakeFiles/Assignment1.dir/ide.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/ide.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/ide.c
+
+CMakeFiles/Assignment1.dir/ide.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/ide.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/ide.c > CMakeFiles/Assignment1.dir/ide.c.i
+
+CMakeFiles/Assignment1.dir/ide.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/ide.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/ide.c -o CMakeFiles/Assignment1.dir/ide.c.s
+
+CMakeFiles/Assignment1.dir/ide.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/ide.c.o.requires
+
+CMakeFiles/Assignment1.dir/ide.c.o.provides: CMakeFiles/Assignment1.dir/ide.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ide.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/ide.c.o.provides
+
+CMakeFiles/Assignment1.dir/ide.c.o.provides.build: CMakeFiles/Assignment1.dir/ide.c.o
+
+
+CMakeFiles/Assignment1.dir/init.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/init.c.o: ../init.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_13) "Building C object CMakeFiles/Assignment1.dir/init.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/init.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/init.c
+
+CMakeFiles/Assignment1.dir/init.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/init.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/init.c > CMakeFiles/Assignment1.dir/init.c.i
+
+CMakeFiles/Assignment1.dir/init.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/init.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/init.c -o CMakeFiles/Assignment1.dir/init.c.s
+
+CMakeFiles/Assignment1.dir/init.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/init.c.o.requires
+
+CMakeFiles/Assignment1.dir/init.c.o.provides: CMakeFiles/Assignment1.dir/init.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/init.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/init.c.o.provides
+
+CMakeFiles/Assignment1.dir/init.c.o.provides.build: CMakeFiles/Assignment1.dir/init.c.o
+
+
+CMakeFiles/Assignment1.dir/ioapic.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/ioapic.c.o: ../ioapic.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_14) "Building C object CMakeFiles/Assignment1.dir/ioapic.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/ioapic.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/ioapic.c
+
+CMakeFiles/Assignment1.dir/ioapic.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/ioapic.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/ioapic.c > CMakeFiles/Assignment1.dir/ioapic.c.i
+
+CMakeFiles/Assignment1.dir/ioapic.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/ioapic.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/ioapic.c -o CMakeFiles/Assignment1.dir/ioapic.c.s
+
+CMakeFiles/Assignment1.dir/ioapic.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/ioapic.c.o.requires
+
+CMakeFiles/Assignment1.dir/ioapic.c.o.provides: CMakeFiles/Assignment1.dir/ioapic.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ioapic.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/ioapic.c.o.provides
+
+CMakeFiles/Assignment1.dir/ioapic.c.o.provides.build: CMakeFiles/Assignment1.dir/ioapic.c.o
+
+
+CMakeFiles/Assignment1.dir/kalloc.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/kalloc.c.o: ../kalloc.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_15) "Building C object CMakeFiles/Assignment1.dir/kalloc.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/kalloc.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/kalloc.c
+
+CMakeFiles/Assignment1.dir/kalloc.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/kalloc.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/kalloc.c > CMakeFiles/Assignment1.dir/kalloc.c.i
+
+CMakeFiles/Assignment1.dir/kalloc.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/kalloc.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/kalloc.c -o CMakeFiles/Assignment1.dir/kalloc.c.s
+
+CMakeFiles/Assignment1.dir/kalloc.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/kalloc.c.o.requires
+
+CMakeFiles/Assignment1.dir/kalloc.c.o.provides: CMakeFiles/Assignment1.dir/kalloc.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/kalloc.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/kalloc.c.o.provides
+
+CMakeFiles/Assignment1.dir/kalloc.c.o.provides.build: CMakeFiles/Assignment1.dir/kalloc.c.o
+
+
+CMakeFiles/Assignment1.dir/kbd.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/kbd.c.o: ../kbd.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_16) "Building C object CMakeFiles/Assignment1.dir/kbd.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/kbd.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/kbd.c
+
+CMakeFiles/Assignment1.dir/kbd.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/kbd.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/kbd.c > CMakeFiles/Assignment1.dir/kbd.c.i
+
+CMakeFiles/Assignment1.dir/kbd.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/kbd.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/kbd.c -o CMakeFiles/Assignment1.dir/kbd.c.s
+
+CMakeFiles/Assignment1.dir/kbd.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/kbd.c.o.requires
+
+CMakeFiles/Assignment1.dir/kbd.c.o.provides: CMakeFiles/Assignment1.dir/kbd.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/kbd.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/kbd.c.o.provides
+
+CMakeFiles/Assignment1.dir/kbd.c.o.provides.build: CMakeFiles/Assignment1.dir/kbd.c.o
+
+
+CMakeFiles/Assignment1.dir/kill.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/kill.c.o: ../kill.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_17) "Building C object CMakeFiles/Assignment1.dir/kill.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/kill.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/kill.c
+
+CMakeFiles/Assignment1.dir/kill.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/kill.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/kill.c > CMakeFiles/Assignment1.dir/kill.c.i
+
+CMakeFiles/Assignment1.dir/kill.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/kill.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/kill.c -o CMakeFiles/Assignment1.dir/kill.c.s
+
+CMakeFiles/Assignment1.dir/kill.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/kill.c.o.requires
+
+CMakeFiles/Assignment1.dir/kill.c.o.provides: CMakeFiles/Assignment1.dir/kill.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/kill.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/kill.c.o.provides
+
+CMakeFiles/Assignment1.dir/kill.c.o.provides.build: CMakeFiles/Assignment1.dir/kill.c.o
+
+
+CMakeFiles/Assignment1.dir/lapic.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/lapic.c.o: ../lapic.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_18) "Building C object CMakeFiles/Assignment1.dir/lapic.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/lapic.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/lapic.c
+
+CMakeFiles/Assignment1.dir/lapic.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/lapic.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/lapic.c > CMakeFiles/Assignment1.dir/lapic.c.i
+
+CMakeFiles/Assignment1.dir/lapic.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/lapic.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/lapic.c -o CMakeFiles/Assignment1.dir/lapic.c.s
+
+CMakeFiles/Assignment1.dir/lapic.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/lapic.c.o.requires
+
+CMakeFiles/Assignment1.dir/lapic.c.o.provides: CMakeFiles/Assignment1.dir/lapic.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/lapic.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/lapic.c.o.provides
+
+CMakeFiles/Assignment1.dir/lapic.c.o.provides.build: CMakeFiles/Assignment1.dir/lapic.c.o
+
+
+CMakeFiles/Assignment1.dir/ln.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/ln.c.o: ../ln.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_19) "Building C object CMakeFiles/Assignment1.dir/ln.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/ln.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/ln.c
+
+CMakeFiles/Assignment1.dir/ln.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/ln.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/ln.c > CMakeFiles/Assignment1.dir/ln.c.i
+
+CMakeFiles/Assignment1.dir/ln.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/ln.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/ln.c -o CMakeFiles/Assignment1.dir/ln.c.s
+
+CMakeFiles/Assignment1.dir/ln.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/ln.c.o.requires
+
+CMakeFiles/Assignment1.dir/ln.c.o.provides: CMakeFiles/Assignment1.dir/ln.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ln.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/ln.c.o.provides
+
+CMakeFiles/Assignment1.dir/ln.c.o.provides.build: CMakeFiles/Assignment1.dir/ln.c.o
+
+
+CMakeFiles/Assignment1.dir/log.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/log.c.o: ../log.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_20) "Building C object CMakeFiles/Assignment1.dir/log.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/log.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/log.c
+
+CMakeFiles/Assignment1.dir/log.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/log.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/log.c > CMakeFiles/Assignment1.dir/log.c.i
+
+CMakeFiles/Assignment1.dir/log.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/log.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/log.c -o CMakeFiles/Assignment1.dir/log.c.s
+
+CMakeFiles/Assignment1.dir/log.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/log.c.o.requires
+
+CMakeFiles/Assignment1.dir/log.c.o.provides: CMakeFiles/Assignment1.dir/log.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/log.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/log.c.o.provides
+
+CMakeFiles/Assignment1.dir/log.c.o.provides.build: CMakeFiles/Assignment1.dir/log.c.o
+
+
+CMakeFiles/Assignment1.dir/ls.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/ls.c.o: ../ls.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_21) "Building C object CMakeFiles/Assignment1.dir/ls.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/ls.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/ls.c
+
+CMakeFiles/Assignment1.dir/ls.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/ls.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/ls.c > CMakeFiles/Assignment1.dir/ls.c.i
+
+CMakeFiles/Assignment1.dir/ls.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/ls.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/ls.c -o CMakeFiles/Assignment1.dir/ls.c.s
+
+CMakeFiles/Assignment1.dir/ls.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/ls.c.o.requires
+
+CMakeFiles/Assignment1.dir/ls.c.o.provides: CMakeFiles/Assignment1.dir/ls.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ls.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/ls.c.o.provides
+
+CMakeFiles/Assignment1.dir/ls.c.o.provides.build: CMakeFiles/Assignment1.dir/ls.c.o
+
+
+CMakeFiles/Assignment1.dir/main.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/main.c.o: ../main.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_22) "Building C object CMakeFiles/Assignment1.dir/main.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/main.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/main.c
+
+CMakeFiles/Assignment1.dir/main.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/main.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/main.c > CMakeFiles/Assignment1.dir/main.c.i
+
+CMakeFiles/Assignment1.dir/main.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/main.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/main.c -o CMakeFiles/Assignment1.dir/main.c.s
+
+CMakeFiles/Assignment1.dir/main.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/main.c.o.requires
+
+CMakeFiles/Assignment1.dir/main.c.o.provides: CMakeFiles/Assignment1.dir/main.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/main.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/main.c.o.provides
+
+CMakeFiles/Assignment1.dir/main.c.o.provides.build: CMakeFiles/Assignment1.dir/main.c.o
+
+
+CMakeFiles/Assignment1.dir/memide.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/memide.c.o: ../memide.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_23) "Building C object CMakeFiles/Assignment1.dir/memide.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/memide.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/memide.c
+
+CMakeFiles/Assignment1.dir/memide.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/memide.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/memide.c > CMakeFiles/Assignment1.dir/memide.c.i
+
+CMakeFiles/Assignment1.dir/memide.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/memide.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/memide.c -o CMakeFiles/Assignment1.dir/memide.c.s
+
+CMakeFiles/Assignment1.dir/memide.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/memide.c.o.requires
+
+CMakeFiles/Assignment1.dir/memide.c.o.provides: CMakeFiles/Assignment1.dir/memide.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/memide.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/memide.c.o.provides
+
+CMakeFiles/Assignment1.dir/memide.c.o.provides.build: CMakeFiles/Assignment1.dir/memide.c.o
+
+
+CMakeFiles/Assignment1.dir/mkdir.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/mkdir.c.o: ../mkdir.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_24) "Building C object CMakeFiles/Assignment1.dir/mkdir.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/mkdir.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/mkdir.c
+
+CMakeFiles/Assignment1.dir/mkdir.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/mkdir.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/mkdir.c > CMakeFiles/Assignment1.dir/mkdir.c.i
+
+CMakeFiles/Assignment1.dir/mkdir.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/mkdir.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/mkdir.c -o CMakeFiles/Assignment1.dir/mkdir.c.s
+
+CMakeFiles/Assignment1.dir/mkdir.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/mkdir.c.o.requires
+
+CMakeFiles/Assignment1.dir/mkdir.c.o.provides: CMakeFiles/Assignment1.dir/mkdir.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/mkdir.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/mkdir.c.o.provides
+
+CMakeFiles/Assignment1.dir/mkdir.c.o.provides.build: CMakeFiles/Assignment1.dir/mkdir.c.o
+
+
+CMakeFiles/Assignment1.dir/mkfs.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/mkfs.c.o: ../mkfs.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_25) "Building C object CMakeFiles/Assignment1.dir/mkfs.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/mkfs.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/mkfs.c
+
+CMakeFiles/Assignment1.dir/mkfs.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/mkfs.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/mkfs.c > CMakeFiles/Assignment1.dir/mkfs.c.i
+
+CMakeFiles/Assignment1.dir/mkfs.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/mkfs.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/mkfs.c -o CMakeFiles/Assignment1.dir/mkfs.c.s
+
+CMakeFiles/Assignment1.dir/mkfs.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/mkfs.c.o.requires
+
+CMakeFiles/Assignment1.dir/mkfs.c.o.provides: CMakeFiles/Assignment1.dir/mkfs.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/mkfs.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/mkfs.c.o.provides
+
+CMakeFiles/Assignment1.dir/mkfs.c.o.provides.build: CMakeFiles/Assignment1.dir/mkfs.c.o
+
+
+CMakeFiles/Assignment1.dir/mp.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/mp.c.o: ../mp.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_26) "Building C object CMakeFiles/Assignment1.dir/mp.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/mp.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/mp.c
+
+CMakeFiles/Assignment1.dir/mp.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/mp.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/mp.c > CMakeFiles/Assignment1.dir/mp.c.i
+
+CMakeFiles/Assignment1.dir/mp.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/mp.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/mp.c -o CMakeFiles/Assignment1.dir/mp.c.s
+
+CMakeFiles/Assignment1.dir/mp.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/mp.c.o.requires
+
+CMakeFiles/Assignment1.dir/mp.c.o.provides: CMakeFiles/Assignment1.dir/mp.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/mp.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/mp.c.o.provides
+
+CMakeFiles/Assignment1.dir/mp.c.o.provides.build: CMakeFiles/Assignment1.dir/mp.c.o
+
+
+CMakeFiles/Assignment1.dir/picirq.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/picirq.c.o: ../picirq.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_27) "Building C object CMakeFiles/Assignment1.dir/picirq.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/picirq.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/picirq.c
+
+CMakeFiles/Assignment1.dir/picirq.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/picirq.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/picirq.c > CMakeFiles/Assignment1.dir/picirq.c.i
+
+CMakeFiles/Assignment1.dir/picirq.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/picirq.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/picirq.c -o CMakeFiles/Assignment1.dir/picirq.c.s
+
+CMakeFiles/Assignment1.dir/picirq.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/picirq.c.o.requires
+
+CMakeFiles/Assignment1.dir/picirq.c.o.provides: CMakeFiles/Assignment1.dir/picirq.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/picirq.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/picirq.c.o.provides
+
+CMakeFiles/Assignment1.dir/picirq.c.o.provides.build: CMakeFiles/Assignment1.dir/picirq.c.o
+
+
+CMakeFiles/Assignment1.dir/pipe.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/pipe.c.o: ../pipe.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_28) "Building C object CMakeFiles/Assignment1.dir/pipe.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/pipe.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/pipe.c
+
+CMakeFiles/Assignment1.dir/pipe.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/pipe.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/pipe.c > CMakeFiles/Assignment1.dir/pipe.c.i
+
+CMakeFiles/Assignment1.dir/pipe.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/pipe.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/pipe.c -o CMakeFiles/Assignment1.dir/pipe.c.s
+
+CMakeFiles/Assignment1.dir/pipe.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/pipe.c.o.requires
+
+CMakeFiles/Assignment1.dir/pipe.c.o.provides: CMakeFiles/Assignment1.dir/pipe.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/pipe.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/pipe.c.o.provides
+
+CMakeFiles/Assignment1.dir/pipe.c.o.provides.build: CMakeFiles/Assignment1.dir/pipe.c.o
+
+
+CMakeFiles/Assignment1.dir/policy.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/policy.c.o: ../policy.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_29) "Building C object CMakeFiles/Assignment1.dir/policy.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/policy.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/policy.c
+
+CMakeFiles/Assignment1.dir/policy.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/policy.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/policy.c > CMakeFiles/Assignment1.dir/policy.c.i
+
+CMakeFiles/Assignment1.dir/policy.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/policy.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/policy.c -o CMakeFiles/Assignment1.dir/policy.c.s
+
+CMakeFiles/Assignment1.dir/policy.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/policy.c.o.requires
+
+CMakeFiles/Assignment1.dir/policy.c.o.provides: CMakeFiles/Assignment1.dir/policy.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/policy.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/policy.c.o.provides
+
+CMakeFiles/Assignment1.dir/policy.c.o.provides.build: CMakeFiles/Assignment1.dir/policy.c.o
+
+
+CMakeFiles/Assignment1.dir/printf.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/printf.c.o: ../printf.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_30) "Building C object CMakeFiles/Assignment1.dir/printf.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/printf.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/printf.c
+
+CMakeFiles/Assignment1.dir/printf.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/printf.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/printf.c > CMakeFiles/Assignment1.dir/printf.c.i
+
+CMakeFiles/Assignment1.dir/printf.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/printf.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/printf.c -o CMakeFiles/Assignment1.dir/printf.c.s
+
+CMakeFiles/Assignment1.dir/printf.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/printf.c.o.requires
+
+CMakeFiles/Assignment1.dir/printf.c.o.provides: CMakeFiles/Assignment1.dir/printf.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/printf.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/printf.c.o.provides
+
+CMakeFiles/Assignment1.dir/printf.c.o.provides.build: CMakeFiles/Assignment1.dir/printf.c.o
+
+
+CMakeFiles/Assignment1.dir/proc.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/proc.c.o: ../proc.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_31) "Building C object CMakeFiles/Assignment1.dir/proc.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/proc.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/proc.c
+
+CMakeFiles/Assignment1.dir/proc.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/proc.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/proc.c > CMakeFiles/Assignment1.dir/proc.c.i
+
+CMakeFiles/Assignment1.dir/proc.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/proc.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/proc.c -o CMakeFiles/Assignment1.dir/proc.c.s
+
+CMakeFiles/Assignment1.dir/proc.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/proc.c.o.requires
+
+CMakeFiles/Assignment1.dir/proc.c.o.provides: CMakeFiles/Assignment1.dir/proc.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/proc.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/proc.c.o.provides
+
+CMakeFiles/Assignment1.dir/proc.c.o.provides.build: CMakeFiles/Assignment1.dir/proc.c.o
+
+
+CMakeFiles/Assignment1.dir/rm.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/rm.c.o: ../rm.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_32) "Building C object CMakeFiles/Assignment1.dir/rm.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/rm.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/rm.c
+
+CMakeFiles/Assignment1.dir/rm.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/rm.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/rm.c > CMakeFiles/Assignment1.dir/rm.c.i
+
+CMakeFiles/Assignment1.dir/rm.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/rm.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/rm.c -o CMakeFiles/Assignment1.dir/rm.c.s
+
+CMakeFiles/Assignment1.dir/rm.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/rm.c.o.requires
+
+CMakeFiles/Assignment1.dir/rm.c.o.provides: CMakeFiles/Assignment1.dir/rm.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/rm.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/rm.c.o.provides
+
+CMakeFiles/Assignment1.dir/rm.c.o.provides.build: CMakeFiles/Assignment1.dir/rm.c.o
+
+
+CMakeFiles/Assignment1.dir/sanity.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/sanity.c.o: ../sanity.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_33) "Building C object CMakeFiles/Assignment1.dir/sanity.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/sanity.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/sanity.c
+
+CMakeFiles/Assignment1.dir/sanity.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/sanity.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/sanity.c > CMakeFiles/Assignment1.dir/sanity.c.i
+
+CMakeFiles/Assignment1.dir/sanity.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/sanity.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/sanity.c -o CMakeFiles/Assignment1.dir/sanity.c.s
+
+CMakeFiles/Assignment1.dir/sanity.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/sanity.c.o.requires
+
+CMakeFiles/Assignment1.dir/sanity.c.o.provides: CMakeFiles/Assignment1.dir/sanity.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sanity.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/sanity.c.o.provides
+
+CMakeFiles/Assignment1.dir/sanity.c.o.provides.build: CMakeFiles/Assignment1.dir/sanity.c.o
+
+
+CMakeFiles/Assignment1.dir/sh.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/sh.c.o: ../sh.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_34) "Building C object CMakeFiles/Assignment1.dir/sh.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/sh.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/sh.c
+
+CMakeFiles/Assignment1.dir/sh.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/sh.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/sh.c > CMakeFiles/Assignment1.dir/sh.c.i
+
+CMakeFiles/Assignment1.dir/sh.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/sh.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/sh.c -o CMakeFiles/Assignment1.dir/sh.c.s
+
+CMakeFiles/Assignment1.dir/sh.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/sh.c.o.requires
+
+CMakeFiles/Assignment1.dir/sh.c.o.provides: CMakeFiles/Assignment1.dir/sh.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sh.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/sh.c.o.provides
+
+CMakeFiles/Assignment1.dir/sh.c.o.provides.build: CMakeFiles/Assignment1.dir/sh.c.o
+
+
+CMakeFiles/Assignment1.dir/sleeplock.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/sleeplock.c.o: ../sleeplock.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_35) "Building C object CMakeFiles/Assignment1.dir/sleeplock.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/sleeplock.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.c
+
+CMakeFiles/Assignment1.dir/sleeplock.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/sleeplock.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.c > CMakeFiles/Assignment1.dir/sleeplock.c.i
+
+CMakeFiles/Assignment1.dir/sleeplock.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/sleeplock.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.c -o CMakeFiles/Assignment1.dir/sleeplock.c.s
+
+CMakeFiles/Assignment1.dir/sleeplock.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/sleeplock.c.o.requires
+
+CMakeFiles/Assignment1.dir/sleeplock.c.o.provides: CMakeFiles/Assignment1.dir/sleeplock.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sleeplock.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/sleeplock.c.o.provides
+
+CMakeFiles/Assignment1.dir/sleeplock.c.o.provides.build: CMakeFiles/Assignment1.dir/sleeplock.c.o
+
+
+CMakeFiles/Assignment1.dir/spinlock.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/spinlock.c.o: ../spinlock.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_36) "Building C object CMakeFiles/Assignment1.dir/spinlock.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/spinlock.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.c
+
+CMakeFiles/Assignment1.dir/spinlock.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/spinlock.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.c > CMakeFiles/Assignment1.dir/spinlock.c.i
+
+CMakeFiles/Assignment1.dir/spinlock.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/spinlock.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.c -o CMakeFiles/Assignment1.dir/spinlock.c.s
+
+CMakeFiles/Assignment1.dir/spinlock.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/spinlock.c.o.requires
+
+CMakeFiles/Assignment1.dir/spinlock.c.o.provides: CMakeFiles/Assignment1.dir/spinlock.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/spinlock.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/spinlock.c.o.provides
+
+CMakeFiles/Assignment1.dir/spinlock.c.o.provides.build: CMakeFiles/Assignment1.dir/spinlock.c.o
+
+
+CMakeFiles/Assignment1.dir/stressfs.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/stressfs.c.o: ../stressfs.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_37) "Building C object CMakeFiles/Assignment1.dir/stressfs.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/stressfs.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/stressfs.c
+
+CMakeFiles/Assignment1.dir/stressfs.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/stressfs.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/stressfs.c > CMakeFiles/Assignment1.dir/stressfs.c.i
+
+CMakeFiles/Assignment1.dir/stressfs.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/stressfs.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/stressfs.c -o CMakeFiles/Assignment1.dir/stressfs.c.s
+
+CMakeFiles/Assignment1.dir/stressfs.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/stressfs.c.o.requires
+
+CMakeFiles/Assignment1.dir/stressfs.c.o.provides: CMakeFiles/Assignment1.dir/stressfs.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/stressfs.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/stressfs.c.o.provides
+
+CMakeFiles/Assignment1.dir/stressfs.c.o.provides.build: CMakeFiles/Assignment1.dir/stressfs.c.o
+
+
+CMakeFiles/Assignment1.dir/string.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/string.c.o: ../string.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_38) "Building C object CMakeFiles/Assignment1.dir/string.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/string.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/string.c
+
+CMakeFiles/Assignment1.dir/string.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/string.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/string.c > CMakeFiles/Assignment1.dir/string.c.i
+
+CMakeFiles/Assignment1.dir/string.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/string.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/string.c -o CMakeFiles/Assignment1.dir/string.c.s
+
+CMakeFiles/Assignment1.dir/string.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/string.c.o.requires
+
+CMakeFiles/Assignment1.dir/string.c.o.provides: CMakeFiles/Assignment1.dir/string.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/string.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/string.c.o.provides
+
+CMakeFiles/Assignment1.dir/string.c.o.provides.build: CMakeFiles/Assignment1.dir/string.c.o
+
+
+CMakeFiles/Assignment1.dir/syscall.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/syscall.c.o: ../syscall.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_39) "Building C object CMakeFiles/Assignment1.dir/syscall.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/syscall.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/syscall.c
+
+CMakeFiles/Assignment1.dir/syscall.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/syscall.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/syscall.c > CMakeFiles/Assignment1.dir/syscall.c.i
+
+CMakeFiles/Assignment1.dir/syscall.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/syscall.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/syscall.c -o CMakeFiles/Assignment1.dir/syscall.c.s
+
+CMakeFiles/Assignment1.dir/syscall.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/syscall.c.o.requires
+
+CMakeFiles/Assignment1.dir/syscall.c.o.provides: CMakeFiles/Assignment1.dir/syscall.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/syscall.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/syscall.c.o.provides
+
+CMakeFiles/Assignment1.dir/syscall.c.o.provides.build: CMakeFiles/Assignment1.dir/syscall.c.o
+
+
+CMakeFiles/Assignment1.dir/sysfile.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/sysfile.c.o: ../sysfile.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_40) "Building C object CMakeFiles/Assignment1.dir/sysfile.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/sysfile.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/sysfile.c
+
+CMakeFiles/Assignment1.dir/sysfile.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/sysfile.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/sysfile.c > CMakeFiles/Assignment1.dir/sysfile.c.i
+
+CMakeFiles/Assignment1.dir/sysfile.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/sysfile.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/sysfile.c -o CMakeFiles/Assignment1.dir/sysfile.c.s
+
+CMakeFiles/Assignment1.dir/sysfile.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/sysfile.c.o.requires
+
+CMakeFiles/Assignment1.dir/sysfile.c.o.provides: CMakeFiles/Assignment1.dir/sysfile.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sysfile.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/sysfile.c.o.provides
+
+CMakeFiles/Assignment1.dir/sysfile.c.o.provides.build: CMakeFiles/Assignment1.dir/sysfile.c.o
+
+
+CMakeFiles/Assignment1.dir/sysproc.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/sysproc.c.o: ../sysproc.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_41) "Building C object CMakeFiles/Assignment1.dir/sysproc.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/sysproc.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/sysproc.c
+
+CMakeFiles/Assignment1.dir/sysproc.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/sysproc.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/sysproc.c > CMakeFiles/Assignment1.dir/sysproc.c.i
+
+CMakeFiles/Assignment1.dir/sysproc.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/sysproc.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/sysproc.c -o CMakeFiles/Assignment1.dir/sysproc.c.s
+
+CMakeFiles/Assignment1.dir/sysproc.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/sysproc.c.o.requires
+
+CMakeFiles/Assignment1.dir/sysproc.c.o.provides: CMakeFiles/Assignment1.dir/sysproc.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sysproc.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/sysproc.c.o.provides
+
+CMakeFiles/Assignment1.dir/sysproc.c.o.provides.build: CMakeFiles/Assignment1.dir/sysproc.c.o
+
+
+CMakeFiles/Assignment1.dir/trap.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/trap.c.o: ../trap.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_42) "Building C object CMakeFiles/Assignment1.dir/trap.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/trap.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/trap.c
+
+CMakeFiles/Assignment1.dir/trap.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/trap.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/trap.c > CMakeFiles/Assignment1.dir/trap.c.i
+
+CMakeFiles/Assignment1.dir/trap.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/trap.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/trap.c -o CMakeFiles/Assignment1.dir/trap.c.s
+
+CMakeFiles/Assignment1.dir/trap.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/trap.c.o.requires
+
+CMakeFiles/Assignment1.dir/trap.c.o.provides: CMakeFiles/Assignment1.dir/trap.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/trap.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/trap.c.o.provides
+
+CMakeFiles/Assignment1.dir/trap.c.o.provides.build: CMakeFiles/Assignment1.dir/trap.c.o
+
+
+CMakeFiles/Assignment1.dir/uart.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/uart.c.o: ../uart.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_43) "Building C object CMakeFiles/Assignment1.dir/uart.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/uart.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/uart.c
+
+CMakeFiles/Assignment1.dir/uart.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/uart.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/uart.c > CMakeFiles/Assignment1.dir/uart.c.i
+
+CMakeFiles/Assignment1.dir/uart.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/uart.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/uart.c -o CMakeFiles/Assignment1.dir/uart.c.s
+
+CMakeFiles/Assignment1.dir/uart.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/uart.c.o.requires
+
+CMakeFiles/Assignment1.dir/uart.c.o.provides: CMakeFiles/Assignment1.dir/uart.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/uart.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/uart.c.o.provides
+
+CMakeFiles/Assignment1.dir/uart.c.o.provides.build: CMakeFiles/Assignment1.dir/uart.c.o
+
+
+CMakeFiles/Assignment1.dir/ulib.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/ulib.c.o: ../ulib.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_44) "Building C object CMakeFiles/Assignment1.dir/ulib.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/ulib.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/ulib.c
+
+CMakeFiles/Assignment1.dir/ulib.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/ulib.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/ulib.c > CMakeFiles/Assignment1.dir/ulib.c.i
+
+CMakeFiles/Assignment1.dir/ulib.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/ulib.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/ulib.c -o CMakeFiles/Assignment1.dir/ulib.c.s
+
+CMakeFiles/Assignment1.dir/ulib.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/ulib.c.o.requires
+
+CMakeFiles/Assignment1.dir/ulib.c.o.provides: CMakeFiles/Assignment1.dir/ulib.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ulib.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/ulib.c.o.provides
+
+CMakeFiles/Assignment1.dir/ulib.c.o.provides.build: CMakeFiles/Assignment1.dir/ulib.c.o
+
+
+CMakeFiles/Assignment1.dir/umalloc.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/umalloc.c.o: ../umalloc.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_45) "Building C object CMakeFiles/Assignment1.dir/umalloc.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/umalloc.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/umalloc.c
+
+CMakeFiles/Assignment1.dir/umalloc.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/umalloc.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/umalloc.c > CMakeFiles/Assignment1.dir/umalloc.c.i
+
+CMakeFiles/Assignment1.dir/umalloc.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/umalloc.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/umalloc.c -o CMakeFiles/Assignment1.dir/umalloc.c.s
+
+CMakeFiles/Assignment1.dir/umalloc.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/umalloc.c.o.requires
+
+CMakeFiles/Assignment1.dir/umalloc.c.o.provides: CMakeFiles/Assignment1.dir/umalloc.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/umalloc.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/umalloc.c.o.provides
+
+CMakeFiles/Assignment1.dir/umalloc.c.o.provides.build: CMakeFiles/Assignment1.dir/umalloc.c.o
+
+
+CMakeFiles/Assignment1.dir/vm.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/vm.c.o: ../vm.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_46) "Building C object CMakeFiles/Assignment1.dir/vm.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/vm.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/vm.c
+
+CMakeFiles/Assignment1.dir/vm.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/vm.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/vm.c > CMakeFiles/Assignment1.dir/vm.c.i
+
+CMakeFiles/Assignment1.dir/vm.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/vm.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/vm.c -o CMakeFiles/Assignment1.dir/vm.c.s
+
+CMakeFiles/Assignment1.dir/vm.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/vm.c.o.requires
+
+CMakeFiles/Assignment1.dir/vm.c.o.provides: CMakeFiles/Assignment1.dir/vm.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/vm.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/vm.c.o.provides
+
+CMakeFiles/Assignment1.dir/vm.c.o.provides.build: CMakeFiles/Assignment1.dir/vm.c.o
+
+
+CMakeFiles/Assignment1.dir/wc.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/wc.c.o: ../wc.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_47) "Building C object CMakeFiles/Assignment1.dir/wc.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/wc.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/wc.c
+
+CMakeFiles/Assignment1.dir/wc.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/wc.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/wc.c > CMakeFiles/Assignment1.dir/wc.c.i
+
+CMakeFiles/Assignment1.dir/wc.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/wc.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/wc.c -o CMakeFiles/Assignment1.dir/wc.c.s
+
+CMakeFiles/Assignment1.dir/wc.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/wc.c.o.requires
+
+CMakeFiles/Assignment1.dir/wc.c.o.provides: CMakeFiles/Assignment1.dir/wc.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/wc.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/wc.c.o.provides
+
+CMakeFiles/Assignment1.dir/wc.c.o.provides.build: CMakeFiles/Assignment1.dir/wc.c.o
+
+
+CMakeFiles/Assignment1.dir/zombie.c.o: CMakeFiles/Assignment1.dir/flags.make
+CMakeFiles/Assignment1.dir/zombie.c.o: ../zombie.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_48) "Building C object CMakeFiles/Assignment1.dir/zombie.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment1.dir/zombie.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/zombie.c
+
+CMakeFiles/Assignment1.dir/zombie.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment1.dir/zombie.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /users/studs/bsc/2016/rosent/os192/Assignment1/zombie.c > CMakeFiles/Assignment1.dir/zombie.c.i
+
+CMakeFiles/Assignment1.dir/zombie.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment1.dir/zombie.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /users/studs/bsc/2016/rosent/os192/Assignment1/zombie.c -o CMakeFiles/Assignment1.dir/zombie.c.s
+
+CMakeFiles/Assignment1.dir/zombie.c.o.requires:
+
+.PHONY : CMakeFiles/Assignment1.dir/zombie.c.o.requires
+
+CMakeFiles/Assignment1.dir/zombie.c.o.provides: CMakeFiles/Assignment1.dir/zombie.c.o.requires
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/zombie.c.o.provides.build
+.PHONY : CMakeFiles/Assignment1.dir/zombie.c.o.provides
+
+CMakeFiles/Assignment1.dir/zombie.c.o.provides.build: CMakeFiles/Assignment1.dir/zombie.c.o
+
+
+# Object files for target Assignment1
+Assignment1_OBJECTS = \
+"CMakeFiles/Assignment1.dir/ass1ds.cpp.o" \
+"CMakeFiles/Assignment1.dir/bio.c.o" \
+"CMakeFiles/Assignment1.dir/bootmain.c.o" \
+"CMakeFiles/Assignment1.dir/cat.c.o" \
+"CMakeFiles/Assignment1.dir/console.c.o" \
+"CMakeFiles/Assignment1.dir/echo.c.o" \
+"CMakeFiles/Assignment1.dir/exec.c.o" \
+"CMakeFiles/Assignment1.dir/file.c.o" \
+"CMakeFiles/Assignment1.dir/forktest.c.o" \
+"CMakeFiles/Assignment1.dir/fs.c.o" \
+"CMakeFiles/Assignment1.dir/grep.c.o" \
+"CMakeFiles/Assignment1.dir/ide.c.o" \
+"CMakeFiles/Assignment1.dir/init.c.o" \
+"CMakeFiles/Assignment1.dir/ioapic.c.o" \
+"CMakeFiles/Assignment1.dir/kalloc.c.o" \
+"CMakeFiles/Assignment1.dir/kbd.c.o" \
+"CMakeFiles/Assignment1.dir/kill.c.o" \
+"CMakeFiles/Assignment1.dir/lapic.c.o" \
+"CMakeFiles/Assignment1.dir/ln.c.o" \
+"CMakeFiles/Assignment1.dir/log.c.o" \
+"CMakeFiles/Assignment1.dir/ls.c.o" \
+"CMakeFiles/Assignment1.dir/main.c.o" \
+"CMakeFiles/Assignment1.dir/memide.c.o" \
+"CMakeFiles/Assignment1.dir/mkdir.c.o" \
+"CMakeFiles/Assignment1.dir/mkfs.c.o" \
+"CMakeFiles/Assignment1.dir/mp.c.o" \
+"CMakeFiles/Assignment1.dir/picirq.c.o" \
+"CMakeFiles/Assignment1.dir/pipe.c.o" \
+"CMakeFiles/Assignment1.dir/policy.c.o" \
+"CMakeFiles/Assignment1.dir/printf.c.o" \
+"CMakeFiles/Assignment1.dir/proc.c.o" \
+"CMakeFiles/Assignment1.dir/rm.c.o" \
+"CMakeFiles/Assignment1.dir/sanity.c.o" \
+"CMakeFiles/Assignment1.dir/sh.c.o" \
+"CMakeFiles/Assignment1.dir/sleeplock.c.o" \
+"CMakeFiles/Assignment1.dir/spinlock.c.o" \
+"CMakeFiles/Assignment1.dir/stressfs.c.o" \
+"CMakeFiles/Assignment1.dir/string.c.o" \
+"CMakeFiles/Assignment1.dir/syscall.c.o" \
+"CMakeFiles/Assignment1.dir/sysfile.c.o" \
+"CMakeFiles/Assignment1.dir/sysproc.c.o" \
+"CMakeFiles/Assignment1.dir/trap.c.o" \
+"CMakeFiles/Assignment1.dir/uart.c.o" \
+"CMakeFiles/Assignment1.dir/ulib.c.o" \
+"CMakeFiles/Assignment1.dir/umalloc.c.o" \
+"CMakeFiles/Assignment1.dir/vm.c.o" \
+"CMakeFiles/Assignment1.dir/wc.c.o" \
+"CMakeFiles/Assignment1.dir/zombie.c.o"
+
+# External object files for target Assignment1
+Assignment1_EXTERNAL_OBJECTS =
+
+Assignment1: CMakeFiles/Assignment1.dir/ass1ds.cpp.o
+Assignment1: CMakeFiles/Assignment1.dir/bio.c.o
+Assignment1: CMakeFiles/Assignment1.dir/bootmain.c.o
+Assignment1: CMakeFiles/Assignment1.dir/cat.c.o
+Assignment1: CMakeFiles/Assignment1.dir/console.c.o
+Assignment1: CMakeFiles/Assignment1.dir/echo.c.o
+Assignment1: CMakeFiles/Assignment1.dir/exec.c.o
+Assignment1: CMakeFiles/Assignment1.dir/file.c.o
+Assignment1: CMakeFiles/Assignment1.dir/forktest.c.o
+Assignment1: CMakeFiles/Assignment1.dir/fs.c.o
+Assignment1: CMakeFiles/Assignment1.dir/grep.c.o
+Assignment1: CMakeFiles/Assignment1.dir/ide.c.o
+Assignment1: CMakeFiles/Assignment1.dir/init.c.o
+Assignment1: CMakeFiles/Assignment1.dir/ioapic.c.o
+Assignment1: CMakeFiles/Assignment1.dir/kalloc.c.o
+Assignment1: CMakeFiles/Assignment1.dir/kbd.c.o
+Assignment1: CMakeFiles/Assignment1.dir/kill.c.o
+Assignment1: CMakeFiles/Assignment1.dir/lapic.c.o
+Assignment1: CMakeFiles/Assignment1.dir/ln.c.o
+Assignment1: CMakeFiles/Assignment1.dir/log.c.o
+Assignment1: CMakeFiles/Assignment1.dir/ls.c.o
+Assignment1: CMakeFiles/Assignment1.dir/main.c.o
+Assignment1: CMakeFiles/Assignment1.dir/memide.c.o
+Assignment1: CMakeFiles/Assignment1.dir/mkdir.c.o
+Assignment1: CMakeFiles/Assignment1.dir/mkfs.c.o
+Assignment1: CMakeFiles/Assignment1.dir/mp.c.o
+Assignment1: CMakeFiles/Assignment1.dir/picirq.c.o
+Assignment1: CMakeFiles/Assignment1.dir/pipe.c.o
+Assignment1: CMakeFiles/Assignment1.dir/policy.c.o
+Assignment1: CMakeFiles/Assignment1.dir/printf.c.o
+Assignment1: CMakeFiles/Assignment1.dir/proc.c.o
+Assignment1: CMakeFiles/Assignment1.dir/rm.c.o
+Assignment1: CMakeFiles/Assignment1.dir/sanity.c.o
+Assignment1: CMakeFiles/Assignment1.dir/sh.c.o
+Assignment1: CMakeFiles/Assignment1.dir/sleeplock.c.o
+Assignment1: CMakeFiles/Assignment1.dir/spinlock.c.o
+Assignment1: CMakeFiles/Assignment1.dir/stressfs.c.o
+Assignment1: CMakeFiles/Assignment1.dir/string.c.o
+Assignment1: CMakeFiles/Assignment1.dir/syscall.c.o
+Assignment1: CMakeFiles/Assignment1.dir/sysfile.c.o
+Assignment1: CMakeFiles/Assignment1.dir/sysproc.c.o
+Assignment1: CMakeFiles/Assignment1.dir/trap.c.o
+Assignment1: CMakeFiles/Assignment1.dir/uart.c.o
+Assignment1: CMakeFiles/Assignment1.dir/ulib.c.o
+Assignment1: CMakeFiles/Assignment1.dir/umalloc.c.o
+Assignment1: CMakeFiles/Assignment1.dir/vm.c.o
+Assignment1: CMakeFiles/Assignment1.dir/wc.c.o
+Assignment1: CMakeFiles/Assignment1.dir/zombie.c.o
+Assignment1: CMakeFiles/Assignment1.dir/build.make
+Assignment1: CMakeFiles/Assignment1.dir/link.txt
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --bold --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_49) "Linking CXX executable Assignment1"
+	$(CMAKE_COMMAND) -E cmake_link_script CMakeFiles/Assignment1.dir/link.txt --verbose=$(VERBOSE)
+
+# Rule to build all files generated by this target.
+CMakeFiles/Assignment1.dir/build: Assignment1
+
+.PHONY : CMakeFiles/Assignment1.dir/build
+
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/ass1ds.cpp.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/bio.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/bootmain.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/cat.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/console.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/echo.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/exec.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/file.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/forktest.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/fs.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/grep.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/ide.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/init.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/ioapic.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/kalloc.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/kbd.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/kill.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/lapic.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/ln.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/log.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/ls.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/main.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/memide.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/mkdir.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/mkfs.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/mp.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/picirq.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/pipe.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/policy.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/printf.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/proc.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/rm.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/sanity.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/sh.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/sleeplock.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/spinlock.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/stressfs.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/string.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/syscall.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/sysfile.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/sysproc.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/trap.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/uart.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/ulib.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/umalloc.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/vm.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/wc.c.o.requires
+CMakeFiles/Assignment1.dir/requires: CMakeFiles/Assignment1.dir/zombie.c.o.requires
+
+.PHONY : CMakeFiles/Assignment1.dir/requires
+
+CMakeFiles/Assignment1.dir/clean:
+	$(CMAKE_COMMAND) -P CMakeFiles/Assignment1.dir/cmake_clean.cmake
+.PHONY : CMakeFiles/Assignment1.dir/clean
+
+CMakeFiles/Assignment1.dir/depend:
+	cd /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug && $(CMAKE_COMMAND) -E cmake_depends "Unix Makefiles" /users/studs/bsc/2016/rosent/os192/Assignment1 /users/studs/bsc/2016/rosent/os192/Assignment1 /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir/DependInfo.cmake --color=$(COLOR)
+.PHONY : CMakeFiles/Assignment1.dir/depend
+
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/cat.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/cat.c.o
new file mode 100644
index 0000000..84d41da
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/cat.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/cmake_clean.cmake b/cmake-build-debug/CMakeFiles/Assignment1.dir/cmake_clean.cmake
new file mode 100644
index 0000000..c6ed847
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Assignment1.dir/cmake_clean.cmake
@@ -0,0 +1,57 @@
+file(REMOVE_RECURSE
+  "CMakeFiles/Assignment1.dir/ass1ds.cpp.o"
+  "CMakeFiles/Assignment1.dir/bio.c.o"
+  "CMakeFiles/Assignment1.dir/bootmain.c.o"
+  "CMakeFiles/Assignment1.dir/cat.c.o"
+  "CMakeFiles/Assignment1.dir/console.c.o"
+  "CMakeFiles/Assignment1.dir/echo.c.o"
+  "CMakeFiles/Assignment1.dir/exec.c.o"
+  "CMakeFiles/Assignment1.dir/file.c.o"
+  "CMakeFiles/Assignment1.dir/forktest.c.o"
+  "CMakeFiles/Assignment1.dir/fs.c.o"
+  "CMakeFiles/Assignment1.dir/grep.c.o"
+  "CMakeFiles/Assignment1.dir/ide.c.o"
+  "CMakeFiles/Assignment1.dir/init.c.o"
+  "CMakeFiles/Assignment1.dir/ioapic.c.o"
+  "CMakeFiles/Assignment1.dir/kalloc.c.o"
+  "CMakeFiles/Assignment1.dir/kbd.c.o"
+  "CMakeFiles/Assignment1.dir/kill.c.o"
+  "CMakeFiles/Assignment1.dir/lapic.c.o"
+  "CMakeFiles/Assignment1.dir/ln.c.o"
+  "CMakeFiles/Assignment1.dir/log.c.o"
+  "CMakeFiles/Assignment1.dir/ls.c.o"
+  "CMakeFiles/Assignment1.dir/main.c.o"
+  "CMakeFiles/Assignment1.dir/memide.c.o"
+  "CMakeFiles/Assignment1.dir/mkdir.c.o"
+  "CMakeFiles/Assignment1.dir/mkfs.c.o"
+  "CMakeFiles/Assignment1.dir/mp.c.o"
+  "CMakeFiles/Assignment1.dir/picirq.c.o"
+  "CMakeFiles/Assignment1.dir/pipe.c.o"
+  "CMakeFiles/Assignment1.dir/policy.c.o"
+  "CMakeFiles/Assignment1.dir/printf.c.o"
+  "CMakeFiles/Assignment1.dir/proc.c.o"
+  "CMakeFiles/Assignment1.dir/rm.c.o"
+  "CMakeFiles/Assignment1.dir/sanity.c.o"
+  "CMakeFiles/Assignment1.dir/sh.c.o"
+  "CMakeFiles/Assignment1.dir/sleeplock.c.o"
+  "CMakeFiles/Assignment1.dir/spinlock.c.o"
+  "CMakeFiles/Assignment1.dir/stressfs.c.o"
+  "CMakeFiles/Assignment1.dir/string.c.o"
+  "CMakeFiles/Assignment1.dir/syscall.c.o"
+  "CMakeFiles/Assignment1.dir/sysfile.c.o"
+  "CMakeFiles/Assignment1.dir/sysproc.c.o"
+  "CMakeFiles/Assignment1.dir/trap.c.o"
+  "CMakeFiles/Assignment1.dir/uart.c.o"
+  "CMakeFiles/Assignment1.dir/ulib.c.o"
+  "CMakeFiles/Assignment1.dir/umalloc.c.o"
+  "CMakeFiles/Assignment1.dir/vm.c.o"
+  "CMakeFiles/Assignment1.dir/wc.c.o"
+  "CMakeFiles/Assignment1.dir/zombie.c.o"
+  "Assignment1.pdb"
+  "Assignment1"
+)
+
+# Per-language clean rules from dependency scanning.
+foreach(lang C CXX)
+  include(CMakeFiles/Assignment1.dir/cmake_clean_${lang}.cmake OPTIONAL)
+endforeach()
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/console.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/console.c.o
new file mode 100644
index 0000000..f9c8111
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/console.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/depend.internal b/cmake-build-debug/CMakeFiles/Assignment1.dir/depend.internal
new file mode 100644
index 0000000..003abdc
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Assignment1.dir/depend.internal
@@ -0,0 +1,380 @@
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.10
+
+CMakeFiles/Assignment1.dir/bio.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/bio.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/buf.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+CMakeFiles/Assignment1.dir/bootmain.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/bootmain.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/elf.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/cat.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/cat.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+CMakeFiles/Assignment1.dir/console.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/console.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/file.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/traps.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/echo.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/echo.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+CMakeFiles/Assignment1.dir/exec.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/elf.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/exec.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/file.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/file.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/file.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+CMakeFiles/Assignment1.dir/forktest.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/forktest.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+CMakeFiles/Assignment1.dir/fs.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/buf.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/file.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fs.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+CMakeFiles/Assignment1.dir/grep.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/grep.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+CMakeFiles/Assignment1.dir/ide.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/buf.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/ide.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/traps.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/init.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fcntl.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/init.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+CMakeFiles/Assignment1.dir/ioapic.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/ioapic.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/traps.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+CMakeFiles/Assignment1.dir/kalloc.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/kalloc.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+CMakeFiles/Assignment1.dir/kbd.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/kbd.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/kbd.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/kill.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/kill.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+CMakeFiles/Assignment1.dir/lapic.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/date.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/lapic.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/traps.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/ln.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/ln.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+CMakeFiles/Assignment1.dir/log.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/buf.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/log.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+CMakeFiles/Assignment1.dir/ls.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/ls.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+CMakeFiles/Assignment1.dir/main.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/main.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/memide.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/buf.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/memide.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/traps.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/mkdir.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mkdir.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+CMakeFiles/Assignment1.dir/mkfs.c.o
+ .././fcntl.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mkfs.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+CMakeFiles/Assignment1.dir/mp.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mp.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mp.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/picirq.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/picirq.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/traps.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/pipe.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/file.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/pipe.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+CMakeFiles/Assignment1.dir/policy.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/policy.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+CMakeFiles/Assignment1.dir/printf.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/printf.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+CMakeFiles/Assignment1.dir/proc.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/schedulinginterface.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/rm.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/rm.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+CMakeFiles/Assignment1.dir/sanity.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/sanity.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+CMakeFiles/Assignment1.dir/sh.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fcntl.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/sh.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+CMakeFiles/Assignment1.dir/sleeplock.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/spinlock.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/stressfs.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fcntl.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stressfs.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+CMakeFiles/Assignment1.dir/string.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/string.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/syscall.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/syscall.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/syscall.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/sysfile.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fcntl.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/file.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/sysfile.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+CMakeFiles/Assignment1.dir/sysproc.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/date.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/sysproc.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/trap.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/trap.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/traps.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/uart.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/file.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/sleeplock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/spinlock.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/traps.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/uart.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/ulib.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/fcntl.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/ulib.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/umalloc.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/umalloc.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+CMakeFiles/Assignment1.dir/vm.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/defs.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/elf.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/memlayout.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/mmu.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/proc.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/vm.c
+ /users/studs/bsc/2016/rosent/os192/Assignment1/x86.h
+CMakeFiles/Assignment1.dir/wc.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/wc.c
+CMakeFiles/Assignment1.dir/zombie.c.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/stat.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/user.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/zombie.c
+CMakeFiles/Assignment1.dir/ass1ds.cpp.o
+ /users/studs/bsc/2016/rosent/os192/Assignment1/ass1ds.cpp
+ /users/studs/bsc/2016/rosent/os192/Assignment1/ass1ds.hpp
+ /users/studs/bsc/2016/rosent/os192/Assignment1/param.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/schedulinginterface.h
+ /users/studs/bsc/2016/rosent/os192/Assignment1/types.h
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/depend.make b/cmake-build-debug/CMakeFiles/Assignment1.dir/depend.make
new file mode 100644
index 0000000..ee318ab
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Assignment1.dir/depend.make
@@ -0,0 +1,380 @@
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.10
+
+CMakeFiles/Assignment1.dir/bio.c.o: ../bio.c
+CMakeFiles/Assignment1.dir/bio.c.o: ../buf.h
+CMakeFiles/Assignment1.dir/bio.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/bio.c.o: ../fs.h
+CMakeFiles/Assignment1.dir/bio.c.o: ../param.h
+CMakeFiles/Assignment1.dir/bio.c.o: ../sleeplock.h
+CMakeFiles/Assignment1.dir/bio.c.o: ../spinlock.h
+CMakeFiles/Assignment1.dir/bio.c.o: ../types.h
+
+CMakeFiles/Assignment1.dir/bootmain.c.o: ../bootmain.c
+CMakeFiles/Assignment1.dir/bootmain.c.o: ../elf.h
+CMakeFiles/Assignment1.dir/bootmain.c.o: ../memlayout.h
+CMakeFiles/Assignment1.dir/bootmain.c.o: ../types.h
+CMakeFiles/Assignment1.dir/bootmain.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/cat.c.o: ../cat.c
+CMakeFiles/Assignment1.dir/cat.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/cat.c.o: ../types.h
+CMakeFiles/Assignment1.dir/cat.c.o: ../user.h
+
+CMakeFiles/Assignment1.dir/console.c.o: ../console.c
+CMakeFiles/Assignment1.dir/console.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/console.c.o: ../file.h
+CMakeFiles/Assignment1.dir/console.c.o: ../fs.h
+CMakeFiles/Assignment1.dir/console.c.o: ../memlayout.h
+CMakeFiles/Assignment1.dir/console.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/console.c.o: ../param.h
+CMakeFiles/Assignment1.dir/console.c.o: ../proc.h
+CMakeFiles/Assignment1.dir/console.c.o: ../sleeplock.h
+CMakeFiles/Assignment1.dir/console.c.o: ../spinlock.h
+CMakeFiles/Assignment1.dir/console.c.o: ../traps.h
+CMakeFiles/Assignment1.dir/console.c.o: ../types.h
+CMakeFiles/Assignment1.dir/console.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/echo.c.o: ../echo.c
+CMakeFiles/Assignment1.dir/echo.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/echo.c.o: ../types.h
+CMakeFiles/Assignment1.dir/echo.c.o: ../user.h
+
+CMakeFiles/Assignment1.dir/exec.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/exec.c.o: ../elf.h
+CMakeFiles/Assignment1.dir/exec.c.o: ../exec.c
+CMakeFiles/Assignment1.dir/exec.c.o: ../memlayout.h
+CMakeFiles/Assignment1.dir/exec.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/exec.c.o: ../param.h
+CMakeFiles/Assignment1.dir/exec.c.o: ../proc.h
+CMakeFiles/Assignment1.dir/exec.c.o: ../types.h
+CMakeFiles/Assignment1.dir/exec.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/file.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/file.c.o: ../file.c
+CMakeFiles/Assignment1.dir/file.c.o: ../file.h
+CMakeFiles/Assignment1.dir/file.c.o: ../fs.h
+CMakeFiles/Assignment1.dir/file.c.o: ../param.h
+CMakeFiles/Assignment1.dir/file.c.o: ../sleeplock.h
+CMakeFiles/Assignment1.dir/file.c.o: ../spinlock.h
+CMakeFiles/Assignment1.dir/file.c.o: ../types.h
+
+CMakeFiles/Assignment1.dir/forktest.c.o: ../forktest.c
+CMakeFiles/Assignment1.dir/forktest.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/forktest.c.o: ../types.h
+CMakeFiles/Assignment1.dir/forktest.c.o: ../user.h
+
+CMakeFiles/Assignment1.dir/fs.c.o: ../buf.h
+CMakeFiles/Assignment1.dir/fs.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/fs.c.o: ../file.h
+CMakeFiles/Assignment1.dir/fs.c.o: ../fs.c
+CMakeFiles/Assignment1.dir/fs.c.o: ../fs.h
+CMakeFiles/Assignment1.dir/fs.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/fs.c.o: ../param.h
+CMakeFiles/Assignment1.dir/fs.c.o: ../proc.h
+CMakeFiles/Assignment1.dir/fs.c.o: ../sleeplock.h
+CMakeFiles/Assignment1.dir/fs.c.o: ../spinlock.h
+CMakeFiles/Assignment1.dir/fs.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/fs.c.o: ../types.h
+
+CMakeFiles/Assignment1.dir/grep.c.o: ../grep.c
+CMakeFiles/Assignment1.dir/grep.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/grep.c.o: ../types.h
+CMakeFiles/Assignment1.dir/grep.c.o: ../user.h
+
+CMakeFiles/Assignment1.dir/ide.c.o: ../buf.h
+CMakeFiles/Assignment1.dir/ide.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/ide.c.o: ../fs.h
+CMakeFiles/Assignment1.dir/ide.c.o: ../ide.c
+CMakeFiles/Assignment1.dir/ide.c.o: ../memlayout.h
+CMakeFiles/Assignment1.dir/ide.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/ide.c.o: ../param.h
+CMakeFiles/Assignment1.dir/ide.c.o: ../proc.h
+CMakeFiles/Assignment1.dir/ide.c.o: ../sleeplock.h
+CMakeFiles/Assignment1.dir/ide.c.o: ../spinlock.h
+CMakeFiles/Assignment1.dir/ide.c.o: ../traps.h
+CMakeFiles/Assignment1.dir/ide.c.o: ../types.h
+CMakeFiles/Assignment1.dir/ide.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/init.c.o: ../fcntl.h
+CMakeFiles/Assignment1.dir/init.c.o: ../init.c
+CMakeFiles/Assignment1.dir/init.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/init.c.o: ../types.h
+CMakeFiles/Assignment1.dir/init.c.o: ../user.h
+
+CMakeFiles/Assignment1.dir/ioapic.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/ioapic.c.o: ../ioapic.c
+CMakeFiles/Assignment1.dir/ioapic.c.o: ../traps.h
+CMakeFiles/Assignment1.dir/ioapic.c.o: ../types.h
+
+CMakeFiles/Assignment1.dir/kalloc.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/kalloc.c.o: ../kalloc.c
+CMakeFiles/Assignment1.dir/kalloc.c.o: ../memlayout.h
+CMakeFiles/Assignment1.dir/kalloc.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/kalloc.c.o: ../param.h
+CMakeFiles/Assignment1.dir/kalloc.c.o: ../spinlock.h
+CMakeFiles/Assignment1.dir/kalloc.c.o: ../types.h
+
+CMakeFiles/Assignment1.dir/kbd.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/kbd.c.o: ../kbd.c
+CMakeFiles/Assignment1.dir/kbd.c.o: ../kbd.h
+CMakeFiles/Assignment1.dir/kbd.c.o: ../types.h
+CMakeFiles/Assignment1.dir/kbd.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/kill.c.o: ../kill.c
+CMakeFiles/Assignment1.dir/kill.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/kill.c.o: ../types.h
+CMakeFiles/Assignment1.dir/kill.c.o: ../user.h
+
+CMakeFiles/Assignment1.dir/lapic.c.o: ../date.h
+CMakeFiles/Assignment1.dir/lapic.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/lapic.c.o: ../lapic.c
+CMakeFiles/Assignment1.dir/lapic.c.o: ../memlayout.h
+CMakeFiles/Assignment1.dir/lapic.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/lapic.c.o: ../param.h
+CMakeFiles/Assignment1.dir/lapic.c.o: ../traps.h
+CMakeFiles/Assignment1.dir/lapic.c.o: ../types.h
+CMakeFiles/Assignment1.dir/lapic.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/ln.c.o: ../ln.c
+CMakeFiles/Assignment1.dir/ln.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/ln.c.o: ../types.h
+CMakeFiles/Assignment1.dir/ln.c.o: ../user.h
+
+CMakeFiles/Assignment1.dir/log.c.o: ../buf.h
+CMakeFiles/Assignment1.dir/log.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/log.c.o: ../fs.h
+CMakeFiles/Assignment1.dir/log.c.o: ../log.c
+CMakeFiles/Assignment1.dir/log.c.o: ../param.h
+CMakeFiles/Assignment1.dir/log.c.o: ../sleeplock.h
+CMakeFiles/Assignment1.dir/log.c.o: ../spinlock.h
+CMakeFiles/Assignment1.dir/log.c.o: ../types.h
+
+CMakeFiles/Assignment1.dir/ls.c.o: ../fs.h
+CMakeFiles/Assignment1.dir/ls.c.o: ../ls.c
+CMakeFiles/Assignment1.dir/ls.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/ls.c.o: ../types.h
+CMakeFiles/Assignment1.dir/ls.c.o: ../user.h
+
+CMakeFiles/Assignment1.dir/main.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/main.c.o: ../main.c
+CMakeFiles/Assignment1.dir/main.c.o: ../memlayout.h
+CMakeFiles/Assignment1.dir/main.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/main.c.o: ../param.h
+CMakeFiles/Assignment1.dir/main.c.o: ../proc.h
+CMakeFiles/Assignment1.dir/main.c.o: ../types.h
+CMakeFiles/Assignment1.dir/main.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/memide.c.o: ../buf.h
+CMakeFiles/Assignment1.dir/memide.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/memide.c.o: ../fs.h
+CMakeFiles/Assignment1.dir/memide.c.o: ../memide.c
+CMakeFiles/Assignment1.dir/memide.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/memide.c.o: ../param.h
+CMakeFiles/Assignment1.dir/memide.c.o: ../proc.h
+CMakeFiles/Assignment1.dir/memide.c.o: ../sleeplock.h
+CMakeFiles/Assignment1.dir/memide.c.o: ../spinlock.h
+CMakeFiles/Assignment1.dir/memide.c.o: ../traps.h
+CMakeFiles/Assignment1.dir/memide.c.o: ../types.h
+CMakeFiles/Assignment1.dir/memide.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/mkdir.c.o: ../mkdir.c
+CMakeFiles/Assignment1.dir/mkdir.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/mkdir.c.o: ../types.h
+CMakeFiles/Assignment1.dir/mkdir.c.o: ../user.h
+
+CMakeFiles/Assignment1.dir/mkfs.c.o: .././fcntl.h
+CMakeFiles/Assignment1.dir/mkfs.c.o: ../fs.h
+CMakeFiles/Assignment1.dir/mkfs.c.o: ../mkfs.c
+CMakeFiles/Assignment1.dir/mkfs.c.o: ../param.h
+CMakeFiles/Assignment1.dir/mkfs.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/mkfs.c.o: ../types.h
+
+CMakeFiles/Assignment1.dir/mp.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/mp.c.o: ../memlayout.h
+CMakeFiles/Assignment1.dir/mp.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/mp.c.o: ../mp.c
+CMakeFiles/Assignment1.dir/mp.c.o: ../mp.h
+CMakeFiles/Assignment1.dir/mp.c.o: ../param.h
+CMakeFiles/Assignment1.dir/mp.c.o: ../proc.h
+CMakeFiles/Assignment1.dir/mp.c.o: ../types.h
+CMakeFiles/Assignment1.dir/mp.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/picirq.c.o: ../picirq.c
+CMakeFiles/Assignment1.dir/picirq.c.o: ../traps.h
+CMakeFiles/Assignment1.dir/picirq.c.o: ../types.h
+CMakeFiles/Assignment1.dir/picirq.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/pipe.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/pipe.c.o: ../file.h
+CMakeFiles/Assignment1.dir/pipe.c.o: ../fs.h
+CMakeFiles/Assignment1.dir/pipe.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/pipe.c.o: ../param.h
+CMakeFiles/Assignment1.dir/pipe.c.o: ../pipe.c
+CMakeFiles/Assignment1.dir/pipe.c.o: ../proc.h
+CMakeFiles/Assignment1.dir/pipe.c.o: ../sleeplock.h
+CMakeFiles/Assignment1.dir/pipe.c.o: ../spinlock.h
+CMakeFiles/Assignment1.dir/pipe.c.o: ../types.h
+
+CMakeFiles/Assignment1.dir/policy.c.o: ../policy.c
+CMakeFiles/Assignment1.dir/policy.c.o: ../types.h
+CMakeFiles/Assignment1.dir/policy.c.o: ../user.h
+
+CMakeFiles/Assignment1.dir/printf.c.o: ../printf.c
+CMakeFiles/Assignment1.dir/printf.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/printf.c.o: ../types.h
+CMakeFiles/Assignment1.dir/printf.c.o: ../user.h
+
+CMakeFiles/Assignment1.dir/proc.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/proc.c.o: ../memlayout.h
+CMakeFiles/Assignment1.dir/proc.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/proc.c.o: ../param.h
+CMakeFiles/Assignment1.dir/proc.c.o: ../proc.c
+CMakeFiles/Assignment1.dir/proc.c.o: ../proc.h
+CMakeFiles/Assignment1.dir/proc.c.o: ../schedulinginterface.h
+CMakeFiles/Assignment1.dir/proc.c.o: ../spinlock.h
+CMakeFiles/Assignment1.dir/proc.c.o: ../types.h
+CMakeFiles/Assignment1.dir/proc.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/rm.c.o: ../rm.c
+CMakeFiles/Assignment1.dir/rm.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/rm.c.o: ../types.h
+CMakeFiles/Assignment1.dir/rm.c.o: ../user.h
+
+CMakeFiles/Assignment1.dir/sanity.c.o: ../sanity.c
+CMakeFiles/Assignment1.dir/sanity.c.o: ../types.h
+CMakeFiles/Assignment1.dir/sanity.c.o: ../user.h
+
+CMakeFiles/Assignment1.dir/sh.c.o: ../fcntl.h
+CMakeFiles/Assignment1.dir/sh.c.o: ../sh.c
+CMakeFiles/Assignment1.dir/sh.c.o: ../types.h
+CMakeFiles/Assignment1.dir/sh.c.o: ../user.h
+
+CMakeFiles/Assignment1.dir/sleeplock.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/sleeplock.c.o: ../memlayout.h
+CMakeFiles/Assignment1.dir/sleeplock.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/sleeplock.c.o: ../param.h
+CMakeFiles/Assignment1.dir/sleeplock.c.o: ../proc.h
+CMakeFiles/Assignment1.dir/sleeplock.c.o: ../sleeplock.c
+CMakeFiles/Assignment1.dir/sleeplock.c.o: ../sleeplock.h
+CMakeFiles/Assignment1.dir/sleeplock.c.o: ../spinlock.h
+CMakeFiles/Assignment1.dir/sleeplock.c.o: ../types.h
+CMakeFiles/Assignment1.dir/sleeplock.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/spinlock.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/spinlock.c.o: ../memlayout.h
+CMakeFiles/Assignment1.dir/spinlock.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/spinlock.c.o: ../param.h
+CMakeFiles/Assignment1.dir/spinlock.c.o: ../proc.h
+CMakeFiles/Assignment1.dir/spinlock.c.o: ../spinlock.c
+CMakeFiles/Assignment1.dir/spinlock.c.o: ../spinlock.h
+CMakeFiles/Assignment1.dir/spinlock.c.o: ../types.h
+CMakeFiles/Assignment1.dir/spinlock.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/stressfs.c.o: ../fcntl.h
+CMakeFiles/Assignment1.dir/stressfs.c.o: ../fs.h
+CMakeFiles/Assignment1.dir/stressfs.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/stressfs.c.o: ../stressfs.c
+CMakeFiles/Assignment1.dir/stressfs.c.o: ../types.h
+CMakeFiles/Assignment1.dir/stressfs.c.o: ../user.h
+
+CMakeFiles/Assignment1.dir/string.c.o: ../string.c
+CMakeFiles/Assignment1.dir/string.c.o: ../types.h
+CMakeFiles/Assignment1.dir/string.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/syscall.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/syscall.c.o: ../memlayout.h
+CMakeFiles/Assignment1.dir/syscall.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/syscall.c.o: ../param.h
+CMakeFiles/Assignment1.dir/syscall.c.o: ../proc.h
+CMakeFiles/Assignment1.dir/syscall.c.o: ../syscall.c
+CMakeFiles/Assignment1.dir/syscall.c.o: ../syscall.h
+CMakeFiles/Assignment1.dir/syscall.c.o: ../types.h
+CMakeFiles/Assignment1.dir/syscall.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/sysfile.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/sysfile.c.o: ../fcntl.h
+CMakeFiles/Assignment1.dir/sysfile.c.o: ../file.h
+CMakeFiles/Assignment1.dir/sysfile.c.o: ../fs.h
+CMakeFiles/Assignment1.dir/sysfile.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/sysfile.c.o: ../param.h
+CMakeFiles/Assignment1.dir/sysfile.c.o: ../proc.h
+CMakeFiles/Assignment1.dir/sysfile.c.o: ../sleeplock.h
+CMakeFiles/Assignment1.dir/sysfile.c.o: ../spinlock.h
+CMakeFiles/Assignment1.dir/sysfile.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/sysfile.c.o: ../sysfile.c
+CMakeFiles/Assignment1.dir/sysfile.c.o: ../types.h
+
+CMakeFiles/Assignment1.dir/sysproc.c.o: ../date.h
+CMakeFiles/Assignment1.dir/sysproc.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/sysproc.c.o: ../memlayout.h
+CMakeFiles/Assignment1.dir/sysproc.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/sysproc.c.o: ../param.h
+CMakeFiles/Assignment1.dir/sysproc.c.o: ../proc.h
+CMakeFiles/Assignment1.dir/sysproc.c.o: ../sysproc.c
+CMakeFiles/Assignment1.dir/sysproc.c.o: ../types.h
+CMakeFiles/Assignment1.dir/sysproc.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/trap.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/trap.c.o: ../memlayout.h
+CMakeFiles/Assignment1.dir/trap.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/trap.c.o: ../param.h
+CMakeFiles/Assignment1.dir/trap.c.o: ../proc.h
+CMakeFiles/Assignment1.dir/trap.c.o: ../spinlock.h
+CMakeFiles/Assignment1.dir/trap.c.o: ../trap.c
+CMakeFiles/Assignment1.dir/trap.c.o: ../traps.h
+CMakeFiles/Assignment1.dir/trap.c.o: ../types.h
+CMakeFiles/Assignment1.dir/trap.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/uart.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/uart.c.o: ../file.h
+CMakeFiles/Assignment1.dir/uart.c.o: ../fs.h
+CMakeFiles/Assignment1.dir/uart.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/uart.c.o: ../param.h
+CMakeFiles/Assignment1.dir/uart.c.o: ../proc.h
+CMakeFiles/Assignment1.dir/uart.c.o: ../sleeplock.h
+CMakeFiles/Assignment1.dir/uart.c.o: ../spinlock.h
+CMakeFiles/Assignment1.dir/uart.c.o: ../traps.h
+CMakeFiles/Assignment1.dir/uart.c.o: ../types.h
+CMakeFiles/Assignment1.dir/uart.c.o: ../uart.c
+CMakeFiles/Assignment1.dir/uart.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/ulib.c.o: ../fcntl.h
+CMakeFiles/Assignment1.dir/ulib.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/ulib.c.o: ../types.h
+CMakeFiles/Assignment1.dir/ulib.c.o: ../ulib.c
+CMakeFiles/Assignment1.dir/ulib.c.o: ../user.h
+CMakeFiles/Assignment1.dir/ulib.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/umalloc.c.o: ../param.h
+CMakeFiles/Assignment1.dir/umalloc.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/umalloc.c.o: ../types.h
+CMakeFiles/Assignment1.dir/umalloc.c.o: ../umalloc.c
+CMakeFiles/Assignment1.dir/umalloc.c.o: ../user.h
+
+CMakeFiles/Assignment1.dir/vm.c.o: ../defs.h
+CMakeFiles/Assignment1.dir/vm.c.o: ../elf.h
+CMakeFiles/Assignment1.dir/vm.c.o: ../memlayout.h
+CMakeFiles/Assignment1.dir/vm.c.o: ../mmu.h
+CMakeFiles/Assignment1.dir/vm.c.o: ../param.h
+CMakeFiles/Assignment1.dir/vm.c.o: ../proc.h
+CMakeFiles/Assignment1.dir/vm.c.o: ../types.h
+CMakeFiles/Assignment1.dir/vm.c.o: ../vm.c
+CMakeFiles/Assignment1.dir/vm.c.o: ../x86.h
+
+CMakeFiles/Assignment1.dir/wc.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/wc.c.o: ../types.h
+CMakeFiles/Assignment1.dir/wc.c.o: ../user.h
+CMakeFiles/Assignment1.dir/wc.c.o: ../wc.c
+
+CMakeFiles/Assignment1.dir/zombie.c.o: ../stat.h
+CMakeFiles/Assignment1.dir/zombie.c.o: ../types.h
+CMakeFiles/Assignment1.dir/zombie.c.o: ../user.h
+CMakeFiles/Assignment1.dir/zombie.c.o: ../zombie.c
+
+CMakeFiles/Assignment1.dir/ass1ds.cpp.o: ../ass1ds.cpp
+CMakeFiles/Assignment1.dir/ass1ds.cpp.o: ../ass1ds.hpp
+CMakeFiles/Assignment1.dir/ass1ds.cpp.o: ../param.h
+CMakeFiles/Assignment1.dir/ass1ds.cpp.o: ../schedulinginterface.h
+CMakeFiles/Assignment1.dir/ass1ds.cpp.o: ../types.h
+
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/echo.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/echo.c.o
new file mode 100644
index 0000000..bede00c
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/echo.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/exec.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/exec.c.o
new file mode 100644
index 0000000..45cb260
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/exec.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/file.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/file.c.o
new file mode 100644
index 0000000..7512f1d
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/file.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/flags.make b/cmake-build-debug/CMakeFiles/Assignment1.dir/flags.make
new file mode 100644
index 0000000..0223902
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Assignment1.dir/flags.make
@@ -0,0 +1,17 @@
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.10
+
+# compile C with /usr/bin/cc
+# compile CXX with /usr/bin/c++
+C_FLAGS = -g  
+
+C_DEFINES = 
+
+C_INCLUDES = -I/users/studs/bsc/2016/rosent/os192/Assignment1/. 
+
+CXX_FLAGS = -g   -std=gnu++11
+
+CXX_DEFINES = 
+
+CXX_INCLUDES = -I/users/studs/bsc/2016/rosent/os192/Assignment1/. 
+
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/forktest.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/forktest.c.o
new file mode 100644
index 0000000..6c7a790
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/forktest.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/fs.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/fs.c.o
new file mode 100644
index 0000000..a1c202f
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/fs.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/grep.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/grep.c.o
new file mode 100644
index 0000000..8df23ba
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/grep.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/ide.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/ide.c.o
new file mode 100644
index 0000000..e634cdd
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/ide.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/init.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/init.c.o
new file mode 100644
index 0000000..c8e255f
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/init.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/ioapic.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/ioapic.c.o
new file mode 100644
index 0000000..d00b2f9
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/ioapic.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/kalloc.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/kalloc.c.o
new file mode 100644
index 0000000..4415236
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/kalloc.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/kbd.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/kbd.c.o
new file mode 100644
index 0000000..b48242e
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/kbd.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/kill.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/kill.c.o
new file mode 100644
index 0000000..517f168
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/kill.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/lapic.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/lapic.c.o
new file mode 100644
index 0000000..d9ae3db
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/lapic.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/link.txt b/cmake-build-debug/CMakeFiles/Assignment1.dir/link.txt
new file mode 100644
index 0000000..9e1c927
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Assignment1.dir/link.txt
@@ -0,0 +1 @@
+/usr/bin/c++  -g   CMakeFiles/Assignment1.dir/ass1ds.cpp.o CMakeFiles/Assignment1.dir/bio.c.o CMakeFiles/Assignment1.dir/bootmain.c.o CMakeFiles/Assignment1.dir/cat.c.o CMakeFiles/Assignment1.dir/console.c.o CMakeFiles/Assignment1.dir/echo.c.o CMakeFiles/Assignment1.dir/exec.c.o CMakeFiles/Assignment1.dir/file.c.o CMakeFiles/Assignment1.dir/forktest.c.o CMakeFiles/Assignment1.dir/fs.c.o CMakeFiles/Assignment1.dir/grep.c.o CMakeFiles/Assignment1.dir/ide.c.o CMakeFiles/Assignment1.dir/init.c.o CMakeFiles/Assignment1.dir/ioapic.c.o CMakeFiles/Assignment1.dir/kalloc.c.o CMakeFiles/Assignment1.dir/kbd.c.o CMakeFiles/Assignment1.dir/kill.c.o CMakeFiles/Assignment1.dir/lapic.c.o CMakeFiles/Assignment1.dir/ln.c.o CMakeFiles/Assignment1.dir/log.c.o CMakeFiles/Assignment1.dir/ls.c.o CMakeFiles/Assignment1.dir/main.c.o CMakeFiles/Assignment1.dir/memide.c.o CMakeFiles/Assignment1.dir/mkdir.c.o CMakeFiles/Assignment1.dir/mkfs.c.o CMakeFiles/Assignment1.dir/mp.c.o CMakeFiles/Assignment1.dir/picirq.c.o CMakeFiles/Assignment1.dir/pipe.c.o CMakeFiles/Assignment1.dir/policy.c.o CMakeFiles/Assignment1.dir/printf.c.o CMakeFiles/Assignment1.dir/proc.c.o CMakeFiles/Assignment1.dir/rm.c.o CMakeFiles/Assignment1.dir/sanity.c.o CMakeFiles/Assignment1.dir/sh.c.o CMakeFiles/Assignment1.dir/sleeplock.c.o CMakeFiles/Assignment1.dir/spinlock.c.o CMakeFiles/Assignment1.dir/stressfs.c.o CMakeFiles/Assignment1.dir/string.c.o CMakeFiles/Assignment1.dir/syscall.c.o CMakeFiles/Assignment1.dir/sysfile.c.o CMakeFiles/Assignment1.dir/sysproc.c.o CMakeFiles/Assignment1.dir/trap.c.o CMakeFiles/Assignment1.dir/uart.c.o CMakeFiles/Assignment1.dir/ulib.c.o CMakeFiles/Assignment1.dir/umalloc.c.o CMakeFiles/Assignment1.dir/vm.c.o CMakeFiles/Assignment1.dir/wc.c.o CMakeFiles/Assignment1.dir/zombie.c.o  -o Assignment1 
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/ln.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/ln.c.o
new file mode 100644
index 0000000..da09657
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/ln.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/log.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/log.c.o
new file mode 100644
index 0000000..6d538ed
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/log.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/ls.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/ls.c.o
new file mode 100644
index 0000000..7bac44c
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/ls.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/main.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/main.c.o
new file mode 100644
index 0000000..dad9cfa
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/main.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/memide.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/memide.c.o
new file mode 100644
index 0000000..858d272
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/memide.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/mkdir.c.o b/cmake-build-debug/CMakeFiles/Assignment1.dir/mkdir.c.o
new file mode 100644
index 0000000..aa121c7
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/Assignment1.dir/mkdir.c.o differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment1.dir/progress.make b/cmake-build-debug/CMakeFiles/Assignment1.dir/progress.make
new file mode 100644
index 0000000..0d76397
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Assignment1.dir/progress.make
@@ -0,0 +1,50 @@
+CMAKE_PROGRESS_1 = 1
+CMAKE_PROGRESS_2 = 2
+CMAKE_PROGRESS_3 = 3
+CMAKE_PROGRESS_4 = 4
+CMAKE_PROGRESS_5 = 5
+CMAKE_PROGRESS_6 = 6
+CMAKE_PROGRESS_7 = 7
+CMAKE_PROGRESS_8 = 8
+CMAKE_PROGRESS_9 = 9
+CMAKE_PROGRESS_10 = 10
+CMAKE_PROGRESS_11 = 11
+CMAKE_PROGRESS_12 = 12
+CMAKE_PROGRESS_13 = 13
+CMAKE_PROGRESS_14 = 14
+CMAKE_PROGRESS_15 = 15
+CMAKE_PROGRESS_16 = 16
+CMAKE_PROGRESS_17 = 17
+CMAKE_PROGRESS_18 = 18
+CMAKE_PROGRESS_19 = 19
+CMAKE_PROGRESS_20 = 20
+CMAKE_PROGRESS_21 = 21
+CMAKE_PROGRESS_22 = 22
+CMAKE_PROGRESS_23 = 23
+CMAKE_PROGRESS_24 = 24
+CMAKE_PROGRESS_25 = 25
+CMAKE_PROGRESS_26 = 26
+CMAKE_PROGRESS_27 = 27
+CMAKE_PROGRESS_28 = 28
+CMAKE_PROGRESS_29 = 29
+CMAKE_PROGRESS_30 = 30
+CMAKE_PROGRESS_31 = 31
+CMAKE_PROGRESS_32 = 32
+CMAKE_PROGRESS_33 = 33
+CMAKE_PROGRESS_34 = 34
+CMAKE_PROGRESS_35 = 35
+CMAKE_PROGRESS_36 = 36
+CMAKE_PROGRESS_37 = 37
+CMAKE_PROGRESS_38 = 38
+CMAKE_PROGRESS_39 = 39
+CMAKE_PROGRESS_40 = 40
+CMAKE_PROGRESS_41 = 41
+CMAKE_PROGRESS_42 = 42
+CMAKE_PROGRESS_43 = 43
+CMAKE_PROGRESS_44 = 44
+CMAKE_PROGRESS_45 = 45
+CMAKE_PROGRESS_46 = 46
+CMAKE_PROGRESS_47 = 47
+CMAKE_PROGRESS_48 = 48
+CMAKE_PROGRESS_49 = 49
+
diff --git a/cmake-build-debug/CMakeFiles/CMakeDirectoryInformation.cmake b/cmake-build-debug/CMakeFiles/CMakeDirectoryInformation.cmake
new file mode 100644
index 0000000..67861c8
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/CMakeDirectoryInformation.cmake
@@ -0,0 +1,16 @@
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.10
+
+# Relative path conversion top directories.
+set(CMAKE_RELATIVE_PATH_TOP_SOURCE "/users/studs/bsc/2016/rosent/os192/Assignment1")
+set(CMAKE_RELATIVE_PATH_TOP_BINARY "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug")
+
+# Force unix paths in dependencies.
+set(CMAKE_FORCE_UNIX_PATHS 1)
+
+
+# The C and CXX include file regular expressions for this directory.
+set(CMAKE_C_INCLUDE_REGEX_SCAN "^.*$")
+set(CMAKE_C_INCLUDE_REGEX_COMPLAIN "^$")
+set(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})
+set(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})
diff --git a/cmake-build-debug/CMakeFiles/CMakeOutput.log b/cmake-build-debug/CMakeFiles/CMakeOutput.log
new file mode 100644
index 0000000..7817090
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/CMakeOutput.log
@@ -0,0 +1,633 @@
+The system is: Linux - 4.15.0-46-generic - x86_64
+Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
+Compiler: /usr/bin/cc 
+Build flags: 
+Id flags:  
+
+The output was:
+0
+
+
+Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "a.out"
+
+The C compiler identification is GNU, found in "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdC/a.out"
+
+Determining if the C compiler works passed with the following output:
+Change Dir: /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp
+
+Run Build Command:"/usr/bin/make" "cmTC_c2766/fast"
+/usr/bin/make -f CMakeFiles/cmTC_c2766.dir/build.make CMakeFiles/cmTC_c2766.dir/build
+make[1]: Entering directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+Building C object CMakeFiles/cmTC_c2766.dir/testCCompiler.c.o
+/usr/bin/cc    -o CMakeFiles/cmTC_c2766.dir/testCCompiler.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp/testCCompiler.c
+Linking C executable cmTC_c2766
+/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -E cmake_link_script CMakeFiles/cmTC_c2766.dir/link.txt --verbose=1
+/usr/bin/cc      CMakeFiles/cmTC_c2766.dir/testCCompiler.c.o  -o cmTC_c2766 
+make[1]: Leaving directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+
+
+Detecting C compiler ABI info compiled with the following output:
+Change Dir: /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp
+
+Run Build Command:"/usr/bin/make" "cmTC_83788/fast"
+/usr/bin/make -f CMakeFiles/cmTC_83788.dir/build.make CMakeFiles/cmTC_83788.dir/build
+make[1]: Entering directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+Building C object CMakeFiles/cmTC_83788.dir/CMakeCCompilerABI.c.o
+/usr/bin/cc    -o CMakeFiles/cmTC_83788.dir/CMakeCCompilerABI.c.o   -c /users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeCCompilerABI.c
+Linking C executable cmTC_83788
+/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -E cmake_link_script CMakeFiles/cmTC_83788.dir/link.txt --verbose=1
+/usr/bin/cc     -v CMakeFiles/cmTC_83788.dir/CMakeCCompilerABI.c.o  -o cmTC_83788 
+Using built-in specs.
+COLLECT_GCC=/usr/bin/cc
+COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper
+OFFLOAD_TARGET_NAMES=nvptx-none
+OFFLOAD_TARGET_DEFAULT=1
+Target: x86_64-linux-gnu
+Configured with: ../src/configure -v --with-pkgversion='Ubuntu 7.3.0-27ubuntu1~18.04' --with-bugurl=file:///usr/share/doc/gcc-7/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++ --prefix=/usr --with-gcc-major-version-only --program-suffix=-7 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
+Thread model: posix
+gcc version 7.3.0 (Ubuntu 7.3.0-27ubuntu1~18.04) 
+COMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/
+LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../:/lib/:/usr/lib/
+COLLECT_GCC_OPTIONS='-v' '-o' 'cmTC_83788' '-mtune=generic' '-march=x86-64'
+ /usr/lib/gcc/x86_64-linux-gnu/7/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper -plugin-opt=-fresolution=/tmp/ccVhqV9d.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie -z now -z relro -o cmTC_83788 /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/7/../../.. CMakeFiles/cmTC_83788.dir/CMakeCCompilerABI.c.o -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn.o
+COLLECT_GCC_OPTIONS='-v' '-o' 'cmTC_83788' '-mtune=generic' '-march=x86-64'
+make[1]: Leaving directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+
+
+Parsed C implicit link information from above output:
+  link line regex: [^( *|.*[/\])(ld|CMAKE_LINK_STARTFILE-NOTFOUND|([^/\]+-)?ld|collect2)[^/\]*( |$)]
+  ignore line: [Change Dir: /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp]
+  ignore line: []
+  ignore line: [Run Build Command:"/usr/bin/make" "cmTC_83788/fast"]
+  ignore line: [/usr/bin/make -f CMakeFiles/cmTC_83788.dir/build.make CMakeFiles/cmTC_83788.dir/build]
+  ignore line: [make[1]: Entering directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp']
+  ignore line: [Building C object CMakeFiles/cmTC_83788.dir/CMakeCCompilerABI.c.o]
+  ignore line: [/usr/bin/cc    -o CMakeFiles/cmTC_83788.dir/CMakeCCompilerABI.c.o   -c /users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeCCompilerABI.c]
+  ignore line: [Linking C executable cmTC_83788]
+  ignore line: [/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -E cmake_link_script CMakeFiles/cmTC_83788.dir/link.txt --verbose=1]
+  ignore line: [/usr/bin/cc     -v CMakeFiles/cmTC_83788.dir/CMakeCCompilerABI.c.o  -o cmTC_83788 ]
+  ignore line: [Using built-in specs.]
+  ignore line: [COLLECT_GCC=/usr/bin/cc]
+  ignore line: [COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper]
+  ignore line: [OFFLOAD_TARGET_NAMES=nvptx-none]
+  ignore line: [OFFLOAD_TARGET_DEFAULT=1]
+  ignore line: [Target: x86_64-linux-gnu]
+  ignore line: [Configured with: ../src/configure -v --with-pkgversion='Ubuntu 7.3.0-27ubuntu1~18.04' --with-bugurl=file:///usr/share/doc/gcc-7/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++ --prefix=/usr --with-gcc-major-version-only --program-suffix=-7 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu]
+  ignore line: [Thread model: posix]
+  ignore line: [gcc version 7.3.0 (Ubuntu 7.3.0-27ubuntu1~18.04) ]
+  ignore line: [COMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/]
+  ignore line: [LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../:/lib/:/usr/lib/]
+  ignore line: [COLLECT_GCC_OPTIONS='-v' '-o' 'cmTC_83788' '-mtune=generic' '-march=x86-64']
+  link line: [ /usr/lib/gcc/x86_64-linux-gnu/7/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper -plugin-opt=-fresolution=/tmp/ccVhqV9d.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie -z now -z relro -o cmTC_83788 /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/7/../../.. CMakeFiles/cmTC_83788.dir/CMakeCCompilerABI.c.o -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn.o]
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/collect2] ==> ignore
+    arg [-plugin] ==> ignore
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so] ==> ignore
+    arg [-plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper] ==> ignore
+    arg [-plugin-opt=-fresolution=/tmp/ccVhqV9d.res] ==> ignore
+    arg [-plugin-opt=-pass-through=-lgcc] ==> ignore
+    arg [-plugin-opt=-pass-through=-lgcc_s] ==> ignore
+    arg [-plugin-opt=-pass-through=-lc] ==> ignore
+    arg [-plugin-opt=-pass-through=-lgcc] ==> ignore
+    arg [-plugin-opt=-pass-through=-lgcc_s] ==> ignore
+    arg [--sysroot=/] ==> ignore
+    arg [--build-id] ==> ignore
+    arg [--eh-frame-hdr] ==> ignore
+    arg [-m] ==> ignore
+    arg [elf_x86_64] ==> ignore
+    arg [--hash-style=gnu] ==> ignore
+    arg [--as-needed] ==> ignore
+    arg [-dynamic-linker] ==> ignore
+    arg [/lib64/ld-linux-x86-64.so.2] ==> ignore
+    arg [-pie] ==> ignore
+    arg [-znow] ==> ignore
+    arg [-zrelro] ==> ignore
+    arg [-o] ==> ignore
+    arg [cmTC_83788] ==> ignore
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o] ==> ignore
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o] ==> ignore
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o] ==> ignore
+    arg [-L/usr/lib/gcc/x86_64-linux-gnu/7] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/7]
+    arg [-L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu]
+    arg [-L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib]
+    arg [-L/lib/x86_64-linux-gnu] ==> dir [/lib/x86_64-linux-gnu]
+    arg [-L/lib/../lib] ==> dir [/lib/../lib]
+    arg [-L/usr/lib/x86_64-linux-gnu] ==> dir [/usr/lib/x86_64-linux-gnu]
+    arg [-L/usr/lib/../lib] ==> dir [/usr/lib/../lib]
+    arg [-L/usr/lib/gcc/x86_64-linux-gnu/7/../../..] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../..]
+    arg [CMakeFiles/cmTC_83788.dir/CMakeCCompilerABI.c.o] ==> ignore
+    arg [-lgcc] ==> lib [gcc]
+    arg [--push-state] ==> ignore
+    arg [--as-needed] ==> ignore
+    arg [-lgcc_s] ==> lib [gcc_s]
+    arg [--pop-state] ==> ignore
+    arg [-lc] ==> lib [c]
+    arg [-lgcc] ==> lib [gcc]
+    arg [--push-state] ==> ignore
+    arg [--as-needed] ==> ignore
+    arg [-lgcc_s] ==> lib [gcc_s]
+    arg [--pop-state] ==> ignore
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o] ==> ignore
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn.o] ==> ignore
+  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/7] ==> [/usr/lib/gcc/x86_64-linux-gnu/7]
+  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu] ==> [/usr/lib/x86_64-linux-gnu]
+  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib] ==> [/usr/lib]
+  collapse library dir [/lib/x86_64-linux-gnu] ==> [/lib/x86_64-linux-gnu]
+  collapse library dir [/lib/../lib] ==> [/lib]
+  collapse library dir [/usr/lib/x86_64-linux-gnu] ==> [/usr/lib/x86_64-linux-gnu]
+  collapse library dir [/usr/lib/../lib] ==> [/usr/lib]
+  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../..] ==> [/usr/lib]
+  implicit libs: [gcc;gcc_s;c;gcc;gcc_s]
+  implicit dirs: [/usr/lib/gcc/x86_64-linux-gnu/7;/usr/lib/x86_64-linux-gnu;/usr/lib;/lib/x86_64-linux-gnu;/lib]
+  implicit fwks: []
+
+
+
+
+Detecting C [-std=c11] compiler features compiled with the following output:
+Change Dir: /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp
+
+Run Build Command:"/usr/bin/make" "cmTC_2c5f5/fast"
+/usr/bin/make -f CMakeFiles/cmTC_2c5f5.dir/build.make CMakeFiles/cmTC_2c5f5.dir/build
+make[1]: Entering directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+Building C object CMakeFiles/cmTC_2c5f5.dir/feature_tests.c.o
+/usr/bin/cc   -std=c11 -o CMakeFiles/cmTC_2c5f5.dir/feature_tests.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/feature_tests.c
+Linking C executable cmTC_2c5f5
+/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -E cmake_link_script CMakeFiles/cmTC_2c5f5.dir/link.txt --verbose=1
+/usr/bin/cc      CMakeFiles/cmTC_2c5f5.dir/feature_tests.c.o  -o cmTC_2c5f5 
+make[1]: Leaving directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+
+
+    Feature record: C_FEATURE:1c_function_prototypes
+    Feature record: C_FEATURE:1c_restrict
+    Feature record: C_FEATURE:1c_static_assert
+    Feature record: C_FEATURE:1c_variadic_macros
+
+
+Detecting C [-std=c99] compiler features compiled with the following output:
+Change Dir: /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp
+
+Run Build Command:"/usr/bin/make" "cmTC_0d15d/fast"
+/usr/bin/make -f CMakeFiles/cmTC_0d15d.dir/build.make CMakeFiles/cmTC_0d15d.dir/build
+make[1]: Entering directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+Building C object CMakeFiles/cmTC_0d15d.dir/feature_tests.c.o
+/usr/bin/cc   -std=c99 -o CMakeFiles/cmTC_0d15d.dir/feature_tests.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/feature_tests.c
+Linking C executable cmTC_0d15d
+/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -E cmake_link_script CMakeFiles/cmTC_0d15d.dir/link.txt --verbose=1
+/usr/bin/cc      CMakeFiles/cmTC_0d15d.dir/feature_tests.c.o  -o cmTC_0d15d 
+make[1]: Leaving directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+
+
+    Feature record: C_FEATURE:1c_function_prototypes
+    Feature record: C_FEATURE:1c_restrict
+    Feature record: C_FEATURE:0c_static_assert
+    Feature record: C_FEATURE:1c_variadic_macros
+
+
+Detecting C [-std=c90] compiler features compiled with the following output:
+Change Dir: /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp
+
+Run Build Command:"/usr/bin/make" "cmTC_1e33a/fast"
+/usr/bin/make -f CMakeFiles/cmTC_1e33a.dir/build.make CMakeFiles/cmTC_1e33a.dir/build
+make[1]: Entering directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+Building C object CMakeFiles/cmTC_1e33a.dir/feature_tests.c.o
+/usr/bin/cc   -std=c90 -o CMakeFiles/cmTC_1e33a.dir/feature_tests.c.o   -c /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/feature_tests.c
+Linking C executable cmTC_1e33a
+/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -E cmake_link_script CMakeFiles/cmTC_1e33a.dir/link.txt --verbose=1
+/usr/bin/cc      CMakeFiles/cmTC_1e33a.dir/feature_tests.c.o  -o cmTC_1e33a 
+make[1]: Leaving directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+
+
+    Feature record: C_FEATURE:1c_function_prototypes
+    Feature record: C_FEATURE:0c_restrict
+    Feature record: C_FEATURE:0c_static_assert
+    Feature record: C_FEATURE:0c_variadic_macros
+Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" succeeded.
+Compiler: /usr/bin/c++ 
+Build flags: 
+Id flags:  
+
+The output was:
+0
+
+
+Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "a.out"
+
+The CXX compiler identification is GNU, found in "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/3.10.3/CompilerIdCXX/a.out"
+
+Determining if the CXX compiler works passed with the following output:
+Change Dir: /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp
+
+Run Build Command:"/usr/bin/make" "cmTC_3778c/fast"
+/usr/bin/make -f CMakeFiles/cmTC_3778c.dir/build.make CMakeFiles/cmTC_3778c.dir/build
+make[1]: Entering directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+Building CXX object CMakeFiles/cmTC_3778c.dir/testCXXCompiler.cxx.o
+/usr/bin/c++     -o CMakeFiles/cmTC_3778c.dir/testCXXCompiler.cxx.o -c /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp/testCXXCompiler.cxx
+Linking CXX executable cmTC_3778c
+/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -E cmake_link_script CMakeFiles/cmTC_3778c.dir/link.txt --verbose=1
+/usr/bin/c++       CMakeFiles/cmTC_3778c.dir/testCXXCompiler.cxx.o  -o cmTC_3778c 
+make[1]: Leaving directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+
+
+Detecting CXX compiler ABI info compiled with the following output:
+Change Dir: /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp
+
+Run Build Command:"/usr/bin/make" "cmTC_badff/fast"
+/usr/bin/make -f CMakeFiles/cmTC_badff.dir/build.make CMakeFiles/cmTC_badff.dir/build
+make[1]: Entering directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+Building CXX object CMakeFiles/cmTC_badff.dir/CMakeCXXCompilerABI.cpp.o
+/usr/bin/c++     -o CMakeFiles/cmTC_badff.dir/CMakeCXXCompilerABI.cpp.o -c /users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeCXXCompilerABI.cpp
+Linking CXX executable cmTC_badff
+/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -E cmake_link_script CMakeFiles/cmTC_badff.dir/link.txt --verbose=1
+/usr/bin/c++      -v CMakeFiles/cmTC_badff.dir/CMakeCXXCompilerABI.cpp.o  -o cmTC_badff 
+Using built-in specs.
+COLLECT_GCC=/usr/bin/c++
+COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper
+OFFLOAD_TARGET_NAMES=nvptx-none
+OFFLOAD_TARGET_DEFAULT=1
+Target: x86_64-linux-gnu
+Configured with: ../src/configure -v --with-pkgversion='Ubuntu 7.3.0-27ubuntu1~18.04' --with-bugurl=file:///usr/share/doc/gcc-7/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++ --prefix=/usr --with-gcc-major-version-only --program-suffix=-7 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
+Thread model: posix
+gcc version 7.3.0 (Ubuntu 7.3.0-27ubuntu1~18.04) 
+COMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/
+LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../:/lib/:/usr/lib/
+COLLECT_GCC_OPTIONS='-v' '-o' 'cmTC_badff' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
+ /usr/lib/gcc/x86_64-linux-gnu/7/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper -plugin-opt=-fresolution=/tmp/ccEAAnGn.res -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie -z now -z relro -o cmTC_badff /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/7/../../.. CMakeFiles/cmTC_badff.dir/CMakeCXXCompilerABI.cpp.o -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn.o
+COLLECT_GCC_OPTIONS='-v' '-o' 'cmTC_badff' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
+make[1]: Leaving directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+
+
+Parsed CXX implicit link information from above output:
+  link line regex: [^( *|.*[/\])(ld|CMAKE_LINK_STARTFILE-NOTFOUND|([^/\]+-)?ld|collect2)[^/\]*( |$)]
+  ignore line: [Change Dir: /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp]
+  ignore line: []
+  ignore line: [Run Build Command:"/usr/bin/make" "cmTC_badff/fast"]
+  ignore line: [/usr/bin/make -f CMakeFiles/cmTC_badff.dir/build.make CMakeFiles/cmTC_badff.dir/build]
+  ignore line: [make[1]: Entering directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp']
+  ignore line: [Building CXX object CMakeFiles/cmTC_badff.dir/CMakeCXXCompilerABI.cpp.o]
+  ignore line: [/usr/bin/c++     -o CMakeFiles/cmTC_badff.dir/CMakeCXXCompilerABI.cpp.o -c /users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeCXXCompilerABI.cpp]
+  ignore line: [Linking CXX executable cmTC_badff]
+  ignore line: [/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -E cmake_link_script CMakeFiles/cmTC_badff.dir/link.txt --verbose=1]
+  ignore line: [/usr/bin/c++      -v CMakeFiles/cmTC_badff.dir/CMakeCXXCompilerABI.cpp.o  -o cmTC_badff ]
+  ignore line: [Using built-in specs.]
+  ignore line: [COLLECT_GCC=/usr/bin/c++]
+  ignore line: [COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper]
+  ignore line: [OFFLOAD_TARGET_NAMES=nvptx-none]
+  ignore line: [OFFLOAD_TARGET_DEFAULT=1]
+  ignore line: [Target: x86_64-linux-gnu]
+  ignore line: [Configured with: ../src/configure -v --with-pkgversion='Ubuntu 7.3.0-27ubuntu1~18.04' --with-bugurl=file:///usr/share/doc/gcc-7/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++ --prefix=/usr --with-gcc-major-version-only --program-suffix=-7 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu]
+  ignore line: [Thread model: posix]
+  ignore line: [gcc version 7.3.0 (Ubuntu 7.3.0-27ubuntu1~18.04) ]
+  ignore line: [COMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/]
+  ignore line: [LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../:/lib/:/usr/lib/]
+  ignore line: [COLLECT_GCC_OPTIONS='-v' '-o' 'cmTC_badff' '-shared-libgcc' '-mtune=generic' '-march=x86-64']
+  link line: [ /usr/lib/gcc/x86_64-linux-gnu/7/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper -plugin-opt=-fresolution=/tmp/ccEAAnGn.res -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie -z now -z relro -o cmTC_badff /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/7/../../.. CMakeFiles/cmTC_badff.dir/CMakeCXXCompilerABI.cpp.o -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn.o]
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/collect2] ==> ignore
+    arg [-plugin] ==> ignore
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so] ==> ignore
+    arg [-plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper] ==> ignore
+    arg [-plugin-opt=-fresolution=/tmp/ccEAAnGn.res] ==> ignore
+    arg [-plugin-opt=-pass-through=-lgcc_s] ==> ignore
+    arg [-plugin-opt=-pass-through=-lgcc] ==> ignore
+    arg [-plugin-opt=-pass-through=-lc] ==> ignore
+    arg [-plugin-opt=-pass-through=-lgcc_s] ==> ignore
+    arg [-plugin-opt=-pass-through=-lgcc] ==> ignore
+    arg [--sysroot=/] ==> ignore
+    arg [--build-id] ==> ignore
+    arg [--eh-frame-hdr] ==> ignore
+    arg [-m] ==> ignore
+    arg [elf_x86_64] ==> ignore
+    arg [--hash-style=gnu] ==> ignore
+    arg [--as-needed] ==> ignore
+    arg [-dynamic-linker] ==> ignore
+    arg [/lib64/ld-linux-x86-64.so.2] ==> ignore
+    arg [-pie] ==> ignore
+    arg [-znow] ==> ignore
+    arg [-zrelro] ==> ignore
+    arg [-o] ==> ignore
+    arg [cmTC_badff] ==> ignore
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o] ==> ignore
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o] ==> ignore
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o] ==> ignore
+    arg [-L/usr/lib/gcc/x86_64-linux-gnu/7] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/7]
+    arg [-L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu]
+    arg [-L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib]
+    arg [-L/lib/x86_64-linux-gnu] ==> dir [/lib/x86_64-linux-gnu]
+    arg [-L/lib/../lib] ==> dir [/lib/../lib]
+    arg [-L/usr/lib/x86_64-linux-gnu] ==> dir [/usr/lib/x86_64-linux-gnu]
+    arg [-L/usr/lib/../lib] ==> dir [/usr/lib/../lib]
+    arg [-L/usr/lib/gcc/x86_64-linux-gnu/7/../../..] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../..]
+    arg [CMakeFiles/cmTC_badff.dir/CMakeCXXCompilerABI.cpp.o] ==> ignore
+    arg [-lstdc++] ==> lib [stdc++]
+    arg [-lm] ==> lib [m]
+    arg [-lgcc_s] ==> lib [gcc_s]
+    arg [-lgcc] ==> lib [gcc]
+    arg [-lc] ==> lib [c]
+    arg [-lgcc_s] ==> lib [gcc_s]
+    arg [-lgcc] ==> lib [gcc]
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o] ==> ignore
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn.o] ==> ignore
+  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/7] ==> [/usr/lib/gcc/x86_64-linux-gnu/7]
+  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu] ==> [/usr/lib/x86_64-linux-gnu]
+  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib] ==> [/usr/lib]
+  collapse library dir [/lib/x86_64-linux-gnu] ==> [/lib/x86_64-linux-gnu]
+  collapse library dir [/lib/../lib] ==> [/lib]
+  collapse library dir [/usr/lib/x86_64-linux-gnu] ==> [/usr/lib/x86_64-linux-gnu]
+  collapse library dir [/usr/lib/../lib] ==> [/usr/lib]
+  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../..] ==> [/usr/lib]
+  implicit libs: [stdc++;m;gcc_s;gcc;c;gcc_s;gcc]
+  implicit dirs: [/usr/lib/gcc/x86_64-linux-gnu/7;/usr/lib/x86_64-linux-gnu;/usr/lib;/lib/x86_64-linux-gnu;/lib]
+  implicit fwks: []
+
+
+
+
+Detecting CXX [-std=c++1z] compiler features compiled with the following output:
+Change Dir: /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp
+
+Run Build Command:"/usr/bin/make" "cmTC_91def/fast"
+/usr/bin/make -f CMakeFiles/cmTC_91def.dir/build.make CMakeFiles/cmTC_91def.dir/build
+make[1]: Entering directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+Building CXX object CMakeFiles/cmTC_91def.dir/feature_tests.cxx.o
+/usr/bin/c++    -std=c++1z -o CMakeFiles/cmTC_91def.dir/feature_tests.cxx.o -c /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/feature_tests.cxx
+Linking CXX executable cmTC_91def
+/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -E cmake_link_script CMakeFiles/cmTC_91def.dir/link.txt --verbose=1
+/usr/bin/c++       CMakeFiles/cmTC_91def.dir/feature_tests.cxx.o  -o cmTC_91def 
+make[1]: Leaving directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+
+
+    Feature record: CXX_FEATURE:1cxx_aggregate_default_initializers
+    Feature record: CXX_FEATURE:1cxx_alias_templates
+    Feature record: CXX_FEATURE:1cxx_alignas
+    Feature record: CXX_FEATURE:1cxx_alignof
+    Feature record: CXX_FEATURE:1cxx_attributes
+    Feature record: CXX_FEATURE:1cxx_attribute_deprecated
+    Feature record: CXX_FEATURE:1cxx_auto_type
+    Feature record: CXX_FEATURE:1cxx_binary_literals
+    Feature record: CXX_FEATURE:1cxx_constexpr
+    Feature record: CXX_FEATURE:1cxx_contextual_conversions
+    Feature record: CXX_FEATURE:1cxx_decltype
+    Feature record: CXX_FEATURE:1cxx_decltype_auto
+    Feature record: CXX_FEATURE:1cxx_decltype_incomplete_return_types
+    Feature record: CXX_FEATURE:1cxx_default_function_template_args
+    Feature record: CXX_FEATURE:1cxx_defaulted_functions
+    Feature record: CXX_FEATURE:1cxx_defaulted_move_initializers
+    Feature record: CXX_FEATURE:1cxx_delegating_constructors
+    Feature record: CXX_FEATURE:1cxx_deleted_functions
+    Feature record: CXX_FEATURE:1cxx_digit_separators
+    Feature record: CXX_FEATURE:1cxx_enum_forward_declarations
+    Feature record: CXX_FEATURE:1cxx_explicit_conversions
+    Feature record: CXX_FEATURE:1cxx_extended_friend_declarations
+    Feature record: CXX_FEATURE:1cxx_extern_templates
+    Feature record: CXX_FEATURE:1cxx_final
+    Feature record: CXX_FEATURE:1cxx_func_identifier
+    Feature record: CXX_FEATURE:1cxx_generalized_initializers
+    Feature record: CXX_FEATURE:1cxx_generic_lambdas
+    Feature record: CXX_FEATURE:1cxx_inheriting_constructors
+    Feature record: CXX_FEATURE:1cxx_inline_namespaces
+    Feature record: CXX_FEATURE:1cxx_lambdas
+    Feature record: CXX_FEATURE:1cxx_lambda_init_captures
+    Feature record: CXX_FEATURE:1cxx_local_type_template_args
+    Feature record: CXX_FEATURE:1cxx_long_long_type
+    Feature record: CXX_FEATURE:1cxx_noexcept
+    Feature record: CXX_FEATURE:1cxx_nonstatic_member_init
+    Feature record: CXX_FEATURE:1cxx_nullptr
+    Feature record: CXX_FEATURE:1cxx_override
+    Feature record: CXX_FEATURE:1cxx_range_for
+    Feature record: CXX_FEATURE:1cxx_raw_string_literals
+    Feature record: CXX_FEATURE:1cxx_reference_qualified_functions
+    Feature record: CXX_FEATURE:1cxx_relaxed_constexpr
+    Feature record: CXX_FEATURE:1cxx_return_type_deduction
+    Feature record: CXX_FEATURE:1cxx_right_angle_brackets
+    Feature record: CXX_FEATURE:1cxx_rvalue_references
+    Feature record: CXX_FEATURE:1cxx_sizeof_member
+    Feature record: CXX_FEATURE:1cxx_static_assert
+    Feature record: CXX_FEATURE:1cxx_strong_enums
+    Feature record: CXX_FEATURE:1cxx_template_template_parameters
+    Feature record: CXX_FEATURE:1cxx_thread_local
+    Feature record: CXX_FEATURE:1cxx_trailing_return_types
+    Feature record: CXX_FEATURE:1cxx_unicode_literals
+    Feature record: CXX_FEATURE:1cxx_uniform_initialization
+    Feature record: CXX_FEATURE:1cxx_unrestricted_unions
+    Feature record: CXX_FEATURE:1cxx_user_literals
+    Feature record: CXX_FEATURE:1cxx_variable_templates
+    Feature record: CXX_FEATURE:1cxx_variadic_macros
+    Feature record: CXX_FEATURE:1cxx_variadic_templates
+
+
+Detecting CXX [-std=c++14] compiler features compiled with the following output:
+Change Dir: /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp
+
+Run Build Command:"/usr/bin/make" "cmTC_45ed7/fast"
+/usr/bin/make -f CMakeFiles/cmTC_45ed7.dir/build.make CMakeFiles/cmTC_45ed7.dir/build
+make[1]: Entering directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+Building CXX object CMakeFiles/cmTC_45ed7.dir/feature_tests.cxx.o
+/usr/bin/c++    -std=c++14 -o CMakeFiles/cmTC_45ed7.dir/feature_tests.cxx.o -c /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/feature_tests.cxx
+Linking CXX executable cmTC_45ed7
+/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -E cmake_link_script CMakeFiles/cmTC_45ed7.dir/link.txt --verbose=1
+/usr/bin/c++       CMakeFiles/cmTC_45ed7.dir/feature_tests.cxx.o  -o cmTC_45ed7 
+make[1]: Leaving directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+
+
+    Feature record: CXX_FEATURE:1cxx_aggregate_default_initializers
+    Feature record: CXX_FEATURE:1cxx_alias_templates
+    Feature record: CXX_FEATURE:1cxx_alignas
+    Feature record: CXX_FEATURE:1cxx_alignof
+    Feature record: CXX_FEATURE:1cxx_attributes
+    Feature record: CXX_FEATURE:1cxx_attribute_deprecated
+    Feature record: CXX_FEATURE:1cxx_auto_type
+    Feature record: CXX_FEATURE:1cxx_binary_literals
+    Feature record: CXX_FEATURE:1cxx_constexpr
+    Feature record: CXX_FEATURE:1cxx_contextual_conversions
+    Feature record: CXX_FEATURE:1cxx_decltype
+    Feature record: CXX_FEATURE:1cxx_decltype_auto
+    Feature record: CXX_FEATURE:1cxx_decltype_incomplete_return_types
+    Feature record: CXX_FEATURE:1cxx_default_function_template_args
+    Feature record: CXX_FEATURE:1cxx_defaulted_functions
+    Feature record: CXX_FEATURE:1cxx_defaulted_move_initializers
+    Feature record: CXX_FEATURE:1cxx_delegating_constructors
+    Feature record: CXX_FEATURE:1cxx_deleted_functions
+    Feature record: CXX_FEATURE:1cxx_digit_separators
+    Feature record: CXX_FEATURE:1cxx_enum_forward_declarations
+    Feature record: CXX_FEATURE:1cxx_explicit_conversions
+    Feature record: CXX_FEATURE:1cxx_extended_friend_declarations
+    Feature record: CXX_FEATURE:1cxx_extern_templates
+    Feature record: CXX_FEATURE:1cxx_final
+    Feature record: CXX_FEATURE:1cxx_func_identifier
+    Feature record: CXX_FEATURE:1cxx_generalized_initializers
+    Feature record: CXX_FEATURE:1cxx_generic_lambdas
+    Feature record: CXX_FEATURE:1cxx_inheriting_constructors
+    Feature record: CXX_FEATURE:1cxx_inline_namespaces
+    Feature record: CXX_FEATURE:1cxx_lambdas
+    Feature record: CXX_FEATURE:1cxx_lambda_init_captures
+    Feature record: CXX_FEATURE:1cxx_local_type_template_args
+    Feature record: CXX_FEATURE:1cxx_long_long_type
+    Feature record: CXX_FEATURE:1cxx_noexcept
+    Feature record: CXX_FEATURE:1cxx_nonstatic_member_init
+    Feature record: CXX_FEATURE:1cxx_nullptr
+    Feature record: CXX_FEATURE:1cxx_override
+    Feature record: CXX_FEATURE:1cxx_range_for
+    Feature record: CXX_FEATURE:1cxx_raw_string_literals
+    Feature record: CXX_FEATURE:1cxx_reference_qualified_functions
+    Feature record: CXX_FEATURE:1cxx_relaxed_constexpr
+    Feature record: CXX_FEATURE:1cxx_return_type_deduction
+    Feature record: CXX_FEATURE:1cxx_right_angle_brackets
+    Feature record: CXX_FEATURE:1cxx_rvalue_references
+    Feature record: CXX_FEATURE:1cxx_sizeof_member
+    Feature record: CXX_FEATURE:1cxx_static_assert
+    Feature record: CXX_FEATURE:1cxx_strong_enums
+    Feature record: CXX_FEATURE:1cxx_template_template_parameters
+    Feature record: CXX_FEATURE:1cxx_thread_local
+    Feature record: CXX_FEATURE:1cxx_trailing_return_types
+    Feature record: CXX_FEATURE:1cxx_unicode_literals
+    Feature record: CXX_FEATURE:1cxx_uniform_initialization
+    Feature record: CXX_FEATURE:1cxx_unrestricted_unions
+    Feature record: CXX_FEATURE:1cxx_user_literals
+    Feature record: CXX_FEATURE:1cxx_variable_templates
+    Feature record: CXX_FEATURE:1cxx_variadic_macros
+    Feature record: CXX_FEATURE:1cxx_variadic_templates
+
+
+Detecting CXX [-std=c++11] compiler features compiled with the following output:
+Change Dir: /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp
+
+Run Build Command:"/usr/bin/make" "cmTC_222b4/fast"
+/usr/bin/make -f CMakeFiles/cmTC_222b4.dir/build.make CMakeFiles/cmTC_222b4.dir/build
+make[1]: Entering directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+Building CXX object CMakeFiles/cmTC_222b4.dir/feature_tests.cxx.o
+/usr/bin/c++    -std=c++11 -o CMakeFiles/cmTC_222b4.dir/feature_tests.cxx.o -c /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/feature_tests.cxx
+Linking CXX executable cmTC_222b4
+/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -E cmake_link_script CMakeFiles/cmTC_222b4.dir/link.txt --verbose=1
+/usr/bin/c++       CMakeFiles/cmTC_222b4.dir/feature_tests.cxx.o  -o cmTC_222b4 
+make[1]: Leaving directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+
+
+    Feature record: CXX_FEATURE:0cxx_aggregate_default_initializers
+    Feature record: CXX_FEATURE:1cxx_alias_templates
+    Feature record: CXX_FEATURE:1cxx_alignas
+    Feature record: CXX_FEATURE:1cxx_alignof
+    Feature record: CXX_FEATURE:1cxx_attributes
+    Feature record: CXX_FEATURE:0cxx_attribute_deprecated
+    Feature record: CXX_FEATURE:1cxx_auto_type
+    Feature record: CXX_FEATURE:0cxx_binary_literals
+    Feature record: CXX_FEATURE:1cxx_constexpr
+    Feature record: CXX_FEATURE:0cxx_contextual_conversions
+    Feature record: CXX_FEATURE:1cxx_decltype
+    Feature record: CXX_FEATURE:0cxx_decltype_auto
+    Feature record: CXX_FEATURE:1cxx_decltype_incomplete_return_types
+    Feature record: CXX_FEATURE:1cxx_default_function_template_args
+    Feature record: CXX_FEATURE:1cxx_defaulted_functions
+    Feature record: CXX_FEATURE:1cxx_defaulted_move_initializers
+    Feature record: CXX_FEATURE:1cxx_delegating_constructors
+    Feature record: CXX_FEATURE:1cxx_deleted_functions
+    Feature record: CXX_FEATURE:0cxx_digit_separators
+    Feature record: CXX_FEATURE:1cxx_enum_forward_declarations
+    Feature record: CXX_FEATURE:1cxx_explicit_conversions
+    Feature record: CXX_FEATURE:1cxx_extended_friend_declarations
+    Feature record: CXX_FEATURE:1cxx_extern_templates
+    Feature record: CXX_FEATURE:1cxx_final
+    Feature record: CXX_FEATURE:1cxx_func_identifier
+    Feature record: CXX_FEATURE:1cxx_generalized_initializers
+    Feature record: CXX_FEATURE:0cxx_generic_lambdas
+    Feature record: CXX_FEATURE:1cxx_inheriting_constructors
+    Feature record: CXX_FEATURE:1cxx_inline_namespaces
+    Feature record: CXX_FEATURE:1cxx_lambdas
+    Feature record: CXX_FEATURE:0cxx_lambda_init_captures
+    Feature record: CXX_FEATURE:1cxx_local_type_template_args
+    Feature record: CXX_FEATURE:1cxx_long_long_type
+    Feature record: CXX_FEATURE:1cxx_noexcept
+    Feature record: CXX_FEATURE:1cxx_nonstatic_member_init
+    Feature record: CXX_FEATURE:1cxx_nullptr
+    Feature record: CXX_FEATURE:1cxx_override
+    Feature record: CXX_FEATURE:1cxx_range_for
+    Feature record: CXX_FEATURE:1cxx_raw_string_literals
+    Feature record: CXX_FEATURE:1cxx_reference_qualified_functions
+    Feature record: CXX_FEATURE:0cxx_relaxed_constexpr
+    Feature record: CXX_FEATURE:0cxx_return_type_deduction
+    Feature record: CXX_FEATURE:1cxx_right_angle_brackets
+    Feature record: CXX_FEATURE:1cxx_rvalue_references
+    Feature record: CXX_FEATURE:1cxx_sizeof_member
+    Feature record: CXX_FEATURE:1cxx_static_assert
+    Feature record: CXX_FEATURE:1cxx_strong_enums
+    Feature record: CXX_FEATURE:1cxx_template_template_parameters
+    Feature record: CXX_FEATURE:1cxx_thread_local
+    Feature record: CXX_FEATURE:1cxx_trailing_return_types
+    Feature record: CXX_FEATURE:1cxx_unicode_literals
+    Feature record: CXX_FEATURE:1cxx_uniform_initialization
+    Feature record: CXX_FEATURE:1cxx_unrestricted_unions
+    Feature record: CXX_FEATURE:1cxx_user_literals
+    Feature record: CXX_FEATURE:0cxx_variable_templates
+    Feature record: CXX_FEATURE:1cxx_variadic_macros
+    Feature record: CXX_FEATURE:1cxx_variadic_templates
+
+
+Detecting CXX [-std=c++98] compiler features compiled with the following output:
+Change Dir: /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp
+
+Run Build Command:"/usr/bin/make" "cmTC_9c5cd/fast"
+/usr/bin/make -f CMakeFiles/cmTC_9c5cd.dir/build.make CMakeFiles/cmTC_9c5cd.dir/build
+make[1]: Entering directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+Building CXX object CMakeFiles/cmTC_9c5cd.dir/feature_tests.cxx.o
+/usr/bin/c++    -std=c++98 -o CMakeFiles/cmTC_9c5cd.dir/feature_tests.cxx.o -c /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/feature_tests.cxx
+Linking CXX executable cmTC_9c5cd
+/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -E cmake_link_script CMakeFiles/cmTC_9c5cd.dir/link.txt --verbose=1
+/usr/bin/c++       CMakeFiles/cmTC_9c5cd.dir/feature_tests.cxx.o  -o cmTC_9c5cd 
+make[1]: Leaving directory '/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/CMakeTmp'
+
+
+    Feature record: CXX_FEATURE:0cxx_aggregate_default_initializers
+    Feature record: CXX_FEATURE:0cxx_alias_templates
+    Feature record: CXX_FEATURE:0cxx_alignas
+    Feature record: CXX_FEATURE:0cxx_alignof
+    Feature record: CXX_FEATURE:0cxx_attributes
+    Feature record: CXX_FEATURE:0cxx_attribute_deprecated
+    Feature record: CXX_FEATURE:0cxx_auto_type
+    Feature record: CXX_FEATURE:0cxx_binary_literals
+    Feature record: CXX_FEATURE:0cxx_constexpr
+    Feature record: CXX_FEATURE:0cxx_contextual_conversions
+    Feature record: CXX_FEATURE:0cxx_decltype
+    Feature record: CXX_FEATURE:0cxx_decltype_auto
+    Feature record: CXX_FEATURE:0cxx_decltype_incomplete_return_types
+    Feature record: CXX_FEATURE:0cxx_default_function_template_args
+    Feature record: CXX_FEATURE:0cxx_defaulted_functions
+    Feature record: CXX_FEATURE:0cxx_defaulted_move_initializers
+    Feature record: CXX_FEATURE:0cxx_delegating_constructors
+    Feature record: CXX_FEATURE:0cxx_deleted_functions
+    Feature record: CXX_FEATURE:0cxx_digit_separators
+    Feature record: CXX_FEATURE:0cxx_enum_forward_declarations
+    Feature record: CXX_FEATURE:0cxx_explicit_conversions
+    Feature record: CXX_FEATURE:0cxx_extended_friend_declarations
+    Feature record: CXX_FEATURE:0cxx_extern_templates
+    Feature record: CXX_FEATURE:0cxx_final
+    Feature record: CXX_FEATURE:0cxx_func_identifier
+    Feature record: CXX_FEATURE:0cxx_generalized_initializers
+    Feature record: CXX_FEATURE:0cxx_generic_lambdas
+    Feature record: CXX_FEATURE:0cxx_inheriting_constructors
+    Feature record: CXX_FEATURE:0cxx_inline_namespaces
+    Feature record: CXX_FEATURE:0cxx_lambdas
+    Feature record: CXX_FEATURE:0cxx_lambda_init_captures
+    Feature record: CXX_FEATURE:0cxx_local_type_template_args
+    Feature record: CXX_FEATURE:0cxx_long_long_type
+    Feature record: CXX_FEATURE:0cxx_noexcept
+    Feature record: CXX_FEATURE:0cxx_nonstatic_member_init
+    Feature record: CXX_FEATURE:0cxx_nullptr
+    Feature record: CXX_FEATURE:0cxx_override
+    Feature record: CXX_FEATURE:0cxx_range_for
+    Feature record: CXX_FEATURE:0cxx_raw_string_literals
+    Feature record: CXX_FEATURE:0cxx_reference_qualified_functions
+    Feature record: CXX_FEATURE:0cxx_relaxed_constexpr
+    Feature record: CXX_FEATURE:0cxx_return_type_deduction
+    Feature record: CXX_FEATURE:0cxx_right_angle_brackets
+    Feature record: CXX_FEATURE:0cxx_rvalue_references
+    Feature record: CXX_FEATURE:0cxx_sizeof_member
+    Feature record: CXX_FEATURE:0cxx_static_assert
+    Feature record: CXX_FEATURE:0cxx_strong_enums
+    Feature record: CXX_FEATURE:1cxx_template_template_parameters
+    Feature record: CXX_FEATURE:0cxx_thread_local
+    Feature record: CXX_FEATURE:0cxx_trailing_return_types
+    Feature record: CXX_FEATURE:0cxx_unicode_literals
+    Feature record: CXX_FEATURE:0cxx_uniform_initialization
+    Feature record: CXX_FEATURE:0cxx_unrestricted_unions
+    Feature record: CXX_FEATURE:0cxx_user_literals
+    Feature record: CXX_FEATURE:0cxx_variable_templates
+    Feature record: CXX_FEATURE:0cxx_variadic_macros
+    Feature record: CXX_FEATURE:0cxx_variadic_templates
diff --git a/cmake-build-debug/CMakeFiles/Makefile.cmake b/cmake-build-debug/CMakeFiles/Makefile.cmake
new file mode 100644
index 0000000..aaa7125
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Makefile.cmake
@@ -0,0 +1,98 @@
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.10
+
+# The generator used is:
+set(CMAKE_DEPENDS_GENERATOR "Unix Makefiles")
+
+# The top level Makefile was generated from the following files:
+set(CMAKE_MAKEFILE_DEPENDS
+  "CMakeCache.txt"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeCInformation.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeCXXCompiler.cmake.in"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeCXXCompilerABI.cpp"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeCXXInformation.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeCommonLanguageInclude.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeCompilerIdDetection.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeDetermineCXXCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeDetermineCompileFeatures.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeDetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeDetermineCompilerABI.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeDetermineCompilerId.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeExtraGeneratorDetermineCompilerMacrosAndIncludeDirs.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeFindBinUtils.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeFindCodeBlocks.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeGenericSystem.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeLanguageInformation.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeParseImplicitLinkInfo.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeSystemSpecificInformation.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeSystemSpecificInitialize.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeTestCXXCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/CMakeTestCompilerCommon.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/ADSP-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/ARMCC-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/AppleClang-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/Borland-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/CMakeCommonCompilerMacros.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/Clang-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/Clang-DetermineCompilerInternal.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/Comeau-CXX-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/Compaq-CXX-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/Cray-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/Embarcadero-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/Fujitsu-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/GHS-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/GNU-C.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/GNU-CXX-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/GNU-CXX-FeatureTests.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/GNU-CXX.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/GNU-FindBinUtils.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/GNU.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/HP-CXX-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/IAR-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/IBMCPP-CXX-DetermineVersionInternal.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/Intel-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/MIPSpro-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/MSVC-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/NVIDIA-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/PGI-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/PathScale-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/SCO-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/SunPro-CXX-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/TI-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/VisualAge-CXX-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/Watcom-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/XL-CXX-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Compiler/zOS-CXX-DetermineCompiler.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Internal/FeatureTesting.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Platform/Linux-Determine-CXX.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Platform/Linux-GNU-C.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Platform/Linux-GNU-CXX.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Platform/Linux-GNU.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Platform/Linux.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/Platform/UnixPaths.cmake"
+  "/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/share/cmake-3.10/Modules/ProcessorCount.cmake"
+  "../CMakeLists.txt"
+  "CMakeFiles/3.10.3/CMakeCCompiler.cmake"
+  "CMakeFiles/3.10.3/CMakeCXXCompiler.cmake"
+  "CMakeFiles/3.10.3/CMakeSystem.cmake"
+  "CMakeFiles/feature_tests.cxx"
+  )
+
+# The corresponding makefile is:
+set(CMAKE_MAKEFILE_OUTPUTS
+  "Makefile"
+  "CMakeFiles/cmake.check_cache"
+  )
+
+# Byproducts of CMake generate step:
+set(CMAKE_MAKEFILE_PRODUCTS
+  "CMakeFiles/3.10.3/CMakeCXXCompiler.cmake"
+  "CMakeFiles/3.10.3/CMakeCXXCompiler.cmake"
+  "CMakeFiles/CMakeDirectoryInformation.cmake"
+  )
+
+# Dependency information for all targets:
+set(CMAKE_DEPEND_INFO_FILES
+  "CMakeFiles/Assignment1.dir/DependInfo.cmake"
+  )
diff --git a/cmake-build-debug/CMakeFiles/Makefile2 b/cmake-build-debug/CMakeFiles/Makefile2
new file mode 100644
index 0000000..4b2a60a
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Makefile2
@@ -0,0 +1,108 @@
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.10
+
+# Default target executed when no arguments are given to make.
+default_target: all
+
+.PHONY : default_target
+
+# The main recursive all target
+all:
+
+.PHONY : all
+
+# The main recursive preinstall target
+preinstall:
+
+.PHONY : preinstall
+
+#=============================================================================
+# Special targets provided by cmake.
+
+# Disable implicit rules so canonical targets will work.
+.SUFFIXES:
+
+
+# Remove some rules from gmake that .SUFFIXES does not remove.
+SUFFIXES =
+
+.SUFFIXES: .hpux_make_needs_suffix_list
+
+
+# Suppress display of executed commands.
+$(VERBOSE).SILENT:
+
+
+# A target that is always out of date.
+cmake_force:
+
+.PHONY : cmake_force
+
+#=============================================================================
+# Set environment variables for the build.
+
+# The shell in which to execute make rules.
+SHELL = /bin/sh
+
+# The CMake executable.
+CMAKE_COMMAND = /users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake
+
+# The command to remove a file.
+RM = /users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -E remove -f
+
+# Escaping for special characters.
+EQUALS = =
+
+# The top-level source directory on which CMake was run.
+CMAKE_SOURCE_DIR = /users/studs/bsc/2016/rosent/os192/Assignment1
+
+# The top-level build directory on which CMake was run.
+CMAKE_BINARY_DIR = /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug
+
+#=============================================================================
+# Target rules for target CMakeFiles/Assignment1.dir
+
+# All Build rule for target.
+CMakeFiles/Assignment1.dir/all:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/depend
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/build
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles --progress-num=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49 "Built target Assignment1"
+.PHONY : CMakeFiles/Assignment1.dir/all
+
+# Include target in all.
+all: CMakeFiles/Assignment1.dir/all
+
+.PHONY : all
+
+# Build rule for subdir invocation for target.
+CMakeFiles/Assignment1.dir/rule: cmake_check_build_system
+	$(CMAKE_COMMAND) -E cmake_progress_start /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles 49
+	$(MAKE) -f CMakeFiles/Makefile2 CMakeFiles/Assignment1.dir/all
+	$(CMAKE_COMMAND) -E cmake_progress_start /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles 0
+.PHONY : CMakeFiles/Assignment1.dir/rule
+
+# Convenience name for target.
+Assignment1: CMakeFiles/Assignment1.dir/rule
+
+.PHONY : Assignment1
+
+# clean rule for target.
+CMakeFiles/Assignment1.dir/clean:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/clean
+.PHONY : CMakeFiles/Assignment1.dir/clean
+
+# clean rule for target.
+clean: CMakeFiles/Assignment1.dir/clean
+
+.PHONY : clean
+
+#=============================================================================
+# Special targets to cleanup operation of make.
+
+# Special rule to run CMake to check the build system integrity.
+# No rule that depends on this can have commands that come from listfiles
+# because they might be regenerated.
+cmake_check_build_system:
+	$(CMAKE_COMMAND) -H$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0
+.PHONY : cmake_check_build_system
+
diff --git a/cmake-build-debug/CMakeFiles/Progress/22 b/cmake-build-debug/CMakeFiles/Progress/22
new file mode 100644
index 0000000..7b4d68d
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Progress/22
@@ -0,0 +1 @@
+empty
\ No newline at end of file
diff --git a/cmake-build-debug/CMakeFiles/Progress/25 b/cmake-build-debug/CMakeFiles/Progress/25
new file mode 100644
index 0000000..7b4d68d
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Progress/25
@@ -0,0 +1 @@
+empty
\ No newline at end of file
diff --git a/cmake-build-debug/CMakeFiles/Progress/count.txt b/cmake-build-debug/CMakeFiles/Progress/count.txt
new file mode 100644
index 0000000..95f9650
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Progress/count.txt
@@ -0,0 +1 @@
+49
diff --git a/cmake-build-debug/CMakeFiles/TargetDirectories.txt b/cmake-build-debug/CMakeFiles/TargetDirectories.txt
new file mode 100644
index 0000000..cd54a4e
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/TargetDirectories.txt
@@ -0,0 +1,3 @@
+/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/rebuild_cache.dir
+/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/edit_cache.dir
+/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/Assignment1.dir
diff --git a/cmake-build-debug/CMakeFiles/clion-environment.txt b/cmake-build-debug/CMakeFiles/clion-environment.txt
new file mode 100644
index 0000000..26e70bf
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/clion-environment.txt
@@ -0,0 +1,3 @@
+Options: 
+
+Options:
\ No newline at end of file
diff --git a/cmake-build-debug/CMakeFiles/clion-log.txt b/cmake-build-debug/CMakeFiles/clion-log.txt
new file mode 100644
index 0000000..47834e6
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/clion-log.txt
@@ -0,0 +1,11 @@
+/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -DCMAKE_BUILD_TYPE=Debug -G "CodeBlocks - Unix Makefiles" /users/studs/bsc/2016/rosent/os192/Assignment1
+-- The CXX compiler identification is GNU 7.3.0
+-- Check for working CXX compiler: /usr/bin/c++
+-- Check for working CXX compiler: /usr/bin/c++ -- works
+-- Detecting CXX compiler ABI info
+-- Detecting CXX compiler ABI info - done
+-- Detecting CXX compile features
+-- Detecting CXX compile features - done
+-- Configuring done
+-- Generating done
+-- Build files have been written to: /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug
diff --git a/cmake-build-debug/CMakeFiles/cmake.check_cache b/cmake-build-debug/CMakeFiles/cmake.check_cache
new file mode 100644
index 0000000..3dccd73
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/cmake.check_cache
@@ -0,0 +1 @@
+# This file is generated by cmake for dependency checking of the CMakeCache.txt file
diff --git a/cmake-build-debug/CMakeFiles/feature_tests.bin b/cmake-build-debug/CMakeFiles/feature_tests.bin
new file mode 100755
index 0000000..bb56254
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/feature_tests.bin differ
diff --git a/cmake-build-debug/CMakeFiles/feature_tests.c b/cmake-build-debug/CMakeFiles/feature_tests.c
new file mode 100644
index 0000000..83e86dd
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/feature_tests.c
@@ -0,0 +1,34 @@
+
+  const char features[] = {"\n"
+"C_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 304
+"1"
+#else
+"0"
+#endif
+"c_function_prototypes\n"
+"C_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 304 && defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+"1"
+#else
+"0"
+#endif
+"c_restrict\n"
+"C_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 406 && defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201000L
+"1"
+#else
+"0"
+#endif
+"c_static_assert\n"
+"C_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 304 && defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+"1"
+#else
+"0"
+#endif
+"c_variadic_macros\n"
+
+};
+
+int main(int argc, char** argv) { (void)argv; return features[argc]; }
diff --git a/cmake-build-debug/CMakeFiles/feature_tests.cxx b/cmake-build-debug/CMakeFiles/feature_tests.cxx
new file mode 100644
index 0000000..b93418c
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/feature_tests.cxx
@@ -0,0 +1,405 @@
+
+  const char features[] = {"\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 500 && __cplusplus >= 201402L
+"1"
+#else
+"0"
+#endif
+"cxx_aggregate_default_initializers\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 407 && __cplusplus >= 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_alias_templates\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 408 && __cplusplus >= 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_alignas\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 408 && __cplusplus >= 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_alignof\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 408 && __cplusplus >= 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_attributes\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 409 && __cplusplus > 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_attribute_deprecated\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_auto_type\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 409 && __cplusplus > 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_binary_literals\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 406 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_constexpr\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 409 && __cplusplus > 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_contextual_conversions\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_decltype\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 409 && __cplusplus > 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_decltype_auto\n"
+"CXX_FEATURE:"
+#if ((__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__) >= 40801) && __cplusplus >= 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_decltype_incomplete_return_types\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_default_function_template_args\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_defaulted_functions\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 406 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_defaulted_move_initializers\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 407 && __cplusplus >= 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_delegating_constructors\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_deleted_functions\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 409 && __cplusplus > 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_digit_separators\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 406 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_enum_forward_declarations\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 405 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_explicit_conversions\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 407 && __cplusplus >= 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_extended_friend_declarations\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_extern_templates\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 407 && __cplusplus >= 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_final\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_func_identifier\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_generalized_initializers\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 409 && __cplusplus > 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_generic_lambdas\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 408 && __cplusplus >= 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_inheriting_constructors\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_inline_namespaces\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 405 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_lambdas\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 409 && __cplusplus > 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_lambda_init_captures\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 405 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_local_type_template_args\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_long_long_type\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 406 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_noexcept\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 407 && __cplusplus >= 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_nonstatic_member_init\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 406 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_nullptr\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 407 && __cplusplus >= 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_override\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 406 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_range_for\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 405 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_raw_string_literals\n"
+"CXX_FEATURE:"
+#if ((__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__) >= 40801) && __cplusplus >= 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_reference_qualified_functions\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 500 && __cplusplus >= 201402L
+"1"
+#else
+"0"
+#endif
+"cxx_relaxed_constexpr\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 409 && __cplusplus > 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_return_type_deduction\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_right_angle_brackets\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_rvalue_references\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_sizeof_member\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_static_assert\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_strong_enums\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && __cplusplus
+"1"
+#else
+"0"
+#endif
+"cxx_template_template_parameters\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 408 && __cplusplus >= 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_thread_local\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_trailing_return_types\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_unicode_literals\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_uniform_initialization\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 406 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_unrestricted_unions\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 407 && __cplusplus >= 201103L
+"1"
+#else
+"0"
+#endif
+"cxx_user_literals\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 500 && __cplusplus >= 201402L
+"1"
+#else
+"0"
+#endif
+"cxx_variable_templates\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_variadic_macros\n"
+"CXX_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 404 && (__cplusplus >= 201103L || (defined(__GXX_EXPERIMENTAL_CXX0X__) && __GXX_EXPERIMENTAL_CXX0X__))
+"1"
+#else
+"0"
+#endif
+"cxx_variadic_templates\n"
+
+};
+
+int main(int argc, char** argv) { (void)argv; return features[argc]; }
diff --git a/cmake-build-debug/CMakeFiles/progress.marks b/cmake-build-debug/CMakeFiles/progress.marks
new file mode 100644
index 0000000..95f9650
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/progress.marks
@@ -0,0 +1 @@
+49
diff --git a/cmake-build-debug/Makefile b/cmake-build-debug/Makefile
new file mode 100644
index 0000000..edeb889
--- /dev/null
+++ b/cmake-build-debug/Makefile
@@ -0,0 +1,1588 @@
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.10
+
+# Default target executed when no arguments are given to make.
+default_target: all
+
+.PHONY : default_target
+
+# Allow only one "make -f Makefile2" at a time, but pass parallelism.
+.NOTPARALLEL:
+
+
+#=============================================================================
+# Special targets provided by cmake.
+
+# Disable implicit rules so canonical targets will work.
+.SUFFIXES:
+
+
+# Remove some rules from gmake that .SUFFIXES does not remove.
+SUFFIXES =
+
+.SUFFIXES: .hpux_make_needs_suffix_list
+
+
+# Suppress display of executed commands.
+$(VERBOSE).SILENT:
+
+
+# A target that is always out of date.
+cmake_force:
+
+.PHONY : cmake_force
+
+#=============================================================================
+# Set environment variables for the build.
+
+# The shell in which to execute make rules.
+SHELL = /bin/sh
+
+# The CMake executable.
+CMAKE_COMMAND = /users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake
+
+# The command to remove a file.
+RM = /users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -E remove -f
+
+# Escaping for special characters.
+EQUALS = =
+
+# The top-level source directory on which CMake was run.
+CMAKE_SOURCE_DIR = /users/studs/bsc/2016/rosent/os192/Assignment1
+
+# The top-level build directory on which CMake was run.
+CMAKE_BINARY_DIR = /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug
+
+#=============================================================================
+# Targets provided globally by CMake.
+
+# Special rule for the target rebuild_cache
+rebuild_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake to regenerate build system..."
+	/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -H$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
+.PHONY : rebuild_cache
+
+# Special rule for the target rebuild_cache
+rebuild_cache/fast: rebuild_cache
+
+.PHONY : rebuild_cache/fast
+
+# Special rule for the target edit_cache
+edit_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "No interactive CMake dialog available..."
+	/users/studs/bsc/2016/rosent/Downloads/clion-2018.1.2/bin/cmake/bin/cmake -E echo No\ interactive\ CMake\ dialog\ available.
+.PHONY : edit_cache
+
+# Special rule for the target edit_cache
+edit_cache/fast: edit_cache
+
+.PHONY : edit_cache/fast
+
+# The main all target
+all: cmake_check_build_system
+	$(CMAKE_COMMAND) -E cmake_progress_start /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles/progress.marks
+	$(MAKE) -f CMakeFiles/Makefile2 all
+	$(CMAKE_COMMAND) -E cmake_progress_start /users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/CMakeFiles 0
+.PHONY : all
+
+# The main clean target
+clean:
+	$(MAKE) -f CMakeFiles/Makefile2 clean
+.PHONY : clean
+
+# The main clean target
+clean/fast: clean
+
+.PHONY : clean/fast
+
+# Prepare targets for installation.
+preinstall: all
+	$(MAKE) -f CMakeFiles/Makefile2 preinstall
+.PHONY : preinstall
+
+# Prepare targets for installation.
+preinstall/fast:
+	$(MAKE) -f CMakeFiles/Makefile2 preinstall
+.PHONY : preinstall/fast
+
+# clear depends
+depend:
+	$(CMAKE_COMMAND) -H$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 1
+.PHONY : depend
+
+#=============================================================================
+# Target rules for targets named Assignment1
+
+# Build rule for target.
+Assignment1: cmake_check_build_system
+	$(MAKE) -f CMakeFiles/Makefile2 Assignment1
+.PHONY : Assignment1
+
+# fast build rule for target.
+Assignment1/fast:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/build
+.PHONY : Assignment1/fast
+
+ass1ds.o: ass1ds.cpp.o
+
+.PHONY : ass1ds.o
+
+# target to build an object file
+ass1ds.cpp.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ass1ds.cpp.o
+.PHONY : ass1ds.cpp.o
+
+ass1ds.i: ass1ds.cpp.i
+
+.PHONY : ass1ds.i
+
+# target to preprocess a source file
+ass1ds.cpp.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ass1ds.cpp.i
+.PHONY : ass1ds.cpp.i
+
+ass1ds.s: ass1ds.cpp.s
+
+.PHONY : ass1ds.s
+
+# target to generate assembly for a file
+ass1ds.cpp.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ass1ds.cpp.s
+.PHONY : ass1ds.cpp.s
+
+bio.o: bio.c.o
+
+.PHONY : bio.o
+
+# target to build an object file
+bio.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/bio.c.o
+.PHONY : bio.c.o
+
+bio.i: bio.c.i
+
+.PHONY : bio.i
+
+# target to preprocess a source file
+bio.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/bio.c.i
+.PHONY : bio.c.i
+
+bio.s: bio.c.s
+
+.PHONY : bio.s
+
+# target to generate assembly for a file
+bio.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/bio.c.s
+.PHONY : bio.c.s
+
+bootmain.o: bootmain.c.o
+
+.PHONY : bootmain.o
+
+# target to build an object file
+bootmain.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/bootmain.c.o
+.PHONY : bootmain.c.o
+
+bootmain.i: bootmain.c.i
+
+.PHONY : bootmain.i
+
+# target to preprocess a source file
+bootmain.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/bootmain.c.i
+.PHONY : bootmain.c.i
+
+bootmain.s: bootmain.c.s
+
+.PHONY : bootmain.s
+
+# target to generate assembly for a file
+bootmain.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/bootmain.c.s
+.PHONY : bootmain.c.s
+
+cat.o: cat.c.o
+
+.PHONY : cat.o
+
+# target to build an object file
+cat.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/cat.c.o
+.PHONY : cat.c.o
+
+cat.i: cat.c.i
+
+.PHONY : cat.i
+
+# target to preprocess a source file
+cat.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/cat.c.i
+.PHONY : cat.c.i
+
+cat.s: cat.c.s
+
+.PHONY : cat.s
+
+# target to generate assembly for a file
+cat.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/cat.c.s
+.PHONY : cat.c.s
+
+console.o: console.c.o
+
+.PHONY : console.o
+
+# target to build an object file
+console.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/console.c.o
+.PHONY : console.c.o
+
+console.i: console.c.i
+
+.PHONY : console.i
+
+# target to preprocess a source file
+console.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/console.c.i
+.PHONY : console.c.i
+
+console.s: console.c.s
+
+.PHONY : console.s
+
+# target to generate assembly for a file
+console.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/console.c.s
+.PHONY : console.c.s
+
+echo.o: echo.c.o
+
+.PHONY : echo.o
+
+# target to build an object file
+echo.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/echo.c.o
+.PHONY : echo.c.o
+
+echo.i: echo.c.i
+
+.PHONY : echo.i
+
+# target to preprocess a source file
+echo.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/echo.c.i
+.PHONY : echo.c.i
+
+echo.s: echo.c.s
+
+.PHONY : echo.s
+
+# target to generate assembly for a file
+echo.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/echo.c.s
+.PHONY : echo.c.s
+
+exec.o: exec.c.o
+
+.PHONY : exec.o
+
+# target to build an object file
+exec.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/exec.c.o
+.PHONY : exec.c.o
+
+exec.i: exec.c.i
+
+.PHONY : exec.i
+
+# target to preprocess a source file
+exec.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/exec.c.i
+.PHONY : exec.c.i
+
+exec.s: exec.c.s
+
+.PHONY : exec.s
+
+# target to generate assembly for a file
+exec.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/exec.c.s
+.PHONY : exec.c.s
+
+file.o: file.c.o
+
+.PHONY : file.o
+
+# target to build an object file
+file.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/file.c.o
+.PHONY : file.c.o
+
+file.i: file.c.i
+
+.PHONY : file.i
+
+# target to preprocess a source file
+file.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/file.c.i
+.PHONY : file.c.i
+
+file.s: file.c.s
+
+.PHONY : file.s
+
+# target to generate assembly for a file
+file.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/file.c.s
+.PHONY : file.c.s
+
+forktest.o: forktest.c.o
+
+.PHONY : forktest.o
+
+# target to build an object file
+forktest.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/forktest.c.o
+.PHONY : forktest.c.o
+
+forktest.i: forktest.c.i
+
+.PHONY : forktest.i
+
+# target to preprocess a source file
+forktest.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/forktest.c.i
+.PHONY : forktest.c.i
+
+forktest.s: forktest.c.s
+
+.PHONY : forktest.s
+
+# target to generate assembly for a file
+forktest.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/forktest.c.s
+.PHONY : forktest.c.s
+
+fs.o: fs.c.o
+
+.PHONY : fs.o
+
+# target to build an object file
+fs.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/fs.c.o
+.PHONY : fs.c.o
+
+fs.i: fs.c.i
+
+.PHONY : fs.i
+
+# target to preprocess a source file
+fs.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/fs.c.i
+.PHONY : fs.c.i
+
+fs.s: fs.c.s
+
+.PHONY : fs.s
+
+# target to generate assembly for a file
+fs.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/fs.c.s
+.PHONY : fs.c.s
+
+grep.o: grep.c.o
+
+.PHONY : grep.o
+
+# target to build an object file
+grep.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/grep.c.o
+.PHONY : grep.c.o
+
+grep.i: grep.c.i
+
+.PHONY : grep.i
+
+# target to preprocess a source file
+grep.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/grep.c.i
+.PHONY : grep.c.i
+
+grep.s: grep.c.s
+
+.PHONY : grep.s
+
+# target to generate assembly for a file
+grep.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/grep.c.s
+.PHONY : grep.c.s
+
+ide.o: ide.c.o
+
+.PHONY : ide.o
+
+# target to build an object file
+ide.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ide.c.o
+.PHONY : ide.c.o
+
+ide.i: ide.c.i
+
+.PHONY : ide.i
+
+# target to preprocess a source file
+ide.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ide.c.i
+.PHONY : ide.c.i
+
+ide.s: ide.c.s
+
+.PHONY : ide.s
+
+# target to generate assembly for a file
+ide.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ide.c.s
+.PHONY : ide.c.s
+
+init.o: init.c.o
+
+.PHONY : init.o
+
+# target to build an object file
+init.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/init.c.o
+.PHONY : init.c.o
+
+init.i: init.c.i
+
+.PHONY : init.i
+
+# target to preprocess a source file
+init.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/init.c.i
+.PHONY : init.c.i
+
+init.s: init.c.s
+
+.PHONY : init.s
+
+# target to generate assembly for a file
+init.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/init.c.s
+.PHONY : init.c.s
+
+ioapic.o: ioapic.c.o
+
+.PHONY : ioapic.o
+
+# target to build an object file
+ioapic.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ioapic.c.o
+.PHONY : ioapic.c.o
+
+ioapic.i: ioapic.c.i
+
+.PHONY : ioapic.i
+
+# target to preprocess a source file
+ioapic.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ioapic.c.i
+.PHONY : ioapic.c.i
+
+ioapic.s: ioapic.c.s
+
+.PHONY : ioapic.s
+
+# target to generate assembly for a file
+ioapic.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ioapic.c.s
+.PHONY : ioapic.c.s
+
+kalloc.o: kalloc.c.o
+
+.PHONY : kalloc.o
+
+# target to build an object file
+kalloc.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/kalloc.c.o
+.PHONY : kalloc.c.o
+
+kalloc.i: kalloc.c.i
+
+.PHONY : kalloc.i
+
+# target to preprocess a source file
+kalloc.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/kalloc.c.i
+.PHONY : kalloc.c.i
+
+kalloc.s: kalloc.c.s
+
+.PHONY : kalloc.s
+
+# target to generate assembly for a file
+kalloc.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/kalloc.c.s
+.PHONY : kalloc.c.s
+
+kbd.o: kbd.c.o
+
+.PHONY : kbd.o
+
+# target to build an object file
+kbd.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/kbd.c.o
+.PHONY : kbd.c.o
+
+kbd.i: kbd.c.i
+
+.PHONY : kbd.i
+
+# target to preprocess a source file
+kbd.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/kbd.c.i
+.PHONY : kbd.c.i
+
+kbd.s: kbd.c.s
+
+.PHONY : kbd.s
+
+# target to generate assembly for a file
+kbd.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/kbd.c.s
+.PHONY : kbd.c.s
+
+kill.o: kill.c.o
+
+.PHONY : kill.o
+
+# target to build an object file
+kill.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/kill.c.o
+.PHONY : kill.c.o
+
+kill.i: kill.c.i
+
+.PHONY : kill.i
+
+# target to preprocess a source file
+kill.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/kill.c.i
+.PHONY : kill.c.i
+
+kill.s: kill.c.s
+
+.PHONY : kill.s
+
+# target to generate assembly for a file
+kill.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/kill.c.s
+.PHONY : kill.c.s
+
+lapic.o: lapic.c.o
+
+.PHONY : lapic.o
+
+# target to build an object file
+lapic.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/lapic.c.o
+.PHONY : lapic.c.o
+
+lapic.i: lapic.c.i
+
+.PHONY : lapic.i
+
+# target to preprocess a source file
+lapic.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/lapic.c.i
+.PHONY : lapic.c.i
+
+lapic.s: lapic.c.s
+
+.PHONY : lapic.s
+
+# target to generate assembly for a file
+lapic.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/lapic.c.s
+.PHONY : lapic.c.s
+
+ln.o: ln.c.o
+
+.PHONY : ln.o
+
+# target to build an object file
+ln.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ln.c.o
+.PHONY : ln.c.o
+
+ln.i: ln.c.i
+
+.PHONY : ln.i
+
+# target to preprocess a source file
+ln.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ln.c.i
+.PHONY : ln.c.i
+
+ln.s: ln.c.s
+
+.PHONY : ln.s
+
+# target to generate assembly for a file
+ln.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ln.c.s
+.PHONY : ln.c.s
+
+log.o: log.c.o
+
+.PHONY : log.o
+
+# target to build an object file
+log.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/log.c.o
+.PHONY : log.c.o
+
+log.i: log.c.i
+
+.PHONY : log.i
+
+# target to preprocess a source file
+log.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/log.c.i
+.PHONY : log.c.i
+
+log.s: log.c.s
+
+.PHONY : log.s
+
+# target to generate assembly for a file
+log.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/log.c.s
+.PHONY : log.c.s
+
+ls.o: ls.c.o
+
+.PHONY : ls.o
+
+# target to build an object file
+ls.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ls.c.o
+.PHONY : ls.c.o
+
+ls.i: ls.c.i
+
+.PHONY : ls.i
+
+# target to preprocess a source file
+ls.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ls.c.i
+.PHONY : ls.c.i
+
+ls.s: ls.c.s
+
+.PHONY : ls.s
+
+# target to generate assembly for a file
+ls.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ls.c.s
+.PHONY : ls.c.s
+
+main.o: main.c.o
+
+.PHONY : main.o
+
+# target to build an object file
+main.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/main.c.o
+.PHONY : main.c.o
+
+main.i: main.c.i
+
+.PHONY : main.i
+
+# target to preprocess a source file
+main.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/main.c.i
+.PHONY : main.c.i
+
+main.s: main.c.s
+
+.PHONY : main.s
+
+# target to generate assembly for a file
+main.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/main.c.s
+.PHONY : main.c.s
+
+memide.o: memide.c.o
+
+.PHONY : memide.o
+
+# target to build an object file
+memide.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/memide.c.o
+.PHONY : memide.c.o
+
+memide.i: memide.c.i
+
+.PHONY : memide.i
+
+# target to preprocess a source file
+memide.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/memide.c.i
+.PHONY : memide.c.i
+
+memide.s: memide.c.s
+
+.PHONY : memide.s
+
+# target to generate assembly for a file
+memide.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/memide.c.s
+.PHONY : memide.c.s
+
+mkdir.o: mkdir.c.o
+
+.PHONY : mkdir.o
+
+# target to build an object file
+mkdir.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/mkdir.c.o
+.PHONY : mkdir.c.o
+
+mkdir.i: mkdir.c.i
+
+.PHONY : mkdir.i
+
+# target to preprocess a source file
+mkdir.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/mkdir.c.i
+.PHONY : mkdir.c.i
+
+mkdir.s: mkdir.c.s
+
+.PHONY : mkdir.s
+
+# target to generate assembly for a file
+mkdir.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/mkdir.c.s
+.PHONY : mkdir.c.s
+
+mkfs.o: mkfs.c.o
+
+.PHONY : mkfs.o
+
+# target to build an object file
+mkfs.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/mkfs.c.o
+.PHONY : mkfs.c.o
+
+mkfs.i: mkfs.c.i
+
+.PHONY : mkfs.i
+
+# target to preprocess a source file
+mkfs.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/mkfs.c.i
+.PHONY : mkfs.c.i
+
+mkfs.s: mkfs.c.s
+
+.PHONY : mkfs.s
+
+# target to generate assembly for a file
+mkfs.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/mkfs.c.s
+.PHONY : mkfs.c.s
+
+mp.o: mp.c.o
+
+.PHONY : mp.o
+
+# target to build an object file
+mp.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/mp.c.o
+.PHONY : mp.c.o
+
+mp.i: mp.c.i
+
+.PHONY : mp.i
+
+# target to preprocess a source file
+mp.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/mp.c.i
+.PHONY : mp.c.i
+
+mp.s: mp.c.s
+
+.PHONY : mp.s
+
+# target to generate assembly for a file
+mp.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/mp.c.s
+.PHONY : mp.c.s
+
+picirq.o: picirq.c.o
+
+.PHONY : picirq.o
+
+# target to build an object file
+picirq.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/picirq.c.o
+.PHONY : picirq.c.o
+
+picirq.i: picirq.c.i
+
+.PHONY : picirq.i
+
+# target to preprocess a source file
+picirq.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/picirq.c.i
+.PHONY : picirq.c.i
+
+picirq.s: picirq.c.s
+
+.PHONY : picirq.s
+
+# target to generate assembly for a file
+picirq.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/picirq.c.s
+.PHONY : picirq.c.s
+
+pipe.o: pipe.c.o
+
+.PHONY : pipe.o
+
+# target to build an object file
+pipe.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/pipe.c.o
+.PHONY : pipe.c.o
+
+pipe.i: pipe.c.i
+
+.PHONY : pipe.i
+
+# target to preprocess a source file
+pipe.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/pipe.c.i
+.PHONY : pipe.c.i
+
+pipe.s: pipe.c.s
+
+.PHONY : pipe.s
+
+# target to generate assembly for a file
+pipe.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/pipe.c.s
+.PHONY : pipe.c.s
+
+policy.o: policy.c.o
+
+.PHONY : policy.o
+
+# target to build an object file
+policy.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/policy.c.o
+.PHONY : policy.c.o
+
+policy.i: policy.c.i
+
+.PHONY : policy.i
+
+# target to preprocess a source file
+policy.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/policy.c.i
+.PHONY : policy.c.i
+
+policy.s: policy.c.s
+
+.PHONY : policy.s
+
+# target to generate assembly for a file
+policy.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/policy.c.s
+.PHONY : policy.c.s
+
+printf.o: printf.c.o
+
+.PHONY : printf.o
+
+# target to build an object file
+printf.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/printf.c.o
+.PHONY : printf.c.o
+
+printf.i: printf.c.i
+
+.PHONY : printf.i
+
+# target to preprocess a source file
+printf.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/printf.c.i
+.PHONY : printf.c.i
+
+printf.s: printf.c.s
+
+.PHONY : printf.s
+
+# target to generate assembly for a file
+printf.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/printf.c.s
+.PHONY : printf.c.s
+
+proc.o: proc.c.o
+
+.PHONY : proc.o
+
+# target to build an object file
+proc.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/proc.c.o
+.PHONY : proc.c.o
+
+proc.i: proc.c.i
+
+.PHONY : proc.i
+
+# target to preprocess a source file
+proc.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/proc.c.i
+.PHONY : proc.c.i
+
+proc.s: proc.c.s
+
+.PHONY : proc.s
+
+# target to generate assembly for a file
+proc.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/proc.c.s
+.PHONY : proc.c.s
+
+rm.o: rm.c.o
+
+.PHONY : rm.o
+
+# target to build an object file
+rm.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/rm.c.o
+.PHONY : rm.c.o
+
+rm.i: rm.c.i
+
+.PHONY : rm.i
+
+# target to preprocess a source file
+rm.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/rm.c.i
+.PHONY : rm.c.i
+
+rm.s: rm.c.s
+
+.PHONY : rm.s
+
+# target to generate assembly for a file
+rm.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/rm.c.s
+.PHONY : rm.c.s
+
+sanity.o: sanity.c.o
+
+.PHONY : sanity.o
+
+# target to build an object file
+sanity.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sanity.c.o
+.PHONY : sanity.c.o
+
+sanity.i: sanity.c.i
+
+.PHONY : sanity.i
+
+# target to preprocess a source file
+sanity.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sanity.c.i
+.PHONY : sanity.c.i
+
+sanity.s: sanity.c.s
+
+.PHONY : sanity.s
+
+# target to generate assembly for a file
+sanity.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sanity.c.s
+.PHONY : sanity.c.s
+
+sh.o: sh.c.o
+
+.PHONY : sh.o
+
+# target to build an object file
+sh.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sh.c.o
+.PHONY : sh.c.o
+
+sh.i: sh.c.i
+
+.PHONY : sh.i
+
+# target to preprocess a source file
+sh.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sh.c.i
+.PHONY : sh.c.i
+
+sh.s: sh.c.s
+
+.PHONY : sh.s
+
+# target to generate assembly for a file
+sh.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sh.c.s
+.PHONY : sh.c.s
+
+sleeplock.o: sleeplock.c.o
+
+.PHONY : sleeplock.o
+
+# target to build an object file
+sleeplock.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sleeplock.c.o
+.PHONY : sleeplock.c.o
+
+sleeplock.i: sleeplock.c.i
+
+.PHONY : sleeplock.i
+
+# target to preprocess a source file
+sleeplock.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sleeplock.c.i
+.PHONY : sleeplock.c.i
+
+sleeplock.s: sleeplock.c.s
+
+.PHONY : sleeplock.s
+
+# target to generate assembly for a file
+sleeplock.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sleeplock.c.s
+.PHONY : sleeplock.c.s
+
+spinlock.o: spinlock.c.o
+
+.PHONY : spinlock.o
+
+# target to build an object file
+spinlock.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/spinlock.c.o
+.PHONY : spinlock.c.o
+
+spinlock.i: spinlock.c.i
+
+.PHONY : spinlock.i
+
+# target to preprocess a source file
+spinlock.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/spinlock.c.i
+.PHONY : spinlock.c.i
+
+spinlock.s: spinlock.c.s
+
+.PHONY : spinlock.s
+
+# target to generate assembly for a file
+spinlock.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/spinlock.c.s
+.PHONY : spinlock.c.s
+
+stressfs.o: stressfs.c.o
+
+.PHONY : stressfs.o
+
+# target to build an object file
+stressfs.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/stressfs.c.o
+.PHONY : stressfs.c.o
+
+stressfs.i: stressfs.c.i
+
+.PHONY : stressfs.i
+
+# target to preprocess a source file
+stressfs.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/stressfs.c.i
+.PHONY : stressfs.c.i
+
+stressfs.s: stressfs.c.s
+
+.PHONY : stressfs.s
+
+# target to generate assembly for a file
+stressfs.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/stressfs.c.s
+.PHONY : stressfs.c.s
+
+string.o: string.c.o
+
+.PHONY : string.o
+
+# target to build an object file
+string.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/string.c.o
+.PHONY : string.c.o
+
+string.i: string.c.i
+
+.PHONY : string.i
+
+# target to preprocess a source file
+string.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/string.c.i
+.PHONY : string.c.i
+
+string.s: string.c.s
+
+.PHONY : string.s
+
+# target to generate assembly for a file
+string.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/string.c.s
+.PHONY : string.c.s
+
+syscall.o: syscall.c.o
+
+.PHONY : syscall.o
+
+# target to build an object file
+syscall.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/syscall.c.o
+.PHONY : syscall.c.o
+
+syscall.i: syscall.c.i
+
+.PHONY : syscall.i
+
+# target to preprocess a source file
+syscall.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/syscall.c.i
+.PHONY : syscall.c.i
+
+syscall.s: syscall.c.s
+
+.PHONY : syscall.s
+
+# target to generate assembly for a file
+syscall.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/syscall.c.s
+.PHONY : syscall.c.s
+
+sysfile.o: sysfile.c.o
+
+.PHONY : sysfile.o
+
+# target to build an object file
+sysfile.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sysfile.c.o
+.PHONY : sysfile.c.o
+
+sysfile.i: sysfile.c.i
+
+.PHONY : sysfile.i
+
+# target to preprocess a source file
+sysfile.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sysfile.c.i
+.PHONY : sysfile.c.i
+
+sysfile.s: sysfile.c.s
+
+.PHONY : sysfile.s
+
+# target to generate assembly for a file
+sysfile.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sysfile.c.s
+.PHONY : sysfile.c.s
+
+sysproc.o: sysproc.c.o
+
+.PHONY : sysproc.o
+
+# target to build an object file
+sysproc.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sysproc.c.o
+.PHONY : sysproc.c.o
+
+sysproc.i: sysproc.c.i
+
+.PHONY : sysproc.i
+
+# target to preprocess a source file
+sysproc.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sysproc.c.i
+.PHONY : sysproc.c.i
+
+sysproc.s: sysproc.c.s
+
+.PHONY : sysproc.s
+
+# target to generate assembly for a file
+sysproc.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/sysproc.c.s
+.PHONY : sysproc.c.s
+
+trap.o: trap.c.o
+
+.PHONY : trap.o
+
+# target to build an object file
+trap.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/trap.c.o
+.PHONY : trap.c.o
+
+trap.i: trap.c.i
+
+.PHONY : trap.i
+
+# target to preprocess a source file
+trap.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/trap.c.i
+.PHONY : trap.c.i
+
+trap.s: trap.c.s
+
+.PHONY : trap.s
+
+# target to generate assembly for a file
+trap.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/trap.c.s
+.PHONY : trap.c.s
+
+uart.o: uart.c.o
+
+.PHONY : uart.o
+
+# target to build an object file
+uart.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/uart.c.o
+.PHONY : uart.c.o
+
+uart.i: uart.c.i
+
+.PHONY : uart.i
+
+# target to preprocess a source file
+uart.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/uart.c.i
+.PHONY : uart.c.i
+
+uart.s: uart.c.s
+
+.PHONY : uart.s
+
+# target to generate assembly for a file
+uart.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/uart.c.s
+.PHONY : uart.c.s
+
+ulib.o: ulib.c.o
+
+.PHONY : ulib.o
+
+# target to build an object file
+ulib.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ulib.c.o
+.PHONY : ulib.c.o
+
+ulib.i: ulib.c.i
+
+.PHONY : ulib.i
+
+# target to preprocess a source file
+ulib.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ulib.c.i
+.PHONY : ulib.c.i
+
+ulib.s: ulib.c.s
+
+.PHONY : ulib.s
+
+# target to generate assembly for a file
+ulib.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/ulib.c.s
+.PHONY : ulib.c.s
+
+umalloc.o: umalloc.c.o
+
+.PHONY : umalloc.o
+
+# target to build an object file
+umalloc.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/umalloc.c.o
+.PHONY : umalloc.c.o
+
+umalloc.i: umalloc.c.i
+
+.PHONY : umalloc.i
+
+# target to preprocess a source file
+umalloc.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/umalloc.c.i
+.PHONY : umalloc.c.i
+
+umalloc.s: umalloc.c.s
+
+.PHONY : umalloc.s
+
+# target to generate assembly for a file
+umalloc.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/umalloc.c.s
+.PHONY : umalloc.c.s
+
+vm.o: vm.c.o
+
+.PHONY : vm.o
+
+# target to build an object file
+vm.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/vm.c.o
+.PHONY : vm.c.o
+
+vm.i: vm.c.i
+
+.PHONY : vm.i
+
+# target to preprocess a source file
+vm.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/vm.c.i
+.PHONY : vm.c.i
+
+vm.s: vm.c.s
+
+.PHONY : vm.s
+
+# target to generate assembly for a file
+vm.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/vm.c.s
+.PHONY : vm.c.s
+
+wc.o: wc.c.o
+
+.PHONY : wc.o
+
+# target to build an object file
+wc.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/wc.c.o
+.PHONY : wc.c.o
+
+wc.i: wc.c.i
+
+.PHONY : wc.i
+
+# target to preprocess a source file
+wc.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/wc.c.i
+.PHONY : wc.c.i
+
+wc.s: wc.c.s
+
+.PHONY : wc.s
+
+# target to generate assembly for a file
+wc.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/wc.c.s
+.PHONY : wc.c.s
+
+zombie.o: zombie.c.o
+
+.PHONY : zombie.o
+
+# target to build an object file
+zombie.c.o:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/zombie.c.o
+.PHONY : zombie.c.o
+
+zombie.i: zombie.c.i
+
+.PHONY : zombie.i
+
+# target to preprocess a source file
+zombie.c.i:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/zombie.c.i
+.PHONY : zombie.c.i
+
+zombie.s: zombie.c.s
+
+.PHONY : zombie.s
+
+# target to generate assembly for a file
+zombie.c.s:
+	$(MAKE) -f CMakeFiles/Assignment1.dir/build.make CMakeFiles/Assignment1.dir/zombie.c.s
+.PHONY : zombie.c.s
+
+# Help Target
+help:
+	@echo "The following are some of the valid targets for this Makefile:"
+	@echo "... all (the default if no target is provided)"
+	@echo "... clean"
+	@echo "... depend"
+	@echo "... rebuild_cache"
+	@echo "... edit_cache"
+	@echo "... Assignment1"
+	@echo "... ass1ds.o"
+	@echo "... ass1ds.i"
+	@echo "... ass1ds.s"
+	@echo "... bio.o"
+	@echo "... bio.i"
+	@echo "... bio.s"
+	@echo "... bootmain.o"
+	@echo "... bootmain.i"
+	@echo "... bootmain.s"
+	@echo "... cat.o"
+	@echo "... cat.i"
+	@echo "... cat.s"
+	@echo "... console.o"
+	@echo "... console.i"
+	@echo "... console.s"
+	@echo "... echo.o"
+	@echo "... echo.i"
+	@echo "... echo.s"
+	@echo "... exec.o"
+	@echo "... exec.i"
+	@echo "... exec.s"
+	@echo "... file.o"
+	@echo "... file.i"
+	@echo "... file.s"
+	@echo "... forktest.o"
+	@echo "... forktest.i"
+	@echo "... forktest.s"
+	@echo "... fs.o"
+	@echo "... fs.i"
+	@echo "... fs.s"
+	@echo "... grep.o"
+	@echo "... grep.i"
+	@echo "... grep.s"
+	@echo "... ide.o"
+	@echo "... ide.i"
+	@echo "... ide.s"
+	@echo "... init.o"
+	@echo "... init.i"
+	@echo "... init.s"
+	@echo "... ioapic.o"
+	@echo "... ioapic.i"
+	@echo "... ioapic.s"
+	@echo "... kalloc.o"
+	@echo "... kalloc.i"
+	@echo "... kalloc.s"
+	@echo "... kbd.o"
+	@echo "... kbd.i"
+	@echo "... kbd.s"
+	@echo "... kill.o"
+	@echo "... kill.i"
+	@echo "... kill.s"
+	@echo "... lapic.o"
+	@echo "... lapic.i"
+	@echo "... lapic.s"
+	@echo "... ln.o"
+	@echo "... ln.i"
+	@echo "... ln.s"
+	@echo "... log.o"
+	@echo "... log.i"
+	@echo "... log.s"
+	@echo "... ls.o"
+	@echo "... ls.i"
+	@echo "... ls.s"
+	@echo "... main.o"
+	@echo "... main.i"
+	@echo "... main.s"
+	@echo "... memide.o"
+	@echo "... memide.i"
+	@echo "... memide.s"
+	@echo "... mkdir.o"
+	@echo "... mkdir.i"
+	@echo "... mkdir.s"
+	@echo "... mkfs.o"
+	@echo "... mkfs.i"
+	@echo "... mkfs.s"
+	@echo "... mp.o"
+	@echo "... mp.i"
+	@echo "... mp.s"
+	@echo "... picirq.o"
+	@echo "... picirq.i"
+	@echo "... picirq.s"
+	@echo "... pipe.o"
+	@echo "... pipe.i"
+	@echo "... pipe.s"
+	@echo "... policy.o"
+	@echo "... policy.i"
+	@echo "... policy.s"
+	@echo "... printf.o"
+	@echo "... printf.i"
+	@echo "... printf.s"
+	@echo "... proc.o"
+	@echo "... proc.i"
+	@echo "... proc.s"
+	@echo "... rm.o"
+	@echo "... rm.i"
+	@echo "... rm.s"
+	@echo "... sanity.o"
+	@echo "... sanity.i"
+	@echo "... sanity.s"
+	@echo "... sh.o"
+	@echo "... sh.i"
+	@echo "... sh.s"
+	@echo "... sleeplock.o"
+	@echo "... sleeplock.i"
+	@echo "... sleeplock.s"
+	@echo "... spinlock.o"
+	@echo "... spinlock.i"
+	@echo "... spinlock.s"
+	@echo "... stressfs.o"
+	@echo "... stressfs.i"
+	@echo "... stressfs.s"
+	@echo "... string.o"
+	@echo "... string.i"
+	@echo "... string.s"
+	@echo "... syscall.o"
+	@echo "... syscall.i"
+	@echo "... syscall.s"
+	@echo "... sysfile.o"
+	@echo "... sysfile.i"
+	@echo "... sysfile.s"
+	@echo "... sysproc.o"
+	@echo "... sysproc.i"
+	@echo "... sysproc.s"
+	@echo "... trap.o"
+	@echo "... trap.i"
+	@echo "... trap.s"
+	@echo "... uart.o"
+	@echo "... uart.i"
+	@echo "... uart.s"
+	@echo "... ulib.o"
+	@echo "... ulib.i"
+	@echo "... ulib.s"
+	@echo "... umalloc.o"
+	@echo "... umalloc.i"
+	@echo "... umalloc.s"
+	@echo "... vm.o"
+	@echo "... vm.i"
+	@echo "... vm.s"
+	@echo "... wc.o"
+	@echo "... wc.i"
+	@echo "... wc.s"
+	@echo "... zombie.o"
+	@echo "... zombie.i"
+	@echo "... zombie.s"
+.PHONY : help
+
+
+
+#=============================================================================
+# Special targets to cleanup operation of make.
+
+# Special rule to run CMake to check the build system integrity.
+# No rule that depends on this can have commands that come from listfiles
+# because they might be regenerated.
+cmake_check_build_system:
+	$(CMAKE_COMMAND) -H$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0
+.PHONY : cmake_check_build_system
+
diff --git a/cmake-build-debug/cmake_install.cmake b/cmake-build-debug/cmake_install.cmake
new file mode 100644
index 0000000..6e8384f
--- /dev/null
+++ b/cmake-build-debug/cmake_install.cmake
@@ -0,0 +1,49 @@
+# Install script for directory: /users/studs/bsc/2016/rosent/os192/Assignment1
+
+# Set the install prefix
+if(NOT DEFINED CMAKE_INSTALL_PREFIX)
+  set(CMAKE_INSTALL_PREFIX "/usr/local")
+endif()
+string(REGEX REPLACE "/$" "" CMAKE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}")
+
+# Set the install configuration name.
+if(NOT DEFINED CMAKE_INSTALL_CONFIG_NAME)
+  if(BUILD_TYPE)
+    string(REGEX REPLACE "^[^A-Za-z0-9_]+" ""
+           CMAKE_INSTALL_CONFIG_NAME "${BUILD_TYPE}")
+  else()
+    set(CMAKE_INSTALL_CONFIG_NAME "Debug")
+  endif()
+  message(STATUS "Install configuration: \"${CMAKE_INSTALL_CONFIG_NAME}\"")
+endif()
+
+# Set the component getting installed.
+if(NOT CMAKE_INSTALL_COMPONENT)
+  if(COMPONENT)
+    message(STATUS "Install component: \"${COMPONENT}\"")
+    set(CMAKE_INSTALL_COMPONENT "${COMPONENT}")
+  else()
+    set(CMAKE_INSTALL_COMPONENT)
+  endif()
+endif()
+
+# Install shared libraries without execute permission?
+if(NOT DEFINED CMAKE_INSTALL_SO_NO_EXE)
+  set(CMAKE_INSTALL_SO_NO_EXE "1")
+endif()
+
+# Is this installation the result of a crosscompile?
+if(NOT DEFINED CMAKE_CROSSCOMPILING)
+  set(CMAKE_CROSSCOMPILING "FALSE")
+endif()
+
+if(CMAKE_INSTALL_COMPONENT)
+  set(CMAKE_INSTALL_MANIFEST "install_manifest_${CMAKE_INSTALL_COMPONENT}.txt")
+else()
+  set(CMAKE_INSTALL_MANIFEST "install_manifest.txt")
+endif()
+
+string(REPLACE ";" "\n" CMAKE_INSTALL_MANIFEST_CONTENT
+       "${CMAKE_INSTALL_MANIFEST_FILES}")
+file(WRITE "/users/studs/bsc/2016/rosent/os192/Assignment1/cmake-build-debug/${CMAKE_INSTALL_MANIFEST}"
+     "${CMAKE_INSTALL_MANIFEST_CONTENT}")
diff --git a/defs.h b/defs.h
index 82fb982..7c8e455 100644
--- a/defs.h
+++ b/defs.h
@@ -9,6 +9,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct perf;
 
 // bio.c
 void            binit(void);
@@ -104,7 +105,7 @@ int             pipewrite(struct pipe*, char*, int);
 //PAGEBREAK: 16
 // proc.c
 int             cpuid(void);
-void            exit(void);
+void            exit(int);
 int             fork(void);
 int             growproc(int);
 int             kill(int);
@@ -117,9 +118,14 @@ void            sched(void);
 void            setproc(struct proc*);
 void            sleep(void*, struct spinlock*);
 void            userinit(void);
-int             wait(void);
+int             wait(int*);
 void            wakeup(void*);
 void            yield(void);
+int             detach(int);
+void            priority(int);
+void            policy(int);
+int             wait_stat(int*, struct perf*);
+
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/echo.c b/echo.c
index 806dee0..eed68a0 100644
--- a/echo.c
+++ b/echo.c
@@ -9,5 +9,5 @@ main(int argc, char *argv[])
 
   for(i = 1; i < argc; i++)
     printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
-  exit();
+  exit(0);
 }
diff --git a/forktest.c b/forktest.c
index 8bc984d..4cbcb17 100644
--- a/forktest.c
+++ b/forktest.c
@@ -25,24 +25,24 @@ forktest(void)
     if(pid < 0)
       break;
     if(pid == 0)
-      exit();
+      exit(0);
   }
 
   if(n == N){
     printf(1, "fork claimed to work N times!\n", N);
-    exit();
+    exit(0);
   }
 
   for(; n > 0; n--){
-    if(wait() < 0){
+    if(wait(0) < 0){
       printf(1, "wait stopped early\n");
-      exit();
+      exit(0);
     }
   }
 
-  if(wait() != -1){
+  if(wait(0) != -1){
     printf(1, "wait got too many\n");
-    exit();
+    exit(0);
   }
 
   printf(1, "fork test OK\n");
@@ -52,5 +52,5 @@ int
 main(void)
 {
   forktest();
-  exit();
+  exit(0);
 }
diff --git a/grep.c b/grep.c
index adc4835..1aa1081 100644
--- a/grep.c
+++ b/grep.c
@@ -43,24 +43,24 @@ main(int argc, char *argv[])
 
   if(argc <= 1){
     printf(2, "usage: grep pattern [file ...]\n");
-    exit();
+    exit(0);
   }
   pattern = argv[1];
 
   if(argc <= 2){
     grep(pattern, 0);
-    exit();
+    exit(0);
   }
 
   for(i = 2; i < argc; i++){
     if((fd = open(argv[i], 0)) < 0){
       printf(1, "grep: cannot open %s\n", argv[i]);
-      exit();
+      exit(0);
     }
     grep(pattern, fd);
     close(fd);
   }
-  exit();
+  exit(0);
 }
 
 // Regexp matcher from Kernighan & Pike,
diff --git a/init.c b/init.c
index 046b551..8da3b90 100644
--- a/init.c
+++ b/init.c
@@ -24,14 +24,14 @@ main(void)
     pid = fork();
     if(pid < 0){
       printf(1, "init: fork failed\n");
-      exit();
+      exit(0);
     }
     if(pid == 0){
       exec("sh", argv);
       printf(1, "init: exec sh failed\n");
-      exit();
+      exit(0);
     }
-    while((wpid=wait()) >= 0 && wpid != pid)
+    while((wpid=wait(0)) >= 0 && wpid != pid)
       printf(1, "zombie!\n");
   }
 }
diff --git a/kill.c b/kill.c
index 364f6af..5a2e450 100644
--- a/kill.c
+++ b/kill.c
@@ -9,9 +9,9 @@ main(int argc, char **argv)
 
   if(argc < 2){
     printf(2, "usage: kill pid...\n");
-    exit();
+    exit(0);
   }
   for(i=1; i<argc; i++)
     kill(atoi(argv[i]));
-  exit();
+  exit(0);
 }
diff --git a/ln.c b/ln.c
index cf8a64e..14acdc8 100644
--- a/ln.c
+++ b/ln.c
@@ -7,9 +7,9 @@ main(int argc, char *argv[])
 {
   if(argc != 3){
     printf(2, "Usage: ln old new\n");
-    exit();
+    exit(0);
   }
   if(link(argv[1], argv[2]) < 0)
     printf(2, "link %s %s: failed\n", argv[1], argv[2]);
-  exit();
+  exit(0);
 }
diff --git a/ls.c b/ls.c
index 2862913..27742c2 100644
--- a/ls.c
+++ b/ls.c
@@ -77,9 +77,9 @@ main(int argc, char *argv[])
 
   if(argc < 2){
     ls(".");
-    exit();
+    exit(0);
   }
   for(i=1; i<argc; i++)
     ls(argv[i]);
-  exit();
+  exit(0);
 }
diff --git a/mkdir.c b/mkdir.c
index 6e4c954..d101838 100644
--- a/mkdir.c
+++ b/mkdir.c
@@ -9,7 +9,7 @@ main(int argc, char *argv[])
 
   if(argc < 2){
     printf(2, "Usage: mkdir files...\n");
-    exit();
+    exit(0);
   }
 
   for(i = 1; i < argc; i++){
@@ -19,5 +19,5 @@ main(int argc, char *argv[])
     }
   }
 
-  exit();
+  exit(0);
 }
diff --git a/policy.c b/policy.c
new file mode 100644
index 0000000..97c7885
--- /dev/null
+++ b/policy.c
@@ -0,0 +1,9 @@
+
+#include "types.h"
+#include "user.h"
+
+int main(int argc, char **argv)
+{
+    policy(atoi(argv[1]));
+    exit(0);
+}
\ No newline at end of file
diff --git a/proc.c b/proc.c
index e68bf1c..dfcce42 100644
--- a/proc.c
+++ b/proc.c
@@ -1,3 +1,4 @@
+#include <stddef.h>
 #include "schedulinginterface.h"
 #include "types.h"
 #include "defs.h"
@@ -8,71 +9,130 @@
 #include "proc.h"
 #include "spinlock.h"
 
+#define RR    1
+#define PR    2
+#define EPR    3
+
+int curr_policy = RR;
+long long time_quant = 0;
+
 extern PriorityQueue pq;
 extern RoundRobinQueue rrq;
 extern RunningProcessesHolder rpholder;
 
 long long getAccumulator(struct proc *p) {
-	//Implement this function, remove the panic line.
-	panic("getAccumulator: not implemented\n");
+    return p->accumulator;
 }
 
 struct {
-  struct spinlock lock;
-  struct proc proc[NPROC];
+    struct spinlock lock;
+    struct proc proc[NPROC];
 } ptable;
 
 static struct proc *initproc;
 
 int nextpid = 1;
+
 extern void forkret(void);
+
 extern void trapret(void);
 
 static void wakeup1(void *chan);
 
+boolean enqueue(struct proc *p) {
+    switch (curr_policy) {
+        case RR:
+            return rrq.enqueue(p);
+        case PR:
+            return pq.put(p);
+        case EPR:
+            return pq.put(p);
+        default:
+            return rrq.enqueue(p);
+    }
+}
+
+struct proc *dequeue() {
+    switch (curr_policy) {
+        case RR:
+            return rrq.dequeue();
+        case PR:
+            return pq.extractMin();
+        case EPR:
+            return pq.extractMin();
+        default:
+            return rrq.dequeue();
+    }
+}
+
+boolean isEmpty() {
+    switch (curr_policy) {
+        case RR:
+            return rrq.isEmpty();
+        case PR:
+            return pq.isEmpty();
+        case EPR:
+            return pq.isEmpty();
+        default:
+            return rrq.isEmpty();
+    }
+}
+
+void init_accumulator(struct proc *p) {
+    long long tmp1;
+    long long tmp2;
+    if (isEmpty()) {
+        p->accumulator = 0;
+    } else {
+        pq.getMinAccumulator(&tmp1);
+        rpholder.getMinAccumulator(&tmp2);
+        if (tmp1 < tmp2)
+            p->accumulator = tmp1;
+        else p->accumulator = tmp2;
+    }
+}
+
 void
-pinit(void)
-{
-  initlock(&ptable.lock, "ptable");
+pinit(void) {
+    initlock(&ptable.lock, "ptable");
 }
 
 // Must be called with interrupts disabled
 int
 cpuid() {
-  return mycpu()-cpus;
+    return mycpu() - cpus;
 }
 
 // Must be called with interrupts disabled to avoid the caller being
 // rescheduled between reading lapicid and running through the loop.
-struct cpu*
-mycpu(void)
-{
-  int apicid, i;
-  
-  if(readeflags()&FL_IF)
-    panic("mycpu called with interrupts enabled\n");
-  
-  apicid = lapicid();
-  // APIC IDs are not guaranteed to be contiguous. Maybe we should have
-  // a reverse map, or reserve a register to store &cpus[i].
-  for (i = 0; i < ncpu; ++i) {
-    if (cpus[i].apicid == apicid)
-      return &cpus[i];
-  }
-  panic("unknown apicid\n");
+struct cpu *
+mycpu(void) {
+    int apicid, i;
+
+    if (readeflags() & FL_IF)
+        panic("mycpu called with interrupts enabled\n");
+
+    apicid = lapicid();
+    // APIC IDs are not guaranteed to be contiguous. Maybe we should have
+    // a reverse map, or reserve a register to store &cpus[i].
+    for (i = 0; i < ncpu; ++i) {
+        if (cpus[i].apicid == apicid)
+            return &cpus[i];
+    }
+    panic("unknown apicid\n");
 }
 
 // Disable interrupts so that we are not rescheduled
 // while reading proc from the cpu structure
-struct proc*
+struct proc *
 myproc(void) {
-  struct cpu *c;
-  struct proc *p;
-  pushcli();
-  c = mycpu();
-  p = c->proc;
-  popcli();
-  return p;
+    struct cpu *c;
+    struct proc *p;
+    pushcli();
+    c = mycpu();
+    p = c->proc;
+    popcli();
+    return p;
 }
 
 //PAGEBREAK: 32
@@ -80,245 +140,314 @@ myproc(void) {
 // If found, change state to EMBRYO and initialize
 // state required to run in the kernel.
 // Otherwise return 0.
-static struct proc*
-allocproc(void)
-{
-  struct proc *p;
-  char *sp;
+static struct proc *
+allocproc(void) {
+    struct proc *p;
+    char *sp;
 
-  acquire(&ptable.lock);
+    acquire(&ptable.lock);
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == UNUSED)
-      goto found;
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+        if (p->state == UNUSED)
+            goto found;
 
-  release(&ptable.lock);
-  return 0;
+    release(&ptable.lock);
+    return 0;
 
-found:
-  p->state = EMBRYO;
-  p->pid = nextpid++;
+    found:
+    p->state = EMBRYO;
+    p->pid = nextpid++;
 
-  release(&ptable.lock);
+    p->ctime = ticks;
+    p->retime = 0;
+    p->rutime = 0;
+    p->stime = 0;
 
-  // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
-    p->state = UNUSED;
-    return 0;
-  }
-  sp = p->kstack + KSTACKSIZE;
+    release(&ptable.lock);
+
+    // Allocate kernel stack.
+    if ((p->kstack = kalloc()) == 0) {
+        p->state = UNUSED;
+        return 0;
+    }
+    sp = p->kstack + KSTACKSIZE;
 
-  // Leave room for trap frame.
-  sp -= sizeof *p->tf;
-  p->tf = (struct trapframe*)sp;
+    // Leave room for trap frame.
+    sp -= sizeof *p->tf;
+    p->tf = (struct trapframe *) sp;
 
-  // Set up new context to start executing at forkret,
-  // which returns to trapret.
-  sp -= 4;
-  *(uint*)sp = (uint)trapret;
+    // Set up new context to start executing at forkret,
+    // which returns to trapret.
+    sp -= 4;
+    *(uint *) sp = (uint) trapret;
 
-  sp -= sizeof *p->context;
-  p->context = (struct context*)sp;
-  memset(p->context, 0, sizeof *p->context);
-  p->context->eip = (uint)forkret;
+    sp -= sizeof *p->context;
+    p->context = (struct context *) sp;
+    memset(p->context, 0, sizeof *p->context);
+    p->context->eip = (uint) forkret;
 
-  return p;
+    return p;
 }
 
+struct proc *get_runnable_p();
+
 //PAGEBREAK: 32
 // Set up first user process.
 void
-userinit(void)
-{
-  struct proc *p;
-  extern char _binary_initcode_start[], _binary_initcode_size[];
-
-  p = allocproc();
-  
-  initproc = p;
-  if((p->pgdir = setupkvm()) == 0)
-    panic("userinit: out of memory?");
-  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
-  p->sz = PGSIZE;
-  memset(p->tf, 0, sizeof(*p->tf));
-  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-  p->tf->es = p->tf->ds;
-  p->tf->ss = p->tf->ds;
-  p->tf->eflags = FL_IF;
-  p->tf->esp = PGSIZE;
-  p->tf->eip = 0;  // beginning of initcode.S
-
-  safestrcpy(p->name, "initcode", sizeof(p->name));
-  p->cwd = namei("/");
-
-  // this assignment to p->state lets other cores
-  // run this process. the acquire forces the above
-  // writes to be visible, and the lock is also needed
-  // because the assignment might not be atomic.
-  acquire(&ptable.lock);
-
-  p->state = RUNNABLE;
-
-  release(&ptable.lock);
+userinit(void) {
+    struct proc *p;
+    extern char _binary_initcode_start[], _binary_initcode_size[];
+
+    p = allocproc();
+
+    initproc = p;
+    if ((p->pgdir = setupkvm()) == 0)
+        panic("userinit: out of memory?");
+    inituvm(p->pgdir, _binary_initcode_start, (int) _binary_initcode_size);
+    p->sz = PGSIZE;
+    p->ctime = ticks;
+    memset(p->tf, 0, sizeof(*p->tf));
+    p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+    p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+    p->tf->es = p->tf->ds;
+    p->tf->ss = p->tf->ds;
+    p->tf->eflags = FL_IF;
+    p->tf->esp = PGSIZE;
+    p->tf->eip = 0;  // beginning of initcode.S
+
+    safestrcpy(p->name, "initcode", sizeof(p->name));
+    p->cwd = namei("/");
+
+    // this assignment to p->state lets other cores
+    // run this process. the acquire forces the above
+    // writes to be visible, and the lock is also needed
+    // because the assignment might not be atomic.
+    acquire(&ptable.lock);
+
+    p->state = RUNNABLE;
+
+    p->wait_start = time_quant;
+
+//    cprintf("USERINIT process %d wait time: %d\n",p->pid, p->wait_start);
+
+    p->priority = 5;
+
+    init_accumulator(p);
+
+    enqueue(p);
+
+    release(&ptable.lock);
+}
+
+struct proc *get_runnable_p() {
+    if (curr_policy == EPR && time_quant % 100 == 0 && time_quant != 0) {
+        struct proc *tmp_p;
+        struct proc *p = 0;
+        long long max_wait = -1;
+
+        for (tmp_p = ptable.proc; tmp_p < &ptable.proc[NPROC]; tmp_p++) {
+            if (tmp_p->state == RUNNABLE) {
+                if ((time_quant - tmp_p->wait_start) > max_wait) {
+                    max_wait = time_quant - tmp_p->wait_start;
+                    p = tmp_p;
+                }
+            }
+        }
+        pq.extractProc(p);
+        return p;
+    } else
+        return dequeue();
 }
 
 // Grow current process's memory by n bytes.
 // Return 0 on success, -1 on failure.
 int
-growproc(int n)
-{
-  uint sz;
-  struct proc *curproc = myproc();
-
-  sz = curproc->sz;
-  if(n > 0){
-    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-      return -1;
-  } else if(n < 0){
-    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
-      return -1;
-  }
-  curproc->sz = sz;
-  switchuvm(curproc);
-  return 0;
+growproc(int n) {
+    uint sz;
+    struct proc *curproc = myproc();
+
+    sz = curproc->sz;
+    if (n > 0) {
+        if ((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+            return -1;
+    } else if (n < 0) {
+        if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+            return -1;
+    }
+    curproc->sz = sz;
+    switchuvm(curproc);
+    return 0;
 }
 
 // Create a new process copying p as the parent.
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
 int
-fork(void)
-{
-  int i, pid;
-  struct proc *np;
-  struct proc *curproc = myproc();
-
-  // Allocate process.
-  if((np = allocproc()) == 0){
-    return -1;
-  }
+fork(void) {
+    int i, pid;
+    struct proc *np;
+    struct proc *curproc = myproc();
+
+    // Allocate process.
+    if ((np = allocproc()) == 0) {
+        return -1;
+    }
 
-  // Copy process state from proc.
-  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
-    kfree(np->kstack);
-    np->kstack = 0;
-    np->state = UNUSED;
-    return -1;
-  }
-  np->sz = curproc->sz;
-  np->parent = curproc;
-  *np->tf = *curproc->tf;
+    // Copy process state from proc.
+    if ((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0) {
+        kfree(np->kstack);
+        np->kstack = 0;
+        np->state = UNUSED;
+        return -1;
+    }
+    np->sz = curproc->sz;
+    np->parent = curproc;
+    *np->tf = *curproc->tf;
 
-  // Clear %eax so that fork returns 0 in the child.
-  np->tf->eax = 0;
+    // Clear %eax so that fork returns 0 in the child.
+    np->tf->eax = 0;
 
-  for(i = 0; i < NOFILE; i++)
-    if(curproc->ofile[i])
-      np->ofile[i] = filedup(curproc->ofile[i]);
-  np->cwd = idup(curproc->cwd);
+    for (i = 0; i < NOFILE; i++)
+        if (curproc->ofile[i])
+            np->ofile[i] = filedup(curproc->ofile[i]);
+    np->cwd = idup(curproc->cwd);
 
-  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+    safestrcpy(np->name, curproc->name, sizeof(curproc->name));
 
-  pid = np->pid;
+    pid = np->pid;
 
-  acquire(&ptable.lock);
+    acquire(&ptable.lock);
 
-  np->state = RUNNABLE;
+    np->state = RUNNABLE;
+    np->wait_start = time_quant;
+    np->priority = 5;
+    init_accumulator(np);
+    enqueue(np);
 
-  release(&ptable.lock);
+    release(&ptable.lock);
 
-  return pid;
+    return pid;
 }
 
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
-// until its parent calls wait() to find out it exited.
+// until its parent calls wait(0) to find out it exited.
 void
-exit(void)
-{
-  struct proc *curproc = myproc();
-  struct proc *p;
-  int fd;
-
-  if(curproc == initproc)
-    panic("init exiting");
-
-  // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-    if(curproc->ofile[fd]){
-      fileclose(curproc->ofile[fd]);
-      curproc->ofile[fd] = 0;
+exit(int status) {
+    struct proc *curproc = myproc();
+    struct proc *p;
+    int fd;
+
+    curproc->status = status;
+
+    if (curproc == initproc)
+        panic("init exiting");
+
+    // Close all open files.
+    for (fd = 0; fd < NOFILE; fd++) {
+        if (curproc->ofile[fd]) {
+            fileclose(curproc->ofile[fd]);
+            curproc->ofile[fd] = 0;
+        }
     }
-  }
 
-  begin_op();
-  iput(curproc->cwd);
-  end_op();
-  curproc->cwd = 0;
+    begin_op();
+    iput(curproc->cwd);
+    end_op();
+    curproc->cwd = 0;
 
-  acquire(&ptable.lock);
+    acquire(&ptable.lock);
 
-  // Parent might be sleeping in wait().
-  wakeup1(curproc->parent);
+    // Parent might be sleeping in wait(0).
+    wakeup1(curproc->parent);
 
-  // Pass abandoned children to init.
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->parent == curproc){
-      p->parent = initproc;
-      if(p->state == ZOMBIE)
-        wakeup1(initproc);
+    // Pass abandoned children to init.
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+        if (p->parent == curproc) {
+            p->parent = initproc;
+            if (p->state == ZOMBIE)
+                wakeup1(initproc);
+        }
     }
-  }
-
-  // Jump into the scheduler, never to return.
-  curproc->state = ZOMBIE;
-  sched();
-  panic("zombie exit");
+    curproc->ttime = ticks;
+    // Jump into the scheduler, never to return.
+    curproc->state = ZOMBIE;
+    rpholder.remove(curproc);
+    sched();
+    panic("zombie exit");
 }
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
 int
-wait(void)
-{
-  struct proc *p;
-  int havekids, pid;
-  struct proc *curproc = myproc();
-  
-  acquire(&ptable.lock);
-  for(;;){
-    // Scan through table looking for exited children.
-    havekids = 0;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != curproc)
-        continue;
-      havekids = 1;
-      if(p->state == ZOMBIE){
-        // Found one.
-        pid = p->pid;
-        kfree(p->kstack);
-        p->kstack = 0;
-        freevm(p->pgdir);
-        p->pid = 0;
-        p->parent = 0;
-        p->name[0] = 0;
-        p->killed = 0;
-        p->state = UNUSED;
-        release(&ptable.lock);
-        return pid;
-      }
-    }
+wait(int *status) {
+    struct proc *p;
+    int havekids, pid;
+    struct proc *curproc = myproc();
 
-    // No point waiting if we don't have any children.
-    if(!havekids || curproc->killed){
-      release(&ptable.lock);
-      return -1;
+    acquire(&ptable.lock);
+    for (;;) {
+        // Scan through table looking for exited children.
+        havekids = 0;
+        for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+            if (p->parent != curproc)
+                continue;
+            havekids = 1;
+            if (p->state == ZOMBIE) {
+                // Found one.
+                pid = p->pid;
+                kfree(p->kstack);
+                p->kstack = 0;
+                freevm(p->pgdir);
+                p->pid = 0;
+                p->parent = 0;
+                p->name[0] = 0;
+                p->killed = 0;
+                p->ctime = 0;
+                p->ttime = 0;
+                p->stime = 0;
+                p->retime = 0;
+                p->rutime = 0;
+                p->state = UNUSED;
+                release(&ptable.lock);
+                if (status != 0) {
+                    *status = p->status;
+                }
+                return pid;
+            }
+        }
+
+        // No point waiting if we don't have any children.
+        if (!havekids || curproc->killed) {
+            release(&ptable.lock);
+            return -1;
+        }
+
+        // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+        sleep(curproc, &ptable.lock);  //DOC: wait-sleep
     }
+}
 
-    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-  }
+int
+detach(int pid) {
+    struct proc *curproc = myproc();
+    struct proc *p;
+
+    int found_child = 0;
+
+    // Pass abandoned children to init.
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+        if (p->pid == pid && p->parent == curproc) {
+            found_child = 1;
+            p->parent = initproc;
+            p->ttime = ticks;
+            if (p->state == ZOMBIE)
+                return -1;
+
+        }
+    }
+    if (found_child == 0) return -1;
+    return 0;
 }
 
 //PAGEBREAK: 42
@@ -330,39 +459,36 @@ wait(void)
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
 void
-scheduler(void)
-{
-  struct proc *p;
-  struct cpu *c = mycpu();
-  c->proc = 0;
-  
-  for(;;){
-    // Enable interrupts on this processor.
-    sti();
-
-    // Loop over process table looking for process to run.
-    acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
-
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-
-      swtch(&(c->scheduler), p->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      c->proc = 0;
-    }
-    release(&ptable.lock);
+scheduler(void) {
+    struct proc *p;
+    struct cpu *c = mycpu();
+    c->proc = 0;
+
+    for (;;) {
+        // Enable interrupts on this processor.
+        sti();
+
+        // Loop over process table looking for process to run.
+        acquire(&ptable.lock);
+        if (!isEmpty()) {
+            p = get_runnable_p();
+            c->proc = p;
+            switchuvm(p);
+            p->state = RUNNING;
+            p->wait_start = 0;
+            // add RUNNING process to running process holder
+            rpholder.add(p);
+
+            swtch(&(c->scheduler), p->context);
+            switchkvm();
+
+            // Process is done running for now.
+            // It should have changed its p->state before coming back.
+            c->proc = 0;
+        }
+        release(&ptable.lock);
 
-  }
+    }
 }
 
 // Enter scheduler.  Must hold only ptable.lock
@@ -373,137 +499,150 @@ scheduler(void)
 // break in the few places where a lock is held but
 // there's no process.
 void
-sched(void)
-{
-  int intena;
-  struct proc *p = myproc();
-
-  if(!holding(&ptable.lock))
-    panic("sched ptable.lock");
-  if(mycpu()->ncli != 1)
-    panic("sched locks");
-  if(p->state == RUNNING)
-    panic("sched running");
-  if(readeflags()&FL_IF)
-    panic("sched interruptible");
-  intena = mycpu()->intena;
-  swtch(&p->context, mycpu()->scheduler);
-  mycpu()->intena = intena;
+sched(void) {
+    int intena;
+    struct proc *p = myproc();
+
+    if (!holding(&ptable.lock))
+        panic("sched ptable.lock");
+    if (mycpu()->ncli != 1)
+        panic("sched locks");
+    if (p->state == RUNNING)
+        panic("sched running");
+    if (readeflags() & FL_IF)
+        panic("sched interruptible");
+    intena = mycpu()->intena;
+    swtch(&p->context, mycpu()->scheduler);
+    mycpu()->intena = intena;
 }
 
 // Give up the CPU for one scheduling round.
 void
-yield(void)
-{
-  acquire(&ptable.lock);  //DOC: yieldlock
-  myproc()->state = RUNNABLE;
-  sched();
-  release(&ptable.lock);
+yield(void) {
+    acquire(&ptable.lock);  //DOC: yieldlock
+    time_quant++;
+//    cprintf("time quant: %d\n", time_quant);
+    myproc()->state = RUNNABLE;
+    myproc()->wait_start = time_quant;
+//    cprintf("YIELD p %d started waiting at: %d\n", myproc()->pid, myproc()->wait_start);
+    enqueue(myproc());
+
+    myproc()->accumulator += myproc()->priority;
+
+    rpholder.remove(myproc());
+
+    sched();
+    release(&ptable.lock);
 }
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
 void
-forkret(void)
-{
-  static int first = 1;
-  // Still holding ptable.lock from scheduler.
-  release(&ptable.lock);
-
-  if (first) {
-    // Some initialization functions must be run in the context
-    // of a regular process (e.g., they call sleep), and thus cannot
-    // be run from main().
-    first = 0;
-    iinit(ROOTDEV);
-    initlog(ROOTDEV);
-  }
-
-  // Return to "caller", actually trapret (see allocproc).
+forkret(void) {
+    static int first = 1;
+    // Still holding ptable.lock from scheduler.
+    release(&ptable.lock);
+
+    if (first) {
+        // Some initialization functions must be run in the context
+        // of a regular process (e.g., they call sleep), and thus cannot
+        // be run from main().
+        first = 0;
+        iinit(ROOTDEV);
+        initlog(ROOTDEV);
+    }
+
+    // Return to "caller", actually trapret (see allocproc).cprintf
 }
 
 // Atomically release lock and sleep on chan.
 // Reacquires lock when awakened.
 void
-sleep(void *chan, struct spinlock *lk)
-{
-  struct proc *p = myproc();
-  
-  if(p == 0)
-    panic("sleep");
-
-  if(lk == 0)
-    panic("sleep without lk");
-
-  // Must acquire ptable.lock in order to
-  // change p->state and then call sched.
-  // Once we hold ptable.lock, we can be
-  // guaranteed that we won't miss any wakeup
-  // (wakeup runs with ptable.lock locked),
-  // so it's okay to release lk.
-  if(lk != &ptable.lock){  //DOC: sleeplock0
-    acquire(&ptable.lock);  //DOC: sleeplock1
-    release(lk);
-  }
-  // Go to sleep.
-  p->chan = chan;
-  p->state = SLEEPING;
-
-  sched();
-
-  // Tidy up.
-  p->chan = 0;
-
-  // Reacquire original lock.
-  if(lk != &ptable.lock){  //DOC: sleeplock2
-    release(&ptable.lock);
-    acquire(lk);
-  }
+sleep(void *chan, struct spinlock *lk) {
+    struct proc *p = myproc();
+
+    if (p == 0)
+        panic("sleep");
+
+    if (lk == 0)
+        panic("sleep without lk");
+
+    // Must acquire ptable.lock in order to
+    // change p->state and then call sched.
+    // Once we hold ptable.lock, we can be
+    // guaranteed that we won't miss any wakeup
+    // (wakeup runs with ptable.lock locked),
+    // so it's okay to release lk.
+    if (lk != &ptable.lock) {  //DOC: sleeplock0
+        acquire(&ptable.lock);  //DOC: sleeplock1
+        release(lk);
+    }
+    // Go to sleep.
+    p->chan = chan;
+    p->state = SLEEPING;
+    rpholder.remove(p);
+
+    sched();
+
+    // Tidy up.
+    p->chan = 0;
+
+    // Reacquire original lock.
+    if (lk != &ptable.lock) {  //DOC: sleeplock2
+        release(&ptable.lock);
+        acquire(lk);
+    }
 }
 
 //PAGEBREAK!
 // Wake up all processes sleeping on chan.
 // The ptable lock must be held.
 static void
-wakeup1(void *chan)
-{
-  struct proc *p;
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
-      p->state = RUNNABLE;
+wakeup1(void *chan) {
+    struct proc *p;
+
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+        if (p->state == SLEEPING && p->chan == chan) {
+            p->state = RUNNABLE;
+            p->wait_start = time_quant;
+            init_accumulator(p);
+            enqueue(p);
+        }
 }
 
 // Wake up all processes sleeping on chan.
 void
-wakeup(void *chan)
-{
-  acquire(&ptable.lock);
-  wakeup1(chan);
-  release(&ptable.lock);
+wakeup(void *chan) {
+    acquire(&ptable.lock);
+    wakeup1(chan);
+    release(&ptable.lock);
+
 }
 
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
 int
-kill(int pid)
-{
-  struct proc *p;
-
-  acquire(&ptable.lock);
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->pid == pid){
-      p->killed = 1;
-      // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
-        p->state = RUNNABLE;
-      release(&ptable.lock);
-      return 0;
+kill(int pid) {
+    struct proc *p;
+    acquire(&ptable.lock);
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+        if (p->pid == pid) {
+            p->killed = 1;
+            // Wake process from sleep if necessary.
+            if (p->state == SLEEPING) {
+                p->state = RUNNABLE;
+                p->wait_start = time_quant;
+//                cprintf("KILL p %d started waiting at: %d\n", p->pid, p->wait_start);
+                init_accumulator(p);
+                enqueue(p);
+            }
+            release(&ptable.lock);
+            return 0;
+        }
     }
-  }
-  release(&ptable.lock);
-  return -1;
+    release(&ptable.lock);
+    return -1;
 }
 
 //PAGEBREAK: 36
@@ -511,34 +650,139 @@ kill(int pid)
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
 void
-procdump(void)
-{
-  static char *states[] = {
-  [UNUSED]    "unused",
-  [EMBRYO]    "embryo",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
-  };
-  int i;
-  struct proc *p;
-  char *state;
-  uint pc[10];
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->state == UNUSED)
-      continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-      state = states[p->state];
-    else
-      state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
-        cprintf(" %p", pc[i]);
+procdump(void) {
+    static char *states[] = {
+            [UNUSED]    "unused",
+            [EMBRYO]    "embryo",
+            [SLEEPING]  "sleep ",
+            [RUNNABLE]  "runble",
+            [RUNNING]   "run   ",
+            [ZOMBIE]    "zombie"
+    };
+    int i;
+    struct proc *p;
+    char *state;
+    uint pc[10];
+
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+        if (p->state == UNUSED)
+            continue;
+        if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
+            state = states[p->state];
+        else
+            state = "???";
+        cprintf("%d %s %s", p->pid, state, p->name);
+        if (p->state == SLEEPING) {
+            getcallerpcs((uint *) p->context->ebp + 2, pc);
+            for (i = 0; i < 10 && pc[i] != 0; i++)
+                cprintf(" %p", pc[i]);
+        }
+        cprintf("\n");
+    }
+}
+
+void
+priority(int priority) {
+    if (curr_policy == PR) {
+        if (priority > 10 || priority < 1) panic("Illegal priority params");
     }
-    cprintf("\n");
-  }
+    struct proc *p = myproc();
+    p->priority = priority;
 }
+
+void
+policy(int policy) {
+    acquire(&ptable.lock);
+    struct proc *tmp_p;
+    // RR is selected - init all accumulators to 0
+    if (policy == RR) {
+        for (tmp_p = ptable.proc; tmp_p < &ptable.proc[NPROC]; tmp_p++) {
+            tmp_p->accumulator = 0;
+        }
+        if (curr_policy != RR)
+            pq.switchToRoundRobinPolicy();
+
+    }
+    // PR is selected - change priority 0 to 1
+    if (policy == PR || policy == EPR) {
+        if (policy == PR) {
+            for (tmp_p = ptable.proc; tmp_p < &ptable.proc[NPROC]; tmp_p++) {
+                if (tmp_p->priority == 0) tmp_p->priority = 1;
+            }
+        }
+        if (curr_policy == RR)
+            rrq.switchToPriorityQueuePolicy();
+    }
+    curr_policy = policy;
+    release(&ptable.lock);
+}
+
+// Wait for a child process to exit and return its pid.
+// Return -1 if this process has no children.
+int wait_stat(int * status, struct perf * perfPtr) {
+    struct proc *p;
+    int havekids, pid;
+
+    acquire(&ptable.lock);
+    for(;;){
+        // Scan through table looking for exited children.
+        havekids = 0;
+        for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+            if(p->parent != myproc())
+                continue;
+            havekids = 1;
+            if(p->state == ZOMBIE){
+                if (status != 0) {
+                    *status = p-> status;
+                }
+                perfPtr->ctime = p->ctime;
+                perfPtr->ttime = p->ttime;
+                perfPtr->stime = p->stime;
+                perfPtr->retime = p->retime;
+                perfPtr->rutime = p->rutime;
+
+                // Found one.
+                pid = p->pid;
+                kfree(p->kstack);
+                p->kstack = 0;
+                freevm(p->pgdir);
+                p->pid = 0;
+                p->parent = 0;
+                p->name[0] = 0;
+                p->killed = 0;
+                p->ctime = 0;
+                p->ttime = 0;
+                p->stime = 0;
+                p->retime = 0;
+                p->rutime = 0;
+
+                p->state = UNUSED;
+                release(&ptable.lock);
+                return pid;
+            }
+        }
+
+        // No point waiting if we don't have any children.
+        if(!havekids || myproc()->killed){
+            release(&ptable.lock);
+            return -1;
+        }
+
+        // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+        sleep(myproc(), &ptable.lock);  //DOC: wait-sleep
+    }
+}
+
+void incCounters(void) {
+    struct proc *p;
+    acquire(&ptable.lock);
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+        if (p->state == SLEEPING)
+            p->stime++;
+        if (p->state == RUNNABLE)
+            p->retime++;
+        if (p->state == RUNNING)
+            p->rutime++;
+    }
+    release(&ptable.lock);
+}
\ No newline at end of file
diff --git a/proc.h b/proc.h
index 6ad690e..dd1ba10 100644
--- a/proc.h
+++ b/proc.h
@@ -2,14 +2,14 @@
 
 // Per-CPU state
 struct cpu {
-  uchar apicid;                // Local APIC ID
-  struct context *scheduler;   // swtch() here to enter scheduler
-  struct taskstate ts;         // Used by x86 to find stack for interrupt
-  struct segdesc gdt[NSEGS];   // x86 global descriptor table
-  volatile uint started;       // Has the CPU started?
-  int ncli;                    // Depth of pushcli nesting.
-  int intena;                  // Were interrupts enabled before pushcli?
-  struct proc *proc;           // The process running on this cpu or null
+    uchar apicid;                // Local APIC ID
+    struct context *scheduler;   // swtch() here to enter scheduler
+    struct taskstate ts;         // Used by x86 to find stack for interrupt
+    struct segdesc gdt[NSEGS];   // x86 global descriptor table
+    volatile uint started;       // Has the CPU started?
+    int ncli;                    // Depth of pushcli nesting.
+    int intena;                  // Were interrupts enabled before pushcli?
+    struct proc *proc;           // The process running on this cpu or null
 };
 
 extern struct cpu cpus[NCPU];
@@ -27,30 +27,41 @@ extern int ncpu;
 // at the "Switch stacks" comment. Switch doesn't save eip explicitly,
 // but it is on the stack and allocproc() manipulates it.
 struct context {
-  uint edi;
-  uint esi;
-  uint ebx;
-  uint ebp;
-  uint eip;
+    uint edi;
+    uint esi;
+    uint ebx;
+    uint ebp;
+    uint eip;
 };
 
-enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
+enum procstate {
+    UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE
+};
 
 // Per-process state
 struct proc {
-  uint sz;                       // Size of process memory (bytes)
-  pde_t* pgdir;                  // Page table
-  char *kstack;                  // Bottom of kernel stack for this process
-  enum procstate volatile state; // Process state
-  int pid;                       // Process ID
-  struct proc *parent;           // Parent process
-  struct trapframe *tf;          // Trap frame for current syscall
-  struct context *context;       // swtch() here to run process
-  void *chan;                    // If non-zero, sleeping on chan
-  int killed;                    // If non-zero, have been killed
-  struct file *ofile[NOFILE];    // Open files
-  struct inode *cwd;             // Current directory  
-  char name[16];                 // Process name (debugging)
+    uint sz;                       // Size of process memory (bytes)
+    pde_t *pgdir;                  // Page table
+    char *kstack;                  // Bottom of kernel stack for this process
+    enum procstate volatile state; // Process state
+    int pid;                       // Process ID
+    struct proc *parent;           // Parent process
+    struct trapframe *tf;          // Trap frame for current syscall
+    struct context *context;       // swtch() here to run process
+    void *chan;                    // If non-zero, sleeping on chan
+    int killed;                    // If non-zero, have been killed
+    struct file *ofile[NOFILE];    // Open files
+    struct inode *cwd;             // Current directory
+    char name[16];                 // Process name (debugging)
+    int status;                    // the exit parameter
+    long long accumulator;
+    int priority;
+    long long wait_start;
+    int ctime;                   // Procedure creation tick
+    int ttime;                   // Procedure termination tick
+    int stime;                   // Procedure total SLEEPING tick count
+    int retime;                  // Procedure total READY (RUNNABLE) tick count
+    int rutime;                  // Procedure total RUNNING tick count
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/rm.c b/rm.c
index 4fd33c8..83c5f36 100644
--- a/rm.c
+++ b/rm.c
@@ -9,7 +9,7 @@ main(int argc, char *argv[])
 
   if(argc < 2){
     printf(2, "Usage: rm files...\n");
-    exit();
+    exit(0);
   }
 
   for(i = 1; i < argc; i++){
@@ -19,5 +19,5 @@ main(int argc, char *argv[])
     }
   }
 
-  exit();
+  exit(0);
 }
diff --git a/sanity.c b/sanity.c
new file mode 100644
index 0000000..328ba7d
--- /dev/null
+++ b/sanity.c
@@ -0,0 +1,44 @@
+#include "types.h"
+//#include "stat.h"
+#include "user.h"
+
+//void test()
+//{
+//    int pid = fork();
+//    //this is the child
+//    if (pid == 0) {
+//        sleep(300);
+//        exit(5);
+//    }
+//    else {
+//        int* status = malloc(1);
+//        wait(status);
+//        printf(1, "exit status after is %d\n",*status);
+//    }
+//
+//    exit(0);
+//}
+//
+
+int main(void)
+{
+int pid;
+int first_status=0;
+int second_status=0;
+int third_status=0;
+
+pid= fork();
+if( pid > 0){
+
+    first_status = detach(pid);  // status = 0
+    second_status = detach(pid); // status = -1
+    third_status = detach(pid + 1);  // status = -1
+
+}
+    printf(1,"first status is : %d\n", first_status);
+    printf(1,"second status is : %d\n", second_status);
+    printf(1,"third status is : %d\n", third_status);
+
+    exit(0);
+
+}
\ No newline at end of file
diff --git a/schedulinginterface.h b/schedulinginterface.h
index ff5fccc..3a54530 100644
--- a/schedulinginterface.h
+++ b/schedulinginterface.h
@@ -37,7 +37,7 @@ typedef struct PriorityQueue {
 	boolean (*switchToRoundRobinPolicy)();
 
 	//Extracts a specific process from the queue.
-	//Use this function in policy 3 (Extended priority) once every 100 time quanta.
+	//Use this function in curr_policy 3 (Extended priority) once every 100 time quanta.
 	//This function returns true if it succeeded to extract the given process,
 	//it may fail if you didn't manage the data structures correctly.
 	boolean (*extractProc)(struct proc* p);
diff --git a/sh.c b/sh.c
index 054bab9..8860714 100644
--- a/sh.c
+++ b/sh.c
@@ -14,247 +14,307 @@
 #define MAXARGS 10
 
 struct cmd {
-  int type;
+    int type;
 };
 
 struct execcmd {
-  int type;
-  char *argv[MAXARGS];
-  char *eargv[MAXARGS];
+    int type;
+    char *argv[MAXARGS];
+    char *eargv[MAXARGS];
 };
 
 struct redircmd {
-  int type;
-  struct cmd *cmd;
-  char *file;
-  char *efile;
-  int mode;
-  int fd;
+    int type;
+    struct cmd *cmd;
+    char *file;
+    char *efile;
+    int mode;
+    int fd;
 };
 
 struct pipecmd {
-  int type;
-  struct cmd *left;
-  struct cmd *right;
+    int type;
+    struct cmd *left;
+    struct cmd *right;
 };
 
 struct listcmd {
-  int type;
-  struct cmd *left;
-  struct cmd *right;
+    int type;
+    struct cmd *left;
+    struct cmd *right;
 };
 
 struct backcmd {
-  int type;
-  struct cmd *cmd;
+    int type;
+    struct cmd *cmd;
 };
 
 int fork1(void);  // Fork but panics on failure.
-void panic(char*);
-struct cmd *parsecmd(char*);
+void panic(char *);
+
+struct cmd *parsecmd(char *);
 
-// Execute cmd.  Never returns.
 void
-runcmd(struct cmd *cmd)
-{
-  int p[2];
-  struct backcmd *bcmd;
-  struct execcmd *ecmd;
-  struct listcmd *lcmd;
-  struct pipecmd *pcmd;
-  struct redircmd *rcmd;
-
-  if(cmd == 0)
-    exit();
-
-  switch(cmd->type){
-  default:
-    panic("runcmd");
-
-  case EXEC:
-    ecmd = (struct execcmd*)cmd;
-    if(ecmd->argv[0] == 0)
-      exit();
-    exec(ecmd->argv[0], ecmd->argv);
-    printf(2, "exec %s failed\n", ecmd->argv[0]);
-    break;
-
-  case REDIR:
-    rcmd = (struct redircmd*)cmd;
-    close(rcmd->fd);
-    if(open(rcmd->file, rcmd->mode) < 0){
-      printf(2, "open %s failed\n", rcmd->file);
-      exit();
-    }
-    runcmd(rcmd->cmd);
-    break;
-
-  case LIST:
-    lcmd = (struct listcmd*)cmd;
-    if(fork1() == 0)
-      runcmd(lcmd->left);
-    wait();
-    runcmd(lcmd->right);
-    break;
-
-  case PIPE:
-    pcmd = (struct pipecmd*)cmd;
-    if(pipe(p) < 0)
-      panic("pipe");
-    if(fork1() == 0){
-      close(1);
-      dup(p[1]);
-      close(p[0]);
-      close(p[1]);
-      runcmd(pcmd->left);
+look_in_path(struct execcmd *ecmd) {
+    int ret, fd;
+    static char buf[1024];
+
+    if ((fd = open("/path", O_RDONLY)) < 0)
+        printf(2, "open() error\n");
+
+    else {
+        if ((ret = read(fd, buf, sizeof(buf))) <= 0)
+            printf(2, "Error: path read\n");
+
+        close(fd);
+
+        buf[ret] = 0x00;
+        int i = 0;
+        int path_start = 0;
+        static char curr_path[1024];
+        int cmd_size = 0;
+        static char new_cmd[1024];
+        while (ecmd->argv[0][cmd_size]) cmd_size++;
+
+        while (i < ret) {
+            if (buf[i] == ':') {
+                curr_path[i] = 0x00;
+
+                int j = path_start;
+                int path_size = 0;
+                while (j < i) {
+                    new_cmd[0] = curr_path[j];
+                    j++;
+                    path_size++;
+                }
+                int k = 0;
+
+                while (k < cmd_size) {
+                    new_cmd[path_size + k] = ecmd->argv[0][k];
+                    k++;
+                }
+
+                exec(new_cmd, ecmd->argv);
+                memset(curr_path, 0, 1024);
+                memset(new_cmd, 0, 1024);
+                path_start = i + 1;
+            } else curr_path[i] = buf[i];
+            i++;
+        }
     }
-    if(fork1() == 0){
-      close(0);
-      dup(p[0]);
-      close(p[0]);
-      close(p[1]);
-      runcmd(pcmd->right);
+}
+
+
+// Execute cmd.  Never returns.
+void
+runcmd(struct cmd *cmd) {
+    int p[2];
+    struct backcmd *bcmd;
+    struct execcmd *ecmd;
+    struct listcmd *lcmd;
+    struct pipecmd *pcmd;
+    struct redircmd *rcmd;
+
+    if (cmd == 0)
+        exit(0);
+
+    switch (cmd->type) {
+        default:
+            panic("runcmd");
+
+        case EXEC:
+            ecmd = (struct execcmd *) cmd;
+            if (ecmd->argv[0] == 0)
+                exit(0);
+            exec(ecmd->argv[0], ecmd->argv);
+            look_in_path(ecmd);
+            printf(2, "exec %s failed\n", ecmd->argv[0]);
+            break;
+
+        case REDIR:
+            rcmd = (struct redircmd *) cmd;
+            close(rcmd->fd);
+            if (open(rcmd->file, rcmd->mode) < 0) {
+                printf(2, "open %s failed\n", rcmd->file);
+                exit(0);
+            }
+            runcmd(rcmd->cmd);
+            break;
+
+        case LIST:
+            lcmd = (struct listcmd *) cmd;
+            if (fork1() == 0)
+                runcmd(lcmd->left);
+            wait(0);
+            runcmd(lcmd->right);
+            break;
+
+        case PIPE:
+            pcmd = (struct pipecmd *) cmd;
+            if (pipe(p) < 0)
+                panic("pipe");
+            if (fork1() == 0) {
+                close(1);
+                dup(p[1]);
+                close(p[0]);
+                close(p[1]);
+                runcmd(pcmd->left);
+            }
+            if (fork1() == 0) {
+                close(0);
+                dup(p[0]);
+                close(p[0]);
+                close(p[1]);
+                runcmd(pcmd->right);
+            }
+            close(p[0]);
+            close(p[1]);
+            wait(0);
+            wait(0);
+            break;
+
+        case BACK:
+            bcmd = (struct backcmd *) cmd;
+            if (fork1() == 0)
+                runcmd(bcmd->cmd);
+            break;
     }
-    close(p[0]);
-    close(p[1]);
-    wait();
-    wait();
-    break;
-
-  case BACK:
-    bcmd = (struct backcmd*)cmd;
-    if(fork1() == 0)
-      runcmd(bcmd->cmd);
-    break;
-  }
-  exit();
+    exit(0);
 }
 
 int
-getcmd(char *buf, int nbuf)
-{
-  printf(2, "$ ");
-  memset(buf, 0, nbuf);
-  gets(buf, nbuf);
-  if(buf[0] == 0) // EOF
-    return -1;
-  return 0;
+getcmd(char *buf, int nbuf) {
+    printf(2, "$ ");
+    memset(buf, 0, nbuf);
+    gets(buf, nbuf);
+    if (buf[0] == 0) // EOF
+        return -1;
+    return 0;
 }
 
 int
-main(void)
-{
-  static char buf[100];
-  int fd;
-
-  // Ensure that three file descriptors are open.
-  while((fd = open("console", O_RDWR)) >= 0){
-    if(fd >= 3){
-      close(fd);
-      break;
+main(void) {
+    static char buf[100];
+    int fd, fd2;
+
+    // Ensure that three file descriptors are open.
+    while ((fd = open("console", O_RDWR)) >= 0) {
+        if (fd >= 3) {
+            close(fd);
+            break;
+        }
     }
-  }
-
-  // Read and run input commands.
-  while(getcmd(buf, sizeof(buf)) >= 0){
-    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      // Chdir must be called by the parent, not the child.
-      buf[strlen(buf)-1] = 0;  // chop \n
-      if(chdir(buf+3) < 0)
-        printf(2, "cannot cd %s\n", buf+3);
-      continue;
+
+    while ((fd2 = open("path", O_CREATE | O_RDWR)) >= 0) {
+        if (fd2 >= 3) {
+
+            break;
+        }
     }
-    if(fork1() == 0)
-      runcmd(parsecmd(buf));
-    wait();
-  }
-  exit();
+
+
+    char *path_content = "/:/bin/:";
+    int path_size = 0;
+    while (path_content[path_size]) {path_size++;}
+
+    if (write(fd2, path_content, path_size) < path_size) {
+        printf(2, "path write: Error");
+    }
+    close(fd2);
+
+    // Read and run input commands.
+    while (getcmd(buf, sizeof(buf)) >= 0) {
+        if (buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' ') {
+            // Chdir must be called by the parent, not the child.
+            buf[strlen(buf) - 1] = 0;  // chop \n
+            if (chdir(buf + 3) < 0)
+                printf(2, "cannot cd %s\n", buf + 3);
+            continue;
+        }
+        if (fork1() == 0)
+            runcmd(parsecmd(buf));
+        wait(0);
+    }
+    exit(0);
 }
 
 void
-panic(char *s)
-{
-  printf(2, "%s\n", s);
-  exit();
+panic(char *s) {
+    printf(2, "%s\n", s);
+    exit(0);
 }
 
 int
-fork1(void)
-{
-  int pid;
-
-  pid = fork();
-  if(pid == -1)
-    panic("fork");
-  return pid;
+fork1(void) {
+    int pid;
+
+    pid = fork();
+    if (pid == -1)
+        panic("fork");
+    return pid;
 }
 
 //PAGEBREAK!
 // Constructors
 
-struct cmd*
-execcmd(void)
-{
-  struct execcmd *cmd;
+struct cmd *
+execcmd(void) {
+    struct execcmd *cmd;
 
-  cmd = malloc(sizeof(*cmd));
-  memset(cmd, 0, sizeof(*cmd));
-  cmd->type = EXEC;
-  return (struct cmd*)cmd;
+    cmd = malloc(sizeof(*cmd));
+    memset(cmd, 0, sizeof(*cmd));
+    cmd->type = EXEC;
+    return (struct cmd *) cmd;
 }
 
-struct cmd*
-redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
-{
-  struct redircmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-  memset(cmd, 0, sizeof(*cmd));
-  cmd->type = REDIR;
-  cmd->cmd = subcmd;
-  cmd->file = file;
-  cmd->efile = efile;
-  cmd->mode = mode;
-  cmd->fd = fd;
-  return (struct cmd*)cmd;
+struct cmd *
+redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd) {
+    struct redircmd *cmd;
+
+    cmd = malloc(sizeof(*cmd));
+    memset(cmd, 0, sizeof(*cmd));
+    cmd->type = REDIR;
+    cmd->cmd = subcmd;
+    cmd->file = file;
+    cmd->efile = efile;
+    cmd->mode = mode;
+    cmd->fd = fd;
+    return (struct cmd *) cmd;
 }
 
-struct cmd*
-pipecmd(struct cmd *left, struct cmd *right)
-{
-  struct pipecmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-  memset(cmd, 0, sizeof(*cmd));
-  cmd->type = PIPE;
-  cmd->left = left;
-  cmd->right = right;
-  return (struct cmd*)cmd;
+struct cmd *
+pipecmd(struct cmd *left, struct cmd *right) {
+    struct pipecmd *cmd;
+
+    cmd = malloc(sizeof(*cmd));
+    memset(cmd, 0, sizeof(*cmd));
+    cmd->type = PIPE;
+    cmd->left = left;
+    cmd->right = right;
+    return (struct cmd *) cmd;
 }
 
-struct cmd*
-listcmd(struct cmd *left, struct cmd *right)
-{
-  struct listcmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-  memset(cmd, 0, sizeof(*cmd));
-  cmd->type = LIST;
-  cmd->left = left;
-  cmd->right = right;
-  return (struct cmd*)cmd;
+struct cmd *
+listcmd(struct cmd *left, struct cmd *right) {
+    struct listcmd *cmd;
+
+    cmd = malloc(sizeof(*cmd));
+    memset(cmd, 0, sizeof(*cmd));
+    cmd->type = LIST;
+    cmd->left = left;
+    cmd->right = right;
+    return (struct cmd *) cmd;
 }
 
-struct cmd*
-backcmd(struct cmd *subcmd)
-{
-  struct backcmd *cmd;
+struct cmd *
+backcmd(struct cmd *subcmd) {
+    struct backcmd *cmd;
 
-  cmd = malloc(sizeof(*cmd));
-  memset(cmd, 0, sizeof(*cmd));
-  cmd->type = BACK;
-  cmd->cmd = subcmd;
-  return (struct cmd*)cmd;
+    cmd = malloc(sizeof(*cmd));
+    memset(cmd, 0, sizeof(*cmd));
+    cmd->type = BACK;
+    cmd->cmd = subcmd;
+    return (struct cmd *) cmd;
 }
 //PAGEBREAK!
 // Parsing
@@ -263,231 +323,225 @@ char whitespace[] = " \t\r\n\v";
 char symbols[] = "<|>&;()";
 
 int
-gettoken(char **ps, char *es, char **q, char **eq)
-{
-  char *s;
-  int ret;
-
-  s = *ps;
-  while(s < es && strchr(whitespace, *s))
-    s++;
-  if(q)
-    *q = s;
-  ret = *s;
-  switch(*s){
-  case 0:
-    break;
-  case '|':
-  case '(':
-  case ')':
-  case ';':
-  case '&':
-  case '<':
-    s++;
-    break;
-  case '>':
-    s++;
-    if(*s == '>'){
-      ret = '+';
-      s++;
+gettoken(char **ps, char *es, char **q, char **eq) {
+    char *s;
+    int ret;
+
+    s = *ps;
+    while (s < es && strchr(whitespace, *s))
+        s++;
+    if (q)
+        *q = s;
+    ret = *s;
+    switch (*s) {
+        case 0:
+            break;
+        case '|':
+        case '(':
+        case ')':
+        case ';':
+        case '&':
+        case '<':
+            s++;
+            break;
+        case '>':
+            s++;
+            if (*s == '>') {
+                ret = '+';
+                s++;
+            }
+            break;
+        default:
+            ret = 'a';
+            while (s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+                s++;
+            break;
     }
-    break;
-  default:
-    ret = 'a';
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-      s++;
-    break;
-  }
-  if(eq)
-    *eq = s;
-
-  while(s < es && strchr(whitespace, *s))
-    s++;
-  *ps = s;
-  return ret;
+    if (eq)
+        *eq = s;
+
+    while (s < es && strchr(whitespace, *s))
+        s++;
+    *ps = s;
+    return ret;
 }
 
 int
-peek(char **ps, char *es, char *toks)
-{
-  char *s;
-
-  s = *ps;
-  while(s < es && strchr(whitespace, *s))
-    s++;
-  *ps = s;
-  return *s && strchr(toks, *s);
+peek(char **ps, char *es, char *toks) {
+    char *s;
+
+    s = *ps;
+    while (s < es && strchr(whitespace, *s))
+        s++;
+    *ps = s;
+    return *s && strchr(toks, *s);
 }
 
-struct cmd *parseline(char**, char*);
-struct cmd *parsepipe(char**, char*);
-struct cmd *parseexec(char**, char*);
-struct cmd *nulterminate(struct cmd*);
-
-struct cmd*
-parsecmd(char *s)
-{
-  char *es;
-  struct cmd *cmd;
-
-  es = s + strlen(s);
-  cmd = parseline(&s, es);
-  peek(&s, es, "");
-  if(s != es){
-    printf(2, "leftovers: %s\n", s);
-    panic("syntax");
-  }
-  nulterminate(cmd);
-  return cmd;
+struct cmd *parseline(char **, char *);
+
+struct cmd *parsepipe(char **, char *);
+
+struct cmd *parseexec(char **, char *);
+
+struct cmd *nulterminate(struct cmd *);
+
+struct cmd *
+parsecmd(char *s) {
+    char *es;
+    struct cmd *cmd;
+
+    es = s + strlen(s);
+    cmd = parseline(&s, es);
+    peek(&s, es, "");
+    if (s != es) {
+        printf(2, "leftovers: %s\n", s);
+        panic("syntax");
+    }
+    nulterminate(cmd);
+    return cmd;
 }
 
-struct cmd*
-parseline(char **ps, char *es)
-{
-  struct cmd *cmd;
+struct cmd *
+parseline(char **ps, char *es) {
+    struct cmd *cmd;
 
-  cmd = parsepipe(ps, es);
-  while(peek(ps, es, "&")){
-    gettoken(ps, es, 0, 0);
-    cmd = backcmd(cmd);
-  }
-  if(peek(ps, es, ";")){
-    gettoken(ps, es, 0, 0);
-    cmd = listcmd(cmd, parseline(ps, es));
-  }
-  return cmd;
+    cmd = parsepipe(ps, es);
+    while (peek(ps, es, "&")) {
+        gettoken(ps, es, 0, 0);
+        cmd = backcmd(cmd);
+    }
+    if (peek(ps, es, ";")) {
+        gettoken(ps, es, 0, 0);
+        cmd = listcmd(cmd, parseline(ps, es));
+    }
+    return cmd;
 }
 
-struct cmd*
-parsepipe(char **ps, char *es)
-{
-  struct cmd *cmd;
+struct cmd *
+parsepipe(char **ps, char *es) {
+    struct cmd *cmd;
 
-  cmd = parseexec(ps, es);
-  if(peek(ps, es, "|")){
-    gettoken(ps, es, 0, 0);
-    cmd = pipecmd(cmd, parsepipe(ps, es));
-  }
-  return cmd;
+    cmd = parseexec(ps, es);
+    if (peek(ps, es, "|")) {
+        gettoken(ps, es, 0, 0);
+        cmd = pipecmd(cmd, parsepipe(ps, es));
+    }
+    return cmd;
 }
 
-struct cmd*
-parseredirs(struct cmd *cmd, char **ps, char *es)
-{
-  int tok;
-  char *q, *eq;
-
-  while(peek(ps, es, "<>")){
-    tok = gettoken(ps, es, 0, 0);
-    if(gettoken(ps, es, &q, &eq) != 'a')
-      panic("missing file for redirection");
-    switch(tok){
-    case '<':
-      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
-      break;
-    case '>':
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-      break;
-    case '+':  // >>
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-      break;
+struct cmd *
+parseredirs(struct cmd *cmd, char **ps, char *es) {
+    int tok;
+    char *q, *eq;
+
+    while (peek(ps, es, "<>")) {
+        tok = gettoken(ps, es, 0, 0);
+        if (gettoken(ps, es, &q, &eq) != 'a')
+            panic("missing file for redirection");
+        switch (tok) {
+            case '<':
+                cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+                break;
+            case '>':
+                cmd = redircmd(cmd, q, eq, O_WRONLY | O_CREATE, 1);
+                break;
+            case '+':  // >>
+                cmd = redircmd(cmd, q, eq, O_WRONLY | O_CREATE, 1);
+                break;
+        }
     }
-  }
-  return cmd;
+    return cmd;
 }
 
-struct cmd*
-parseblock(char **ps, char *es)
-{
-  struct cmd *cmd;
-
-  if(!peek(ps, es, "("))
-    panic("parseblock");
-  gettoken(ps, es, 0, 0);
-  cmd = parseline(ps, es);
-  if(!peek(ps, es, ")"))
-    panic("syntax - missing )");
-  gettoken(ps, es, 0, 0);
-  cmd = parseredirs(cmd, ps, es);
-  return cmd;
+struct cmd *
+parseblock(char **ps, char *es) {
+    struct cmd *cmd;
+
+    if (!peek(ps, es, "("))
+        panic("parseblock");
+    gettoken(ps, es, 0, 0);
+    cmd = parseline(ps, es);
+    if (!peek(ps, es, ")"))
+        panic("syntax - missing )");
+    gettoken(ps, es, 0, 0);
+    cmd = parseredirs(cmd, ps, es);
+    return cmd;
 }
 
-struct cmd*
-parseexec(char **ps, char *es)
-{
-  char *q, *eq;
-  int tok, argc;
-  struct execcmd *cmd;
-  struct cmd *ret;
-
-  if(peek(ps, es, "("))
-    return parseblock(ps, es);
-
-  ret = execcmd();
-  cmd = (struct execcmd*)ret;
-
-  argc = 0;
-  ret = parseredirs(ret, ps, es);
-  while(!peek(ps, es, "|)&;")){
-    if((tok=gettoken(ps, es, &q, &eq)) == 0)
-      break;
-    if(tok != 'a')
-      panic("syntax");
-    cmd->argv[argc] = q;
-    cmd->eargv[argc] = eq;
-    argc++;
-    if(argc >= MAXARGS)
-      panic("too many args");
+struct cmd *
+parseexec(char **ps, char *es) {
+    char *q, *eq;
+    int tok, argc;
+    struct execcmd *cmd;
+    struct cmd *ret;
+
+    if (peek(ps, es, "("))
+        return parseblock(ps, es);
+
+    ret = execcmd();
+    cmd = (struct execcmd *) ret;
+
+    argc = 0;
     ret = parseredirs(ret, ps, es);
-  }
-  cmd->argv[argc] = 0;
-  cmd->eargv[argc] = 0;
-  return ret;
+    while (!peek(ps, es, "|)&;")) {
+        if ((tok = gettoken(ps, es, &q, &eq)) == 0)
+            break;
+        if (tok != 'a')
+            panic("syntax");
+        cmd->argv[argc] = q;
+        cmd->eargv[argc] = eq;
+        argc++;
+        if (argc >= MAXARGS)
+            panic("too many args");
+        ret = parseredirs(ret, ps, es);
+    }
+    cmd->argv[argc] = 0;
+    cmd->eargv[argc] = 0;
+    return ret;
 }
 
 // NUL-terminate all the counted strings.
-struct cmd*
-nulterminate(struct cmd *cmd)
-{
-  int i;
-  struct backcmd *bcmd;
-  struct execcmd *ecmd;
-  struct listcmd *lcmd;
-  struct pipecmd *pcmd;
-  struct redircmd *rcmd;
-
-  if(cmd == 0)
-    return 0;
-
-  switch(cmd->type){
-  case EXEC:
-    ecmd = (struct execcmd*)cmd;
-    for(i=0; ecmd->argv[i]; i++)
-      *ecmd->eargv[i] = 0;
-    break;
-
-  case REDIR:
-    rcmd = (struct redircmd*)cmd;
-    nulterminate(rcmd->cmd);
-    *rcmd->efile = 0;
-    break;
-
-  case PIPE:
-    pcmd = (struct pipecmd*)cmd;
-    nulterminate(pcmd->left);
-    nulterminate(pcmd->right);
-    break;
-
-  case LIST:
-    lcmd = (struct listcmd*)cmd;
-    nulterminate(lcmd->left);
-    nulterminate(lcmd->right);
-    break;
-
-  case BACK:
-    bcmd = (struct backcmd*)cmd;
-    nulterminate(bcmd->cmd);
-    break;
-  }
-  return cmd;
+struct cmd *
+nulterminate(struct cmd *cmd) {
+    int i;
+    struct backcmd *bcmd;
+    struct execcmd *ecmd;
+    struct listcmd *lcmd;
+    struct pipecmd *pcmd;
+    struct redircmd *rcmd;
+
+    if (cmd == 0)
+        return 0;
+
+    switch (cmd->type) {
+        case EXEC:
+            ecmd = (struct execcmd *) cmd;
+            for (i = 0; ecmd->argv[i]; i++)
+                *ecmd->eargv[i] = 0;
+            break;
+
+        case REDIR:
+            rcmd = (struct redircmd *) cmd;
+            nulterminate(rcmd->cmd);
+            *rcmd->efile = 0;
+            break;
+
+        case PIPE:
+            pcmd = (struct pipecmd *) cmd;
+            nulterminate(pcmd->left);
+            nulterminate(pcmd->right);
+            break;
+
+        case LIST:
+            lcmd = (struct listcmd *) cmd;
+            nulterminate(lcmd->left);
+            nulterminate(lcmd->right);
+            break;
+
+        case BACK:
+            bcmd = (struct backcmd *) cmd;
+            nulterminate(bcmd->cmd);
+            break;
+    }
+    return cmd;
 }
diff --git a/stressfs.c b/stressfs.c
index c0a4743..06a07ca 100644
--- a/stressfs.c
+++ b/stressfs.c
@@ -43,7 +43,7 @@ main(int argc, char *argv[])
     read(fd, data, sizeof(data));
   close(fd);
 
-  wait();
+  wait(0);
 
-  exit();
+  exit(0);
 }
diff --git a/syscall.c b/syscall.c
index ee85261..e4b8161 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,11 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_detach(void);
+extern int sys_priority(void);
+extern int sys_policy(void);
+extern int sys_wait_stat(void);
+
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +131,13 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_detach]   sys_detach,
+[SYS_priority]   sys_priority,
+[SYS_policy]   sys_policy,
+[SYS_wait_stat]   sys_wait_stat,
+
+
+
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..e847a38 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,10 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_detach  22
+#define SYS_priority  23
+#define SYS_policy  24
+#define SYS_wait_stat  25
+
+
+
diff --git a/sysproc.c b/sysproc.c
index 0686d29..f2dae77 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -16,14 +16,27 @@ sys_fork(void)
 int
 sys_exit(void)
 {
-  exit();
-  return 0;  // not reached
+    int status;
+    if(argint(0, &status) < 0)
+        return -1;
+  exit(status);
+    return status;
 }
 
 int
 sys_wait(void)
 {
-  return wait();
+  return wait(0);
+}
+
+int
+sys_detach(void)
+{
+    int pid;
+
+    if(argint(0, &pid) < 0)
+        return -1;
+    return detach(pid);
 }
 
 int
@@ -89,3 +102,43 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_priority(void)
+{
+  int n;
+
+  if(argint(0, &n) < 0)
+    return -1;
+  priority(n);
+  return 0;
+}
+
+int
+sys_policy(void)
+{
+  int n;
+
+  if(argint(0, &n) < 0)
+    return -1;
+  policy(n);
+  return 0;
+}
+
+int
+sys_wait_stat(void)
+{
+  int status;
+  int performance;
+  int pid;
+
+
+  if (argint(0, &status) < 0)
+    return -1;
+  if (argint(1, &performance) < 0)
+    return -1;
+
+
+  pid = wait_stat((int*)status, (struct perf*) performance);
+  return pid;
+}
\ No newline at end of file
diff --git a/trap.c b/trap.c
index 41c66eb..7e9f5c2 100644
--- a/trap.c
+++ b/trap.c
@@ -13,6 +13,7 @@ struct gatedesc idt[256];
 extern uint vectors[];  // in vectors.S: array of 256 entry pointers
 struct spinlock tickslock;
 uint ticks;
+extern void incCounters(void);
 
 void
 tvinit(void)
@@ -38,17 +39,18 @@ trap(struct trapframe *tf)
 {
   if(tf->trapno == T_SYSCALL){
     if(myproc()->killed)
-      exit();
+      exit(0);
     myproc()->tf = tf;
     syscall();
     if(myproc()->killed)
-      exit();
+      exit(0);
     return;
   }
 
   switch(tf->trapno){
   case T_IRQ0 + IRQ_TIMER:
     if(cpuid() == 0){
+      incCounters();
       acquire(&tickslock);
       ticks++;
       wakeup(&ticks);
@@ -98,7 +100,7 @@ trap(struct trapframe *tf)
   // (If it is still executing in the kernel, let it keep running
   // until it gets to the regular system call return.)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-    exit();
+    exit(0);
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
@@ -108,5 +110,5 @@ trap(struct trapframe *tf)
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-    exit();
+    exit(0);
 }
diff --git a/types.h b/types.h
index c6332af..d83a4c1 100644
--- a/types.h
+++ b/types.h
@@ -1,11 +1,18 @@
 #pragma once
 
-typedef unsigned int      uint;
-typedef unsigned short  ushort;
-typedef unsigned char    uchar;
-typedef uint             pde_t;
-typedef int            boolean;
+typedef unsigned int uint;
+typedef unsigned short ushort;
+typedef unsigned char uchar;
+typedef uint pde_t;
+typedef int boolean;
 
+struct perf {
+    int ctime;
+    int ttime;
+    int stime;
+    int retime;
+    int rutime;
+};
 #define null 0
 
 #ifndef __cplusplus
diff --git a/user.h b/user.h
index 4f99c52..3ec83c3 100644
--- a/user.h
+++ b/user.h
@@ -3,8 +3,8 @@ struct rtcdate;
 
 // system calls
 int fork(void);
-int exit(void) __attribute__((noreturn));
-int wait(void);
+int exit(int) __attribute__((noreturn));
+int wait(int*);
 int pipe(int*);
 int write(int, const void*, int);
 int read(int, void*, int);
@@ -23,6 +23,10 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int detach(int);
+void priority(int);
+void policy(int);
+int wait_stat(int*, struct perf*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..c1a760c 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,10 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(detach)
+SYSCALL(priority)
+SYSCALL(policy)
+SYSCALL(wait_stat)
+
+
+
diff --git a/wc.c b/wc.c
index d6a54df..1d4f708 100644
--- a/wc.c
+++ b/wc.c
@@ -27,7 +27,7 @@ wc(int fd, char *name)
   }
   if(n < 0){
     printf(1, "wc: read error\n");
-    exit();
+    exit(0);
   }
   printf(1, "%d %d %d %s\n", l, w, c, name);
 }
@@ -39,16 +39,16 @@ main(int argc, char *argv[])
 
   if(argc <= 1){
     wc(0, "");
-    exit();
+    exit(0);
   }
 
   for(i = 1; i < argc; i++){
     if((fd = open(argv[i], 0)) < 0){
       printf(1, "wc: cannot open %s\n", argv[i]);
-      exit();
+      exit(0);
     }
     wc(fd, argv[i]);
     close(fd);
   }
-  exit();
+  exit(0);
 }
diff --git a/zombie.c b/zombie.c
index ee817da..c96b92d 100644
--- a/zombie.c
+++ b/zombie.c
@@ -10,5 +10,5 @@ main(void)
 {
   if(fork() > 0)
     sleep(5);  // Let child exit before parent.
-  exit();
+  exit(0);
 }
